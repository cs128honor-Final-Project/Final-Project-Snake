{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0","program":"/home/vagrant/.rustup/toolchains/stable-aarch64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","wgpu_types","--edition=2018","/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=8b0eb7c4607e25c5","-C","extra-filename=-8b0eb7c4607e25c5","--out-dir","/home/vagrant/src/cs128honor/Final-Project/rust-snake/target/rls/debug/deps","-L","dependency=/home/vagrant/src/cs128honor/Final-Project/rust-snake/target/rls/debug/deps","--extern","bitflags=/home/vagrant/src/cs128honor/Final-Project/rust-snake/target/rls/debug/deps/libbitflags-84087b4c9830543c.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/vagrant/.rustup/toolchains/stable-aarch64-unknown-linux-gnu"],"output":"/home/vagrant/src/cs128honor/Final-Project/rust-snake/target/rls/debug/deps/libwgpu_types-8b0eb7c4607e25c5.rmeta"},"prelude":{"crate_id":{"name":"wgpu_types","disambiguator":[3805972985373015123,0]},"crate_root":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src","external_crates":[{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16445510266835534892,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5715287577345846916,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2199189476072148838,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9754053951972344886,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8608258377683752015,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[11708387549564946430,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[11871207697450564647,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[2882403878542877674,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[1632236844500716591,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2176439197024966323,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[18408288890896598870,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[15351315317909885583,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[3890495817449864796,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[1301525367465190851,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[9159134502401529852,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[17249337610897666069,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[1193766655778347732,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[6285120501625389371,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[15349562571025913859,0]}},{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","num":20,"id":{"name":"bitflags","disambiguator":[627658104046499823,0]}}],"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":0,"byte_end":156868,"line_start":1,"line_end":3702,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":0,"byte_end":156868,"line_start":1,"line_end":3702,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":187},{"krate":0,"index":209},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":22},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":263},{"krate":0,"index":275},{"krate":0,"index":277},{"krate":0,"index":279},{"krate":0,"index":281},{"krate":0,"index":283},{"krate":0,"index":311},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":334},{"krate":0,"index":337},{"krate":0,"index":24},{"krate":0,"index":366},{"krate":0,"index":371},{"krate":0,"index":374},{"krate":0,"index":377},{"krate":0,"index":379},{"krate":0,"index":383},{"krate":0,"index":385},{"krate":0,"index":388},{"krate":0,"index":26},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":392},{"krate":0,"index":413},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":507},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":515},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":522},{"krate":0,"index":525},{"krate":0,"index":527},{"krate":0,"index":530},{"krate":0,"index":533},{"krate":0,"index":29},{"krate":0,"index":631},{"krate":0,"index":659},{"krate":0,"index":661},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":672},{"krate":0,"index":674},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":690},{"krate":0,"index":692},{"krate":0,"index":39},{"krate":0,"index":695},{"krate":0,"index":699},{"krate":0,"index":701},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":714},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":717},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":727},{"krate":0,"index":729},{"krate":0,"index":731},{"krate":0,"index":733},{"krate":0,"index":736},{"krate":0,"index":753},{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":759},{"krate":0,"index":761},{"krate":0,"index":794},{"krate":0,"index":797},{"krate":0,"index":799},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":809},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":817},{"krate":0,"index":820},{"krate":0,"index":45},{"krate":0,"index":864},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":889},{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":922},{"krate":0,"index":927},{"krate":0,"index":930},{"krate":0,"index":933},{"krate":0,"index":47},{"krate":0,"index":936},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":952},{"krate":0,"index":955},{"krate":0,"index":964},{"krate":0,"index":966},{"krate":0,"index":968},{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":997},{"krate":0,"index":1000},{"krate":0,"index":1002},{"krate":0,"index":1005},{"krate":0,"index":1007},{"krate":0,"index":1010},{"krate":0,"index":1012},{"krate":0,"index":1015},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1043},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1059},{"krate":0,"index":1061},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":1070},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1113},{"krate":0,"index":1115},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1140},{"krate":0,"index":1141},{"krate":0,"index":1143},{"krate":0,"index":1145},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":56},{"krate":0,"index":1154},{"krate":0,"index":1158},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1170},{"krate":0,"index":58},{"krate":0,"index":62},{"krate":0,"index":1173},{"krate":0,"index":1176},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1188},{"krate":0,"index":64},{"krate":0,"index":1191},{"krate":0,"index":1195},{"krate":0,"index":1197},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1206},{"krate":0,"index":68},{"krate":0,"index":1209},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1228},{"krate":0,"index":1230},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":1239},{"krate":0,"index":1246},{"krate":0,"index":1247},{"krate":0,"index":1249},{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1257},{"krate":0,"index":74},{"krate":0,"index":1260},{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1270},{"krate":0,"index":1272},{"krate":0,"index":1273},{"krate":0,"index":1275},{"krate":0,"index":1276},{"krate":0,"index":1278},{"krate":0,"index":1281},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1294},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1302},{"krate":0,"index":76},{"krate":0,"index":1305},{"krate":0,"index":1313},{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1318},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1327},{"krate":0,"index":1330},{"krate":0,"index":1334},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1346},{"krate":0,"index":78},{"krate":0,"index":1349},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1359},{"krate":0,"index":1361},{"krate":0,"index":1363},{"krate":0,"index":1365},{"krate":0,"index":1368},{"krate":0,"index":1374},{"krate":0,"index":1376},{"krate":0,"index":1378},{"krate":0,"index":1380},{"krate":0,"index":1382},{"krate":0,"index":1404},{"krate":0,"index":1407},{"krate":0,"index":1409},{"krate":0,"index":1412},{"krate":0,"index":1414},{"krate":0,"index":1417},{"krate":0,"index":1419},{"krate":0,"index":1422},{"krate":0,"index":1424},{"krate":0,"index":1427},{"krate":0,"index":1430},{"krate":0,"index":1441},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1448},{"krate":0,"index":1450},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1460},{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1471},{"krate":0,"index":1473},{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1483},{"krate":0,"index":1678},{"krate":0,"index":1679},{"krate":0,"index":1681},{"krate":0,"index":1683},{"krate":0,"index":1686},{"krate":0,"index":1687},{"krate":0,"index":1689},{"krate":0,"index":1690},{"krate":0,"index":80},{"krate":0,"index":1692},{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1696},{"krate":0,"index":1699},{"krate":0,"index":1700},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1711},{"krate":0,"index":1721},{"krate":0,"index":1723},{"krate":0,"index":1725},{"krate":0,"index":1727},{"krate":0,"index":1729},{"krate":0,"index":1755},{"krate":0,"index":1758},{"krate":0,"index":1760},{"krate":0,"index":1763},{"krate":0,"index":1765},{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1773},{"krate":0,"index":1775},{"krate":0,"index":1778},{"krate":0,"index":1781},{"krate":0,"index":82},{"krate":0,"index":1804},{"krate":0,"index":1809},{"krate":0,"index":1811},{"krate":0,"index":1813},{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1822},{"krate":0,"index":84},{"krate":0,"index":1825},{"krate":0,"index":1829},{"krate":0,"index":1831},{"krate":0,"index":1832},{"krate":0,"index":1834},{"krate":0,"index":1836},{"krate":0,"index":1837},{"krate":0,"index":88},{"krate":0,"index":1840},{"krate":0,"index":1846},{"krate":0,"index":1848},{"krate":0,"index":1850},{"krate":0,"index":1851},{"krate":0,"index":90},{"krate":0,"index":1854},{"krate":0,"index":1861},{"krate":0,"index":1862},{"krate":0,"index":1864},{"krate":0,"index":1866},{"krate":0,"index":1869},{"krate":0,"index":1870},{"krate":0,"index":1872},{"krate":0,"index":1873},{"krate":0,"index":93},{"krate":0,"index":1875},{"krate":0,"index":1900},{"krate":0,"index":1901},{"krate":0,"index":1903},{"krate":0,"index":1905},{"krate":0,"index":1908},{"krate":0,"index":1909},{"krate":0,"index":1911},{"krate":0,"index":1912},{"krate":0,"index":95},{"krate":0,"index":1914},{"krate":0,"index":1919},{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1931},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":1934},{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1962},{"krate":0,"index":1964},{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1970},{"krate":0,"index":1971},{"krate":0,"index":102},{"krate":0,"index":1973},{"krate":0,"index":1980},{"krate":0,"index":1981},{"krate":0,"index":1983},{"krate":0,"index":1985},{"krate":0,"index":1988},{"krate":0,"index":1989},{"krate":0,"index":1991},{"krate":0,"index":1992},{"krate":0,"index":104},{"krate":0,"index":1994},{"krate":0,"index":1998},{"krate":0,"index":2000},{"krate":0,"index":2001},{"krate":0,"index":2003},{"krate":0,"index":2004},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2010},{"krate":0,"index":2013},{"krate":0,"index":2116},{"krate":0,"index":2117},{"krate":0,"index":2119},{"krate":0,"index":2121},{"krate":0,"index":2124},{"krate":0,"index":2125},{"krate":0,"index":2127},{"krate":0,"index":2128},{"krate":0,"index":106},{"krate":0,"index":2130},{"krate":0,"index":2132},{"krate":0,"index":2133},{"krate":0,"index":2134},{"krate":0,"index":2137},{"krate":0,"index":2138},{"krate":0,"index":2140},{"krate":0,"index":2142},{"krate":0,"index":2144},{"krate":0,"index":2146},{"krate":0,"index":2149},{"krate":0,"index":2162},{"krate":0,"index":2164},{"krate":0,"index":2166},{"krate":0,"index":2168},{"krate":0,"index":2170},{"krate":0,"index":2199},{"krate":0,"index":2202},{"krate":0,"index":2204},{"krate":0,"index":2207},{"krate":0,"index":2209},{"krate":0,"index":2212},{"krate":0,"index":2214},{"krate":0,"index":2217},{"krate":0,"index":2219},{"krate":0,"index":2222},{"krate":0,"index":2225},{"krate":0,"index":2257},{"krate":0,"index":2263},{"krate":0,"index":2266},{"krate":0,"index":2269},{"krate":0,"index":2271},{"krate":0,"index":2275},{"krate":0,"index":2277},{"krate":0,"index":2280},{"krate":0,"index":108},{"krate":0,"index":2284},{"krate":0,"index":2287},{"krate":0,"index":2290},{"krate":0,"index":2293},{"krate":0,"index":2295},{"krate":0,"index":2299},{"krate":0,"index":2301},{"krate":0,"index":2304},{"krate":0,"index":113},{"krate":0,"index":118},{"krate":0,"index":2308},{"krate":0,"index":2318},{"krate":0,"index":2319},{"krate":0,"index":2321},{"krate":0,"index":2323},{"krate":0,"index":2324},{"krate":0,"index":2326},{"krate":0,"index":2327},{"krate":0,"index":2329},{"krate":0,"index":2332},{"krate":0,"index":2334},{"krate":0,"index":2335},{"krate":0,"index":2336},{"krate":0,"index":2339},{"krate":0,"index":2340},{"krate":0,"index":2342},{"krate":0,"index":2344},{"krate":0,"index":2346},{"krate":0,"index":2348},{"krate":0,"index":2351},{"krate":0,"index":2360},{"krate":0,"index":2362},{"krate":0,"index":2364},{"krate":0,"index":2366},{"krate":0,"index":2368},{"krate":0,"index":2393},{"krate":0,"index":2396},{"krate":0,"index":2398},{"krate":0,"index":2401},{"krate":0,"index":2403},{"krate":0,"index":2406},{"krate":0,"index":2408},{"krate":0,"index":2411},{"krate":0,"index":2413},{"krate":0,"index":2416},{"krate":0,"index":2419},{"krate":0,"index":2439},{"krate":0,"index":2445},{"krate":0,"index":2447},{"krate":0,"index":2449},{"krate":0,"index":2450},{"krate":0,"index":2453},{"krate":0,"index":2454},{"krate":0,"index":2456},{"krate":0,"index":2459},{"krate":0,"index":2470},{"krate":0,"index":2472},{"krate":0,"index":2477},{"krate":0,"index":2479},{"krate":0,"index":2480},{"krate":0,"index":2482},{"krate":0,"index":2484},{"krate":0,"index":2485},{"krate":0,"index":121},{"krate":0,"index":2488},{"krate":0,"index":2495},{"krate":0,"index":2496},{"krate":0,"index":2498},{"krate":0,"index":2500},{"krate":0,"index":2503},{"krate":0,"index":2504},{"krate":0,"index":2506},{"krate":0,"index":2507},{"krate":0,"index":2509},{"krate":0,"index":2513},{"krate":0,"index":2515},{"krate":0,"index":2516},{"krate":0,"index":2518},{"krate":0,"index":2519},{"krate":0,"index":2522},{"krate":0,"index":2523},{"krate":0,"index":2525},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":2528},{"krate":0,"index":2532},{"krate":0,"index":2534},{"krate":0,"index":2535},{"krate":0,"index":2537},{"krate":0,"index":2538},{"krate":0,"index":2541},{"krate":0,"index":2542},{"krate":0,"index":2544},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":2547},{"krate":0,"index":2556},{"krate":0,"index":2559},{"krate":0,"index":2562},{"krate":0,"index":2564},{"krate":0,"index":2568},{"krate":0,"index":2570},{"krate":0,"index":2573},{"krate":0,"index":138},{"krate":0,"index":2577},{"krate":0,"index":2584},{"krate":0,"index":2585},{"krate":0,"index":2587},{"krate":0,"index":2589},{"krate":0,"index":2592},{"krate":0,"index":2593},{"krate":0,"index":2595},{"krate":0,"index":2596},{"krate":0,"index":145},{"krate":0,"index":2598},{"krate":0,"index":2611},{"krate":0,"index":2612},{"krate":0,"index":2614},{"krate":0,"index":2616},{"krate":0,"index":2619},{"krate":0,"index":2620},{"krate":0,"index":2622},{"krate":0,"index":2623},{"krate":0,"index":147},{"krate":0,"index":2625},{"krate":0,"index":2632},{"krate":0,"index":2633},{"krate":0,"index":2635},{"krate":0,"index":2637},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2643},{"krate":0,"index":2644},{"krate":0,"index":149},{"krate":0,"index":2646},{"krate":0,"index":2649},{"krate":0,"index":2651},{"krate":0,"index":2653},{"krate":0,"index":2654},{"krate":0,"index":2657},{"krate":0,"index":2658},{"krate":0,"index":2660},{"krate":0,"index":2663},{"krate":0,"index":2666},{"krate":0,"index":2669},{"krate":0,"index":2672},{"krate":0,"index":2675},{"krate":0,"index":2677},{"krate":0,"index":2681},{"krate":0,"index":2683},{"krate":0,"index":2686},{"krate":0,"index":151},{"krate":0,"index":2690},{"krate":0,"index":2694},{"krate":0,"index":2696},{"krate":0,"index":2697},{"krate":0,"index":2699},{"krate":0,"index":2700},{"krate":0,"index":2703},{"krate":0,"index":2704},{"krate":0,"index":2706},{"krate":0,"index":2709},{"krate":0,"index":2712},{"krate":0,"index":2715},{"krate":0,"index":2718},{"krate":0,"index":2720},{"krate":0,"index":2724},{"krate":0,"index":2726},{"krate":0,"index":2729},{"krate":0,"index":156},{"krate":0,"index":161},{"krate":0,"index":2733},{"krate":0,"index":2737},{"krate":0,"index":2739},{"krate":0,"index":2740},{"krate":0,"index":2742},{"krate":0,"index":2744},{"krate":0,"index":2749},{"krate":0,"index":2751},{"krate":0,"index":2752},{"krate":0,"index":2754},{"krate":0,"index":2755},{"krate":0,"index":2757},{"krate":0,"index":2758},{"krate":0,"index":2761},{"krate":0,"index":164},{"krate":0,"index":2764},{"krate":0,"index":2773},{"krate":0,"index":2775},{"krate":0,"index":2776},{"krate":0,"index":2778},{"krate":0,"index":2779},{"krate":0,"index":2781},{"krate":0,"index":2782},{"krate":0,"index":2785},{"krate":0,"index":166},{"krate":0,"index":2788},{"krate":0,"index":2795},{"krate":0,"index":2797},{"krate":0,"index":2798},{"krate":0,"index":2800},{"krate":0,"index":2801},{"krate":0,"index":2803},{"krate":0,"index":2804},{"krate":0,"index":2806},{"krate":0,"index":2809},{"krate":0,"index":2816},{"krate":0,"index":2818},{"krate":0,"index":2819},{"krate":0,"index":2821},{"krate":0,"index":2822},{"krate":0,"index":2824},{"krate":0,"index":2825},{"krate":0,"index":2827},{"krate":0,"index":2830},{"krate":0,"index":2846},{"krate":0,"index":2848},{"krate":0,"index":2849},{"krate":0,"index":2851},{"krate":0,"index":2852},{"krate":0,"index":2854},{"krate":0,"index":2855},{"krate":0,"index":2858},{"krate":0,"index":168},{"krate":0,"index":2861},{"krate":0,"index":2866},{"krate":0,"index":2868},{"krate":0,"index":2869},{"krate":0,"index":2871},{"krate":0,"index":2872},{"krate":0,"index":2875},{"krate":0,"index":2876},{"krate":0,"index":2878},{"krate":0,"index":2881},{"krate":0,"index":2885},{"krate":0,"index":2888},{"krate":0,"index":2891},{"krate":0,"index":2897},{"krate":0,"index":2900},{"krate":0,"index":2903},{"krate":0,"index":2909},{"krate":0,"index":2911},{"krate":0,"index":2913},{"krate":0,"index":2915},{"krate":0,"index":2916},{"krate":0,"index":170},{"krate":0,"index":2919},{"krate":0,"index":2926},{"krate":0,"index":2927},{"krate":0,"index":2929},{"krate":0,"index":2931},{"krate":0,"index":2932},{"krate":0,"index":2934},{"krate":0,"index":2935},{"krate":0,"index":2937},{"krate":0,"index":2940},{"krate":0,"index":2945},{"krate":0,"index":2948},{"krate":0,"index":175},{"krate":0,"index":2951},{"krate":0,"index":2959},{"krate":0,"index":2960},{"krate":0,"index":2962},{"krate":0,"index":2964},{"krate":0,"index":2966},{"krate":0,"index":2967},{"krate":0,"index":2968},{"krate":0,"index":2971},{"krate":0,"index":2972},{"krate":0,"index":2974},{"krate":0,"index":2976},{"krate":0,"index":2978},{"krate":0,"index":2980},{"krate":0,"index":2983},{"krate":0,"index":2992},{"krate":0,"index":2994},{"krate":0,"index":2996},{"krate":0,"index":2998},{"krate":0,"index":3000},{"krate":0,"index":3025},{"krate":0,"index":3028},{"krate":0,"index":3030},{"krate":0,"index":3033},{"krate":0,"index":3035},{"krate":0,"index":3038},{"krate":0,"index":3040},{"krate":0,"index":3043},{"krate":0,"index":3045},{"krate":0,"index":3048},{"krate":0,"index":3051},{"krate":0,"index":3071},{"krate":0,"index":3076},{"krate":0,"index":3078},{"krate":0,"index":3079},{"krate":0,"index":3081},{"krate":0,"index":3087},{"krate":0,"index":3089},{"krate":0,"index":3090},{"krate":0,"index":3092},{"krate":0,"index":3096},{"krate":0,"index":3098},{"krate":0,"index":3099},{"krate":0,"index":3101},{"krate":0,"index":3103},{"krate":0,"index":3105},{"krate":0,"index":181},{"krate":0,"index":185}],"decl_id":null,"docs":" This library describes the API surface of WebGPU that is agnostic of the backend.\n *  This API is used for targeting both Web and Native.\n","sig":null,"attributes":[{"value":"* This library describes the API surface of WebGPU that is agnostic of the backend.\n *  This API is used for targeting both Web and Native.\n */","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":0,"byte_end":145,"line_start":1,"line_end":3,"column_start":1,"column_end":4}},{"value":"allow(clippy :: match_like_matches_macro,)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147,"byte_end":256,"line_start":5,"line_end":8,"column_start":1,"column_end":3}},{"value":"warn(missing_docs)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":257,"byte_end":279,"line_start":9,"line_end":9,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":10},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":437,"byte_end":450,"line_start":16,"line_end":16,"column_start":10,"column_end":23},"name":"BufferAddress","qualname":"::BufferAddress","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" Integral type used for buffer offsets.\n","sig":null,"attributes":[{"value":"/ Integral type used for buffer offsets.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":385,"byte_end":427,"line_start":15,"line_end":15,"column_start":1,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":11},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":514,"byte_end":524,"line_start":18,"line_end":18,"column_start":10,"column_end":20},"name":"BufferSize","qualname":"::BufferSize","value":"std::num::NonZeroU64","parent":null,"children":[],"decl_id":null,"docs":" Integral type used for buffer slice sizes.\n","sig":null,"attributes":[{"value":"/ Integral type used for buffer slice sizes.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":458,"byte_end":504,"line_start":17,"line_end":17,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":12},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":615,"byte_end":629,"line_start":20,"line_end":20,"column_start":10,"column_end":24},"name":"ShaderLocation","qualname":"::ShaderLocation","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Integral type used for binding locations in shaders.\n","sig":null,"attributes":[{"value":"/ Integral type used for binding locations in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":549,"byte_end":605,"line_start":19,"line_end":19,"column_start":1,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":13},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":701,"byte_end":714,"line_start":22,"line_end":22,"column_start":10,"column_end":23},"name":"DynamicOffset","qualname":"::DynamicOffset","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Integral type used for dynamic bind group offsets.\n","sig":null,"attributes":[{"value":"/ Integral type used for dynamic bind group offsets.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":637,"byte_end":691,"line_start":21,"line_end":21,"column_start":1,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":14},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":925,"byte_end":953,"line_start":29,"line_end":29,"column_start":11,"column_end":39},"name":"COPY_BYTES_PER_ROW_ALIGNMENT","qualname":"::COPY_BYTES_PER_ROW_ALIGNMENT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Buffer-Texture copies must have [`bytes_per_row`] aligned to this number.","sig":null,"attributes":[{"value":"/ Buffer-Texture copies must have [`bytes_per_row`] aligned to this number.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":723,"byte_end":800,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":801,"byte_end":804,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ This doesn't apply to [`Queue::write_texture`].","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":805,"byte_end":856,"line_start":26,"line_end":26,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":857,"byte_end":860,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`bytes_per_row`]: ImageDataLayout::bytes_per_row","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":861,"byte_end":914,"line_start":28,"line_end":28,"column_start":1,"column_end":54}}]},{"kind":"Const","id":{"krate":0,"index":15},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1047,"byte_end":1077,"line_start":31,"line_end":31,"column_start":11,"column_end":41},"name":"QUERY_RESOLVE_BUFFER_ALIGNMENT","qualname":"::QUERY_RESOLVE_BUFFER_ALIGNMENT","value":"BufferAddress","parent":null,"children":[],"decl_id":null,"docs":" An offset into the query resolve buffer has to be aligned to this.\n","sig":null,"attributes":[{"value":"/ An offset into the query resolve buffer has to be aligned to this.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":966,"byte_end":1036,"line_start":30,"line_end":30,"column_start":1,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":16},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1210,"byte_end":1231,"line_start":33,"line_end":33,"column_start":11,"column_end":32},"name":"COPY_BUFFER_ALIGNMENT","qualname":"::COPY_BUFFER_ALIGNMENT","value":"BufferAddress","parent":null,"children":[],"decl_id":null,"docs":" Buffer to buffer copy as well as buffer clear offsets and sizes must be aligned to this number.\n","sig":null,"attributes":[{"value":"/ Buffer to buffer copy as well as buffer clear offsets and sizes must be aligned to this number.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1100,"byte_end":1199,"line_start":32,"line_end":32,"column_start":1,"column_end":100}}]},{"kind":"Const","id":{"krate":0,"index":17},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1290,"byte_end":1303,"line_start":35,"line_end":35,"column_start":11,"column_end":24},"name":"MAP_ALIGNMENT","qualname":"::MAP_ALIGNMENT","value":"BufferAddress","parent":null,"children":[],"decl_id":null,"docs":" Size to align mappings.\n","sig":null,"attributes":[{"value":"/ Size to align mappings.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1252,"byte_end":1279,"line_start":34,"line_end":34,"column_start":1,"column_end":28}}]},{"kind":"Const","id":{"krate":0,"index":18},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1395,"byte_end":1418,"line_start":37,"line_end":37,"column_start":11,"column_end":34},"name":"VERTEX_STRIDE_ALIGNMENT","qualname":"::VERTEX_STRIDE_ALIGNMENT","value":"BufferAddress","parent":null,"children":[],"decl_id":null,"docs":" Vertex buffer strides have to be aligned to this number.\n","sig":null,"attributes":[{"value":"/ Vertex buffer strides have to be aligned to this number.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1324,"byte_end":1384,"line_start":36,"line_end":36,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":19},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1487,"byte_end":1510,"line_start":39,"line_end":39,"column_start":11,"column_end":34},"name":"PUSH_CONSTANT_ALIGNMENT","qualname":"::PUSH_CONSTANT_ALIGNMENT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Alignment all push constants need\n","sig":null,"attributes":[{"value":"/ Alignment all push constants need","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1439,"byte_end":1476,"line_start":38,"line_end":38,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":20},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1566,"byte_end":1587,"line_start":41,"line_end":41,"column_start":11,"column_end":32},"name":"QUERY_SET_MAX_QUERIES","qualname":"::QUERY_SET_MAX_QUERIES","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Maximum queries in a query set\n","sig":null,"attributes":[{"value":"/ Maximum queries in a query set","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1521,"byte_end":1555,"line_start":40,"line_end":40,"column_start":1,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":21},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1653,"byte_end":1663,"line_start":43,"line_end":43,"column_start":11,"column_end":21},"name":"QUERY_SIZE","qualname":"::QUERY_SIZE","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Size of a single piece of query data.\n","sig":null,"attributes":[{"value":"/ Size of a single piece of query data.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1601,"byte_end":1642,"line_start":42,"line_end":42,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":188},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1937,"byte_end":1942,"line_start":52,"line_end":52,"column_start":5,"column_end":10},"name":"Empty","qualname":"::Backend::Empty","value":"Backend::Empty","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Dummy backend, used for testing.\n","sig":null,"attributes":[{"value":"/ Dummy backend, used for testing.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1896,"byte_end":1932,"line_start":51,"line_end":51,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":191},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1971,"byte_end":1977,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Vulkan","qualname":"::Backend::Vulkan","value":"Backend::Vulkan","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Vulkan API\n","sig":null,"attributes":[{"value":"/ Vulkan API","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1952,"byte_end":1966,"line_start":53,"line_end":53,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":194},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2023,"byte_end":2028,"line_start":56,"line_end":56,"column_start":5,"column_end":10},"name":"Metal","qualname":"::Backend::Metal","value":"Backend::Metal","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Metal API (Apple platforms)\n","sig":null,"attributes":[{"value":"/ Metal API (Apple platforms)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1987,"byte_end":2018,"line_start":55,"line_end":55,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":197},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2068,"byte_end":2072,"line_start":58,"line_end":58,"column_start":5,"column_end":9},"name":"Dx12","qualname":"::Backend::Dx12","value":"Backend::Dx12","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Direct3D-12 (Windows)\n","sig":null,"attributes":[{"value":"/ Direct3D-12 (Windows)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2038,"byte_end":2063,"line_start":57,"line_end":57,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":200},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2112,"byte_end":2116,"line_start":60,"line_end":60,"column_start":5,"column_end":9},"name":"Dx11","qualname":"::Backend::Dx11","value":"Backend::Dx11","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Direct3D-11 (Windows)\n","sig":null,"attributes":[{"value":"/ Direct3D-11 (Windows)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2082,"byte_end":2107,"line_start":59,"line_end":59,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":203},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2163,"byte_end":2165,"line_start":62,"line_end":62,"column_start":5,"column_end":7},"name":"Gl","qualname":"::Backend::Gl","value":"Backend::Gl","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" OpenGL ES-3 (Linux, Android)\n","sig":null,"attributes":[{"value":"/ OpenGL ES-3 (Linux, Android)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2126,"byte_end":2158,"line_start":61,"line_end":61,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":206},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2205,"byte_end":2218,"line_start":64,"line_end":64,"column_start":5,"column_end":18},"name":"BrowserWebGpu","qualname":"::Backend::BrowserWebGpu","value":"Backend::BrowserWebGpu","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" WebGPU in the browser\n","sig":null,"attributes":[{"value":"/ WebGPU in the browser","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2175,"byte_end":2200,"line_start":63,"line_end":63,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":187},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1882,"byte_end":1889,"line_start":50,"line_end":50,"column_start":10,"column_end":17},"name":"Backend","qualname":"::Backend","value":"pub enum Backend {\n    Empty = ,\n    Vulkan = ,\n    Metal = ,\n    Dx12 = ,\n    Dx11 = ,\n    Gl = ,\n    BrowserWebGpu = ,\n}","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":203},{"krate":0,"index":206}],"decl_id":null,"docs":" Backends supported by wgpu.\n","sig":null,"attributes":[{"value":"/ Backends supported by wgpu.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1675,"byte_end":1706,"line_start":45,"line_end":45,"column_start":1,"column_end":32}},{"value":"repr(u8)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":1707,"byte_end":1718,"line_start":46,"line_end":46,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":224},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2628,"byte_end":2636,"line_start":75,"line_end":75,"column_start":5,"column_end":13},"name":"LowPower","qualname":"::PowerPreference::LowPower","value":"PowerPreference::LowPower","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" Adapter that uses the least possible power. This is often an integrated GPU.\n","sig":null,"attributes":[{"value":"/ Adapter that uses the least possible power. This is often an integrated GPU.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2543,"byte_end":2623,"line_start":74,"line_end":74,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":227},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2726,"byte_end":2741,"line_start":77,"line_end":77,"column_start":5,"column_end":20},"name":"HighPerformance","qualname":"::PowerPreference::HighPerformance","value":"PowerPreference::HighPerformance","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" Adapter that has the highest performance. This is often a discrete GPU.\n","sig":null,"attributes":[{"value":"/ Adapter that has the highest performance. This is often a discrete GPU.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2646,"byte_end":2721,"line_start":76,"line_end":76,"column_start":5,"column_end":80}}]},{"kind":"Enum","id":{"krate":0,"index":223},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2521,"byte_end":2536,"line_start":73,"line_end":73,"column_start":10,"column_end":25},"name":"PowerPreference","qualname":"::PowerPreference","value":"pub enum PowerPreference { LowPower = , HighPerformance = , }","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":227}],"decl_id":null,"docs":" Power Preference when choosing a physical adapter.\n","sig":null,"attributes":[{"value":"/ Power Preference when choosing a physical adapter.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2227,"byte_end":2281,"line_start":67,"line_end":67,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2282,"byte_end":2292,"line_start":68,"line_end":68,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":244},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2958,"byte_end":2966,"line_start":89,"line_end":89,"column_start":16,"column_end":24},"name":"Backends","qualname":"::Backends","value":"Backends {  }","parent":null,"children":[{"krate":0,"index":245}],"decl_id":null,"docs":" Represents the backends that wgpu will use.\n","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs","byte_start":9986302,"byte_end":9986311,"line_start":362,"line_end":362,"column_start":11,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":284},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":3108,"byte_end":3114,"line_start":91,"line_end":91,"column_start":15,"column_end":21},"name":"VULKAN","qualname":"::Backends::VULKAN","value":"Self","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Supported on Windows, Linux/Android, and macOS/iOS via Vulkan Portability (with the Vulkan feature enabled)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":285},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":3194,"byte_end":3196,"line_start":93,"line_end":93,"column_start":15,"column_end":17},"name":"GL","qualname":"::Backends::GL","value":"Self","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Currently unsupported\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":286},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":3273,"byte_end":3278,"line_start":95,"line_end":95,"column_start":15,"column_end":20},"name":"METAL","qualname":"::Backends::METAL","value":"Self","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Supported on macOS/iOS\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":287},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":3359,"byte_end":3363,"line_start":97,"line_end":97,"column_start":15,"column_end":19},"name":"DX12","qualname":"::Backends::DX12","value":"Self","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Supported on Windows 10\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":288},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":3443,"byte_end":3447,"line_start":99,"line_end":99,"column_start":15,"column_end":19},"name":"DX11","qualname":"::Backends::DX11","value":"Self","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Supported on Windows 7+\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":289},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":3556,"byte_end":3570,"line_start":101,"line_end":101,"column_start":15,"column_end":29},"name":"BROWSER_WEBGPU","qualname":"::Backends::BROWSER_WEBGPU","value":"Self","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Supported when targeting the web through webassembly\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":290},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":3755,"byte_end":3762,"line_start":105,"line_end":105,"column_start":15,"column_end":22},"name":"PRIMARY","qualname":"::Backends::PRIMARY","value":"Self","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" All the apis that wgpu offers first tier of support for.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":291},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":4064,"byte_end":4073,"line_start":113,"line_end":113,"column_start":15,"column_end":24},"name":"SECONDARY","qualname":"::Backends::SECONDARY","value":"Self","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" All the apis that wgpu offers second tier of support for. These may\n be unsupported/still experimental.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":366},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":4559,"byte_end":4580,"line_start":131,"line_end":131,"column_start":12,"column_end":33},"name":"RequestAdapterOptions","qualname":"::RequestAdapterOptions","value":"RequestAdapterOptions { power_preference, force_fallback_adapter, compatible_surface }","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370}],"decl_id":null,"docs":" Options for requesting adapter.\n","sig":null,"attributes":[{"value":"/ Options for requesting adapter.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":4353,"byte_end":4388,"line_start":126,"line_end":126,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":4389,"byte_end":4399,"line_start":127,"line_end":127,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":368},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":4636,"byte_end":4652,"line_start":133,"line_end":133,"column_start":9,"column_end":25},"name":"power_preference","qualname":"::RequestAdapterOptions::power_preference","value":"PowerPreference","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Power preference for the adapter.\n","sig":null,"attributes":[{"value":"/ Power preference for the adapter.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":4590,"byte_end":4627,"line_start":132,"line_end":132,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":369},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":4812,"byte_end":4834,"line_start":136,"line_end":136,"column_start":9,"column_end":31},"name":"force_fallback_adapter","qualname":"::RequestAdapterOptions::force_fallback_adapter","value":"bool","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Indicates that only a fallback adapter can be returned. This is generally a \"software\"\n implementation on the system.\n","sig":null,"attributes":[{"value":"/ Indicates that only a fallback adapter can be returned. This is generally a \"software\"","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":4675,"byte_end":4765,"line_start":134,"line_end":134,"column_start":5,"column_end":95}},{"value":"/ implementation on the system.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":4770,"byte_end":4803,"line_start":135,"line_end":135,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":370},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":5033,"byte_end":5051,"line_start":139,"line_end":139,"column_start":9,"column_end":27},"name":"compatible_surface","qualname":"::RequestAdapterOptions::compatible_surface","value":"std::option::Option<S>","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Surface that is required to be presentable with the requested adapter. This does not\n create the surface, only guarantees that the adapter can present to said surface.\n","sig":null,"attributes":[{"value":"/ Surface that is required to be presentable with the requested adapter. This does not","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":4846,"byte_end":4934,"line_start":137,"line_end":137,"column_start":5,"column_end":93}},{"value":"/ create the surface, only guarantees that the adapter can present to said surface.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":4939,"byte_end":5024,"line_start":138,"line_end":138,"column_start":5,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":394},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":5863,"byte_end":5871,"line_start":165,"line_end":165,"column_start":16,"column_end":24},"name":"Features","qualname":"::Features","value":"Features {  }","parent":null,"children":[{"krate":0,"index":395}],"decl_id":null,"docs":" Features that are not guaranteed to be supported.","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs","byte_start":9986302,"byte_end":9986311,"line_start":362,"line_end":362,"column_start":11,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":457},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":6400,"byte_end":6418,"line_start":177,"line_end":177,"column_start":15,"column_end":33},"name":"DEPTH_CLIP_CONTROL","qualname":"::Features::DEPTH_CLIP_CONTROL","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" By default, polygon depth is clipped to 0-1 range before/during rasterization.\n Anything outside of that range is rejected, and respective fragments are not touched.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":458},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":7115,"byte_end":7137,"line_start":191,"line_end":191,"column_start":15,"column_end":37},"name":"TEXTURE_COMPRESSION_BC","qualname":"::Features::TEXTURE_COMPRESSION_BC","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Enables BCn family of compressed textures. All BCn textures use 4x4 pixel blocks\n with 8 or 16 bytes per block.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":459},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":7417,"byte_end":7440,"line_start":200,"line_end":200,"column_start":15,"column_end":38},"name":"INDIRECT_FIRST_INSTANCE","qualname":"::Features::INDIRECT_FIRST_INSTANCE","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Allows non-zero value for the \"first instance\" in indirect draw calls.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":460},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":8406,"byte_end":8421,"line_start":218,"line_end":218,"column_start":15,"column_end":30},"name":"TIMESTAMP_QUERY","qualname":"::Features::TIMESTAMP_QUERY","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Enables use of Timestamp Queries. These queries tell the current gpu timestamp when\n all work before the query is finished. Call [`CommandEncoder::write_timestamp`],\n [`RenderPassEncoder::write_timestamp`], or [`ComputePassEncoder::write_timestamp`] to\n write out a timestamp.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":461},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":9257,"byte_end":9282,"line_start":233,"line_end":233,"column_start":15,"column_end":40},"name":"PIPELINE_STATISTICS_QUERY","qualname":"::Features::PIPELINE_STATISTICS_QUERY","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Enables use of Pipeline Statistics Queries. These queries tell the count of various operations\n performed between the start and stop call. Call [`RenderPassEncoder::begin_pipeline_statistics_query`] to start\n a query, then call [`RenderPassEncoder::end_pipeline_statistics_query`] to stop one.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":462},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":9836,"byte_end":9860,"line_start":245,"line_end":245,"column_start":15,"column_end":39},"name":"MAPPABLE_PRIMARY_BUFFERS","qualname":"::Features::MAPPABLE_PRIMARY_BUFFERS","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Webgpu only allows the MAP_READ and MAP_WRITE buffer usage to be matched with\n COPY_DST and COPY_SRC respectively. This removes this requirement.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":463},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":10574,"byte_end":10595,"line_start":264,"line_end":264,"column_start":15,"column_end":36},"name":"TEXTURE_BINDING_ARRAY","qualname":"::Features::TEXTURE_BINDING_ARRAY","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Allows the user to create uniform arrays of textures in shaders:","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":464},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":11262,"byte_end":11282,"line_start":282,"line_end":282,"column_start":15,"column_end":35},"name":"BUFFER_BINDING_ARRAY","qualname":"::Features::BUFFER_BINDING_ARRAY","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Allows the user to create arrays of buffers in shaders:","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":465},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":11820,"byte_end":11850,"line_start":295,"line_end":295,"column_start":15,"column_end":45},"name":"STORAGE_RESOURCE_BINDING_ARRAY","qualname":"::Features::STORAGE_RESOURCE_BINDING_ARRAY","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Allows the user to create uniform arrays of storage buffers or textures in shaders,\n if resp. [`Features::BUFFER_BINDING_ARRAY`] or [`Features::TEXTURE_BINDING_ARRAY`]\n is supported.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":466},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":12952,"byte_end":13013,"line_start":320,"line_end":320,"column_start":15,"column_end":76},"name":"SAMPLED_TEXTURE_AND_STORAGE_BUFFER_ARRAY_NON_UNIFORM_INDEXING","qualname":"::Features::SAMPLED_TEXTURE_AND_STORAGE_BUFFER_ARRAY_NON_UNIFORM_INDEXING","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Allows shaders to index sampled texture and storage buffer resource arrays with dynamically non-uniform values:","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":467},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":14117,"byte_end":14178,"line_start":345,"line_end":345,"column_start":15,"column_end":76},"name":"UNIFORM_BUFFER_AND_STORAGE_TEXTURE_ARRAY_NON_UNIFORM_INDEXING","qualname":"::Features::UNIFORM_BUFFER_AND_STORAGE_TEXTURE_ARRAY_NON_UNIFORM_INDEXING","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Allows shaders to index uniform buffer and storage texture resource arrays with dynamically non-uniform values:","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":468},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":14372,"byte_end":14401,"line_start":349,"line_end":349,"column_start":15,"column_end":44},"name":"PARTIALLY_BOUND_BINDING_ARRAY","qualname":"::Features::PARTIALLY_BOUND_BINDING_ARRAY","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Allows the user to create bind groups continaing arrays with less bindings than the BindGroupLayout.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":469},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":14771,"byte_end":14792,"line_start":359,"line_end":359,"column_start":15,"column_end":36},"name":"UNSIZED_BINDING_ARRAY","qualname":"::Features::UNSIZED_BINDING_ARRAY","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Allows the user to create unsized uniform arrays of bindings:","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":470},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":15173,"byte_end":15192,"line_start":369,"line_end":369,"column_start":15,"column_end":34},"name":"MULTI_DRAW_INDIRECT","qualname":"::Features::MULTI_DRAW_INDIRECT","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Allows the user to call [`RenderPass::multi_draw_indirect`] and [`RenderPass::multi_draw_indexed_indirect`].","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":471},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":15628,"byte_end":15653,"line_start":379,"line_end":379,"column_start":15,"column_end":40},"name":"MULTI_DRAW_INDIRECT_COUNT","qualname":"::Features::MULTI_DRAW_INDIRECT_COUNT","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Allows the user to call [`RenderPass::multi_draw_indirect_count`] and [`RenderPass::multi_draw_indexed_indirect_count`].","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":472},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":16407,"byte_end":16421,"line_start":396,"line_end":396,"column_start":15,"column_end":29},"name":"PUSH_CONSTANTS","qualname":"::Features::PUSH_CONSTANTS","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Allows the use of push constants: small, fast bits of memory that can be updated\n inside a [`RenderPass`].","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":473},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":16732,"byte_end":16760,"line_start":407,"line_end":407,"column_start":15,"column_end":43},"name":"ADDRESS_MODE_CLAMP_TO_BORDER","qualname":"::Features::ADDRESS_MODE_CLAMP_TO_BORDER","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Allows the use of [`AddressMode::ClampToBorder`].","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":474},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":17141,"byte_end":17158,"line_start":418,"line_end":418,"column_start":15,"column_end":32},"name":"POLYGON_MODE_LINE","qualname":"::Features::POLYGON_MODE_LINE","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Allows the user to set [`PolygonMode::Line`] in [`PrimitiveState::polygon_mode`]","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":475},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":17519,"byte_end":17537,"line_start":428,"line_end":428,"column_start":15,"column_end":33},"name":"POLYGON_MODE_POINT","qualname":"::Features::POLYGON_MODE_POINT","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Allows the user to set [`PolygonMode::Point`] in [`PrimitiveState::polygon_mode`]","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":476},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":18321,"byte_end":18345,"line_start":443,"line_end":443,"column_start":15,"column_end":39},"name":"TEXTURE_COMPRESSION_ETC2","qualname":"::Features::TEXTURE_COMPRESSION_ETC2","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Enables ETC family of compressed textures. All ETC textures use 4x4 pixel blocks.\n ETC2 RGB and RGBA1 are 8 bytes per block. RTC2 RGBA8 and EAC are 16 bytes per block.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":477},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":19092,"byte_end":19120,"line_start":458,"line_end":458,"column_start":15,"column_end":43},"name":"TEXTURE_COMPRESSION_ASTC_LDR","qualname":"::Features::TEXTURE_COMPRESSION_ASTC_LDR","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Enables ASTC family of compressed textures. ASTC textures use pixel blocks varying from 4x4 to 12x12.\n Blocks are always 16 bytes.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":478},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":19760,"byte_end":19800,"line_start":470,"line_end":470,"column_start":15,"column_end":55},"name":"TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES","qualname":"::Features::TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Enables device specific texture format features.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":479},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":20219,"byte_end":20233,"line_start":480,"line_end":480,"column_start":15,"column_end":29},"name":"SHADER_FLOAT64","qualname":"::Features::SHADER_FLOAT64","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Enables 64-bit floating point types in SPIR-V shaders.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":480},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":20474,"byte_end":20496,"line_start":488,"line_end":488,"column_start":15,"column_end":37},"name":"VERTEX_ATTRIBUTE_64BIT","qualname":"::Features::VERTEX_ATTRIBUTE_64BIT","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Enables using 64-bit types for vertex attributes.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":481},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":20887,"byte_end":20913,"line_start":498,"line_end":498,"column_start":15,"column_end":41},"name":"CONSERVATIVE_RASTERIZATION","qualname":"::Features::CONSERVATIVE_RASTERIZATION","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Allows the user to set a overestimation-conservative-rasterization in [`PrimitiveState::conservative`]","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":482},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":21266,"byte_end":21289,"line_start":507,"line_end":507,"column_start":15,"column_end":38},"name":"VERTEX_WRITABLE_STORAGE","qualname":"::Features::VERTEX_WRITABLE_STORAGE","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Enables bindings of writable storage buffers and textures visible to vertex shaders.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":483},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":21491,"byte_end":21505,"line_start":514,"line_end":514,"column_start":15,"column_end":29},"name":"CLEAR_COMMANDS","qualname":"::Features::CLEAR_COMMANDS","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Enables clear to zero for buffers & textures.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":484},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":22043,"byte_end":22067,"line_start":526,"line_end":526,"column_start":15,"column_end":39},"name":"SPIRV_SHADER_PASSTHROUGH","qualname":"::Features::SPIRV_SHADER_PASSTHROUGH","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Enables creating shader modules from SPIR-V binary data (unsafe).","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":485},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":22501,"byte_end":22523,"line_start":537,"line_end":537,"column_start":15,"column_end":37},"name":"SHADER_PRIMITIVE_INDEX","qualname":"::Features::SHADER_PRIMITIVE_INDEX","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Enables `builtin(primitive_index)` in fragment shaders.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":486},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":22759,"byte_end":22768,"line_start":544,"line_end":544,"column_start":15,"column_end":24},"name":"MULTIVIEW","qualname":"::Features::MULTIVIEW","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Enables multiview render passes and `builtin(view_index)` in vertex shaders.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":487},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":23011,"byte_end":23036,"line_start":553,"line_end":553,"column_start":15,"column_end":40},"name":"TEXTURE_FORMAT_16BIT_NORM","qualname":"::Features::TEXTURE_FORMAT_16BIT_NORM","value":"Self","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Enables normalized `16-bit` texture formats.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":23265,"byte_end":23280,"line_start":562,"line_end":562,"column_start":18,"column_end":33},"name":"all_webgpu_mask","qualname":"<Features>::all_webgpu_mask","value":"pub const fn all_webgpu_mask() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Mask of all features which are part of the upstream WebGPU standard.\n","sig":null,"attributes":[{"value":"/ Mask of all features which are part of the upstream WebGPU standard.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":23175,"byte_end":23247,"line_start":561,"line_end":561,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":23459,"byte_end":23474,"line_start":567,"line_end":567,"column_start":18,"column_end":33},"name":"all_native_mask","qualname":"<Features>::all_native_mask","value":"pub const fn all_native_mask() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Mask of all features that are only available when targeting native (not web).\n","sig":null,"attributes":[{"value":"/ Mask of all features that are only available when targeting native (not web).","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":23360,"byte_end":23441,"line_start":566,"line_end":566,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":631},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":25646,"byte_end":25652,"line_start":606,"line_end":606,"column_start":12,"column_end":18},"name":"Limits","qualname":"::Limits","value":"Limits { max_texture_dimension_1d, max_texture_dimension_2d, max_texture_dimension_3d, max_texture_array_layers, max_bind_groups, max_dynamic_uniform_buffers_per_pipeline_layout, max_dynamic_storage_buffers_per_pipeline_layout, max_sampled_textures_per_shader_stage, max_samplers_per_shader_stage, max_storage_buffers_per_shader_stage, max_storage_textures_per_shader_stage, max_uniform_buffers_per_shader_stage, max_uniform_buffer_binding_size, max_storage_buffer_binding_size, max_vertex_buffers, max_vertex_attributes, max_vertex_buffer_array_stride, max_push_constant_size, min_uniform_buffer_offset_alignment, min_storage_buffer_offset_alignment, max_inter_stage_shader_components, max_compute_workgroup_storage_size, max_compute_invocations_per_workgroup, max_compute_workgroup_size_x, max_compute_workgroup_size_y, max_compute_workgroup_size_z, max_compute_workgroups_per_dimension }","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658}],"decl_id":null,"docs":" Represents the sets of limits an adapter/device supports.","sig":null,"attributes":[{"value":"/ Represents the sets of limits an adapter/device supports.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":23552,"byte_end":23613,"line_start":572,"line_end":572,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":23614,"byte_end":23617,"line_start":573,"line_end":573,"column_start":1,"column_end":4}},{"value":"/ We provide three different defaults.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":23618,"byte_end":23658,"line_start":574,"line_end":574,"column_start":1,"column_end":41}},{"value":"/ - [`Limits::downlevel_defaults()`]. This is a set of limits that is guarenteed to work on almost","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":23659,"byte_end":23759,"line_start":575,"line_end":575,"column_start":1,"column_end":101}},{"value":"/   all backends, including \"downlevel\" backends such as OpenGL and D3D11, other than WebGL. For","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":23760,"byte_end":23858,"line_start":576,"line_end":576,"column_start":1,"column_end":99}},{"value":"/   most applications we recommend using these limits, assuming they are high enough for your","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":23859,"byte_end":23954,"line_start":577,"line_end":577,"column_start":1,"column_end":96}},{"value":"/   application, and you do not intent to support WebGL.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":23955,"byte_end":24013,"line_start":578,"line_end":578,"column_start":1,"column_end":59}},{"value":"/ - [`Limits::downlevel_webgl2_defaults()`] This is a set of limits that is lower even than the","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":24014,"byte_end":24111,"line_start":579,"line_end":579,"column_start":1,"column_end":98}},{"value":"/   [`downlevel_defaults()`], configured to be low enough to support running in the browser using","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":24112,"byte_end":24211,"line_start":580,"line_end":580,"column_start":1,"column_end":100}},{"value":"/   WebGL2.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":24212,"byte_end":24225,"line_start":581,"line_end":581,"column_start":1,"column_end":14}},{"value":"/ - [`Limits::default()`]. This is the set of limits that is guarenteed to work on all modern","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":24226,"byte_end":24321,"line_start":582,"line_end":582,"column_start":1,"column_end":96}},{"value":"/   backends and is guarenteed to be supported by WebGPU. Applications needing more modern","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":24322,"byte_end":24414,"line_start":583,"line_end":583,"column_start":1,"column_end":93}},{"value":"/   features can use this as a reasonable set of limits if they are targetting only desktop and","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":24415,"byte_end":24512,"line_start":584,"line_end":584,"column_start":1,"column_end":98}},{"value":"/   modern mobile devices.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":24513,"byte_end":24541,"line_start":585,"line_end":585,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":24542,"byte_end":24545,"line_start":586,"line_end":586,"column_start":1,"column_end":4}},{"value":"/ We recommend starting with the most restrictive limits you can and manually increasing the","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":24546,"byte_end":24640,"line_start":587,"line_end":587,"column_start":1,"column_end":95}},{"value":"/ limits you need boosted. This will let you stay running on all hardware that supports the limits","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":24641,"byte_end":24741,"line_start":588,"line_end":588,"column_start":1,"column_end":101}},{"value":"/ you need.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":24742,"byte_end":24755,"line_start":589,"line_end":589,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":24756,"byte_end":24759,"line_start":590,"line_end":590,"column_start":1,"column_end":4}},{"value":"/ Limits \"better\" than the default must be supported by the adapter and requested when requesting","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":24760,"byte_end":24859,"line_start":591,"line_end":591,"column_start":1,"column_end":100}},{"value":"/ a device. If limits \"better\" than the adapter supports are requested, requesting a device will","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":24860,"byte_end":24958,"line_start":592,"line_end":592,"column_start":1,"column_end":99}},{"value":"/ panic. Once a device is requested, you may only use resources up to the limits requested _even_","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":24959,"byte_end":25058,"line_start":593,"line_end":593,"column_start":1,"column_end":100}},{"value":"/ if the adapter supports \"better\" limits.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":25059,"byte_end":25103,"line_start":594,"line_end":594,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":25104,"byte_end":25107,"line_start":595,"line_end":595,"column_start":1,"column_end":4}},{"value":"/ Requesting limits that are \"better\" than you need may cause performance to decrease because the","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":25108,"byte_end":25207,"line_start":596,"line_end":596,"column_start":1,"column_end":100}},{"value":"/ implementation needs to support more than is needed. You should ideally only request exactly","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":25208,"byte_end":25304,"line_start":597,"line_end":597,"column_start":1,"column_end":97}},{"value":"/ what you need.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":25305,"byte_end":25323,"line_start":598,"line_end":598,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":25324,"byte_end":25327,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ See also: <https://gpuweb.github.io/gpuweb/#dictdef-gpulimits>","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":25328,"byte_end":25394,"line_start":600,"line_end":600,"column_start":1,"column_end":67}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":25395,"byte_end":25405,"line_start":601,"line_end":601,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":632},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":25810,"byte_end":25834,"line_start":609,"line_end":609,"column_start":9,"column_end":33},"name":"max_texture_dimension_1d","qualname":"::Limits::max_texture_dimension_1d","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Maximum allowed value for the `size.width` of a texture created with `TextureDimension::D1`.\n Defaults to 8192. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Maximum allowed value for the `size.width` of a texture created with `TextureDimension::D1`.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":25659,"byte_end":25755,"line_start":607,"line_end":607,"column_start":5,"column_end":101}},{"value":"/ Defaults to 8192. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":25760,"byte_end":25801,"line_start":608,"line_end":608,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":633},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":26014,"byte_end":26038,"line_start":612,"line_end":612,"column_start":9,"column_end":33},"name":"max_texture_dimension_2d","qualname":"::Limits::max_texture_dimension_2d","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Maximum allowed value for the `size.width` and `size.height` of a texture created with `TextureDimension::D2`.\n Defaults to 8192. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Maximum allowed value for the `size.width` and `size.height` of a texture created with `TextureDimension::D2`.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":25845,"byte_end":25959,"line_start":610,"line_end":610,"column_start":5,"column_end":119}},{"value":"/ Defaults to 8192. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":25964,"byte_end":26005,"line_start":611,"line_end":611,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":634},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":26257,"byte_end":26281,"line_start":616,"line_end":616,"column_start":9,"column_end":33},"name":"max_texture_dimension_3d","qualname":"::Limits::max_texture_dimension_3d","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Maximum allowed value for the `size.width`, `size.height`, and `size.depth_or_array_layers`\n of a texture created with `TextureDimension::D3`.\n Defaults to 2048. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Maximum allowed value for the `size.width`, `size.height`, and `size.depth_or_array_layers`","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":26049,"byte_end":26144,"line_start":613,"line_end":613,"column_start":5,"column_end":100}},{"value":"/ of a texture created with `TextureDimension::D3`.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":26149,"byte_end":26202,"line_start":614,"line_end":614,"column_start":5,"column_end":58}},{"value":"/ Defaults to 2048. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":26207,"byte_end":26248,"line_start":615,"line_end":615,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":635},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":26492,"byte_end":26516,"line_start":620,"line_end":620,"column_start":9,"column_end":33},"name":"max_texture_array_layers","qualname":"::Limits::max_texture_array_layers","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Maximum allowed value for the `size.depth_or_array_layers` of a texture created with\n `TextureDimension::D1` or `TextureDimension::D2`.\n Defaults to 256. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Maximum allowed value for the `size.depth_or_array_layers` of a texture created with","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":26292,"byte_end":26380,"line_start":617,"line_end":617,"column_start":5,"column_end":93}},{"value":"/ `TextureDimension::D1` or `TextureDimension::D2`.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":26385,"byte_end":26438,"line_start":618,"line_end":618,"column_start":5,"column_end":58}},{"value":"/ Defaults to 256. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":26443,"byte_end":26483,"line_start":619,"line_end":619,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":636},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":26649,"byte_end":26664,"line_start":622,"line_end":622,"column_start":9,"column_end":24},"name":"max_bind_groups","qualname":"::Limits::max_bind_groups","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Amount of bind groups that can be attached to a pipeline at the same time. Defaults to 4. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Amount of bind groups that can be attached to a pipeline at the same time. Defaults to 4. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":26527,"byte_end":26640,"line_start":621,"line_end":621,"column_start":5,"column_end":118}}]},{"kind":"Field","id":{"krate":0,"index":637},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":26798,"byte_end":26845,"line_start":624,"line_end":624,"column_start":9,"column_end":56},"name":"max_dynamic_uniform_buffers_per_pipeline_layout","qualname":"::Limits::max_dynamic_uniform_buffers_per_pipeline_layout","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Amount of uniform buffer bindings that can be dynamic in a single pipeline. Defaults to 8. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Amount of uniform buffer bindings that can be dynamic in a single pipeline. Defaults to 8. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":26675,"byte_end":26789,"line_start":623,"line_end":623,"column_start":5,"column_end":119}}]},{"kind":"Field","id":{"krate":0,"index":638},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":26979,"byte_end":27026,"line_start":626,"line_end":626,"column_start":9,"column_end":56},"name":"max_dynamic_storage_buffers_per_pipeline_layout","qualname":"::Limits::max_dynamic_storage_buffers_per_pipeline_layout","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Amount of storage buffer bindings that can be dynamic in a single pipeline. Defaults to 4. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Amount of storage buffer bindings that can be dynamic in a single pipeline. Defaults to 4. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":26856,"byte_end":26970,"line_start":625,"line_end":625,"column_start":5,"column_end":119}}]},{"kind":"Field","id":{"krate":0,"index":639},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":27146,"byte_end":27183,"line_start":628,"line_end":628,"column_start":9,"column_end":46},"name":"max_sampled_textures_per_shader_stage","qualname":"::Limits::max_sampled_textures_per_shader_stage","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Amount of sampled textures visible in a single shader stage. Defaults to 16. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Amount of sampled textures visible in a single shader stage. Defaults to 16. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":27037,"byte_end":27137,"line_start":627,"line_end":627,"column_start":5,"column_end":105}}]},{"kind":"Field","id":{"krate":0,"index":640},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":27295,"byte_end":27324,"line_start":630,"line_end":630,"column_start":9,"column_end":38},"name":"max_samplers_per_shader_stage","qualname":"::Limits::max_samplers_per_shader_stage","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Amount of samplers visible in a single shader stage. Defaults to 16. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Amount of samplers visible in a single shader stage. Defaults to 16. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":27194,"byte_end":27286,"line_start":629,"line_end":629,"column_start":5,"column_end":97}}]},{"kind":"Field","id":{"krate":0,"index":641},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":27442,"byte_end":27478,"line_start":632,"line_end":632,"column_start":9,"column_end":45},"name":"max_storage_buffers_per_shader_stage","qualname":"::Limits::max_storage_buffers_per_shader_stage","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Amount of storage buffers visible in a single shader stage. Defaults to 4. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Amount of storage buffers visible in a single shader stage. Defaults to 4. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":27335,"byte_end":27433,"line_start":631,"line_end":631,"column_start":5,"column_end":103}}]},{"kind":"Field","id":{"krate":0,"index":642},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":27597,"byte_end":27634,"line_start":634,"line_end":634,"column_start":9,"column_end":46},"name":"max_storage_textures_per_shader_stage","qualname":"::Limits::max_storage_textures_per_shader_stage","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Amount of storage textures visible in a single shader stage. Defaults to 4. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Amount of storage textures visible in a single shader stage. Defaults to 4. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":27489,"byte_end":27588,"line_start":633,"line_end":633,"column_start":5,"column_end":104}}]},{"kind":"Field","id":{"krate":0,"index":643},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":27753,"byte_end":27789,"line_start":636,"line_end":636,"column_start":9,"column_end":45},"name":"max_uniform_buffers_per_shader_stage","qualname":"::Limits::max_uniform_buffers_per_shader_stage","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Amount of uniform buffers visible in a single shader stage. Defaults to 12. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Amount of uniform buffers visible in a single shader stage. Defaults to 12. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":27645,"byte_end":27744,"line_start":635,"line_end":635,"column_start":5,"column_end":104}}]},{"kind":"Field","id":{"krate":0,"index":644},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":27907,"byte_end":27938,"line_start":638,"line_end":638,"column_start":9,"column_end":40},"name":"max_uniform_buffer_binding_size","qualname":"::Limits::max_uniform_buffer_binding_size","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Maximum size in bytes of a binding to a uniform buffer. Defaults to 64 KB. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Maximum size in bytes of a binding to a uniform buffer. Defaults to 64 KB. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":27800,"byte_end":27898,"line_start":637,"line_end":637,"column_start":5,"column_end":103}}]},{"kind":"Field","id":{"krate":0,"index":645},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28057,"byte_end":28088,"line_start":640,"line_end":640,"column_start":9,"column_end":40},"name":"max_storage_buffer_binding_size","qualname":"::Limits::max_storage_buffer_binding_size","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Maximum size in bytes of a binding to a storage buffer. Defaults to 128 MB. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Maximum size in bytes of a binding to a storage buffer. Defaults to 128 MB. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":27949,"byte_end":28048,"line_start":639,"line_end":639,"column_start":5,"column_end":104}}]},{"kind":"Field","id":{"krate":0,"index":646},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28229,"byte_end":28247,"line_start":643,"line_end":643,"column_start":9,"column_end":27},"name":"max_vertex_buffers","qualname":"::Limits::max_vertex_buffers","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Maximum length of `VertexState::buffers` when creating a `RenderPipeline`.\n Defaults to 8. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Maximum length of `VertexState::buffers` when creating a `RenderPipeline`.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28099,"byte_end":28177,"line_start":641,"line_end":641,"column_start":5,"column_end":83}},{"value":"/ Defaults to 8. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28182,"byte_end":28220,"line_start":642,"line_end":642,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":647},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28448,"byte_end":28469,"line_start":647,"line_end":647,"column_start":9,"column_end":30},"name":"max_vertex_attributes","qualname":"::Limits::max_vertex_attributes","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Maximum length of `VertexBufferLayout::attributes`, summed over all `VertexState::buffers`,\n when creating a `RenderPipeline`.\n Defaults to 16. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Maximum length of `VertexBufferLayout::attributes`, summed over all `VertexState::buffers`,","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28258,"byte_end":28353,"line_start":644,"line_end":644,"column_start":5,"column_end":100}},{"value":"/ when creating a `RenderPipeline`.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28358,"byte_end":28395,"line_start":645,"line_end":645,"column_start":5,"column_end":42}},{"value":"/ Defaults to 16. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28400,"byte_end":28439,"line_start":646,"line_end":646,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":648},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28625,"byte_end":28655,"line_start":650,"line_end":650,"column_start":9,"column_end":39},"name":"max_vertex_buffer_array_stride","qualname":"::Limits::max_vertex_buffer_array_stride","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Maximum value for `VertexBufferLayout::array_stride` when creating a `RenderPipeline`.\n Defaults to 2048. Higher is \"better\".\n","sig":null,"attributes":[{"value":"/ Maximum value for `VertexBufferLayout::array_stride` when creating a `RenderPipeline`.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28480,"byte_end":28570,"line_start":648,"line_end":648,"column_start":5,"column_end":95}},{"value":"/ Defaults to 2048. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28575,"byte_end":28616,"line_start":649,"line_end":649,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":649},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":29153,"byte_end":29175,"line_start":660,"line_end":660,"column_start":9,"column_end":31},"name":"max_push_constant_size","qualname":"::Limits::max_push_constant_size","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Amount of storage available for push constants in bytes. Defaults to 0. Higher is \"better\".\n Requesting more than 0 during device creation requires [`Features::PUSH_CONSTANTS`] to be enabled.","sig":null,"attributes":[{"value":"/ Amount of storage available for push constants in bytes. Defaults to 0. Higher is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28666,"byte_end":28761,"line_start":651,"line_end":651,"column_start":5,"column_end":100}},{"value":"/ Requesting more than 0 during device creation requires [`Features::PUSH_CONSTANTS`] to be enabled.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28766,"byte_end":28868,"line_start":652,"line_end":652,"column_start":5,"column_end":107}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28873,"byte_end":28876,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ Expect the size to be:","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28881,"byte_end":28907,"line_start":654,"line_end":654,"column_start":5,"column_end":31}},{"value":"/ - Vulkan: 128-256 bytes","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28912,"byte_end":28939,"line_start":655,"line_end":655,"column_start":5,"column_end":32}},{"value":"/ - DX12: 256 bytes","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28944,"byte_end":28965,"line_start":656,"line_end":656,"column_start":5,"column_end":26}},{"value":"/ - Metal: 4096 bytes","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28970,"byte_end":28993,"line_start":657,"line_end":657,"column_start":5,"column_end":28}},{"value":"/ - DX11 & OpenGL don't natively support push constants, and are emulated with uniforms,","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":28998,"byte_end":29088,"line_start":658,"line_end":658,"column_start":5,"column_end":95}},{"value":"/   so this number is less useful but likely 256.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":29093,"byte_end":29144,"line_start":659,"line_end":659,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":650},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":29397,"byte_end":29432,"line_start":664,"line_end":664,"column_start":9,"column_end":44},"name":"min_uniform_buffer_offset_alignment","qualname":"::Limits::min_uniform_buffer_offset_alignment","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Required `BufferBindingType::Uniform` alignment for `BufferBinding::offset`\n when creating a `BindGroup`, or for `set_bind_group` `dynamicOffsets`.\n Defaults to 256. Lower is \"better\".\n","sig":null,"attributes":[{"value":"/ Required `BufferBindingType::Uniform` alignment for `BufferBinding::offset`","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":29186,"byte_end":29265,"line_start":661,"line_end":661,"column_start":5,"column_end":84}},{"value":"/ when creating a `BindGroup`, or for `set_bind_group` `dynamicOffsets`.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":29270,"byte_end":29344,"line_start":662,"line_end":662,"column_start":5,"column_end":79}},{"value":"/ Defaults to 256. Lower is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":29349,"byte_end":29388,"line_start":663,"line_end":663,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":651},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":29654,"byte_end":29689,"line_start":668,"line_end":668,"column_start":9,"column_end":44},"name":"min_storage_buffer_offset_alignment","qualname":"::Limits::min_storage_buffer_offset_alignment","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Required `BufferBindingType::Storage` alignment for `BufferBinding::offset`\n when creating a `BindGroup`, or for `set_bind_group` `dynamicOffsets`.\n Defaults to 256. Lower is \"better\".\n","sig":null,"attributes":[{"value":"/ Required `BufferBindingType::Storage` alignment for `BufferBinding::offset`","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":29443,"byte_end":29522,"line_start":665,"line_end":665,"column_start":5,"column_end":84}},{"value":"/ when creating a `BindGroup`, or for `set_bind_group` `dynamicOffsets`.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":29527,"byte_end":29601,"line_start":666,"line_end":666,"column_start":5,"column_end":79}},{"value":"/ Defaults to 256. Lower is \"better\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":29606,"byte_end":29645,"line_start":667,"line_end":667,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":652},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":29863,"byte_end":29896,"line_start":671,"line_end":671,"column_start":9,"column_end":42},"name":"max_inter_stage_shader_components","qualname":"::Limits::max_inter_stage_shader_components","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Maximum allowed number of components (scalars) of input or output locations for\n inter-stage communication (vertex outputs to fragment inputs).\n","sig":null,"attributes":[{"value":"/ Maximum allowed number of components (scalars) of input or output locations for","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":29700,"byte_end":29783,"line_start":669,"line_end":669,"column_start":5,"column_end":88}},{"value":"/ inter-stage communication (vertex outputs to fragment inputs).","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":29788,"byte_end":29854,"line_start":670,"line_end":670,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":653},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":29995,"byte_end":30029,"line_start":673,"line_end":673,"column_start":9,"column_end":43},"name":"max_compute_workgroup_storage_size","qualname":"::Limits::max_compute_workgroup_storage_size","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Maximum number of bytes used for workgroup memory in a compute entry point.\n","sig":null,"attributes":[{"value":"/ Maximum number of bytes used for workgroup memory in a compute entry point.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":29907,"byte_end":29986,"line_start":672,"line_end":672,"column_start":5,"column_end":84}}]},{"kind":"Field","id":{"krate":0,"index":654},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":30143,"byte_end":30180,"line_start":675,"line_end":675,"column_start":9,"column_end":46},"name":"max_compute_invocations_per_workgroup","qualname":"::Limits::max_compute_invocations_per_workgroup","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Maximum value of the product of the `workgroup_size` dimensions for a compute entry-point.\n","sig":null,"attributes":[{"value":"/ Maximum value of the product of the `workgroup_size` dimensions for a compute entry-point.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":30040,"byte_end":30134,"line_start":674,"line_end":674,"column_start":5,"column_end":99}}]},{"kind":"Field","id":{"krate":0,"index":655},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":30328,"byte_end":30356,"line_start":678,"line_end":678,"column_start":9,"column_end":37},"name":"max_compute_workgroup_size_x","qualname":"::Limits::max_compute_workgroup_size_x","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" The maximum value of the workgroup_size X dimension for a compute stage `ShaderModule` entry-point.\n Defaults to 256.\n","sig":null,"attributes":[{"value":"/ The maximum value of the workgroup_size X dimension for a compute stage `ShaderModule` entry-point.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":30191,"byte_end":30294,"line_start":676,"line_end":676,"column_start":5,"column_end":108}},{"value":"/ Defaults to 256.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":30299,"byte_end":30319,"line_start":677,"line_end":677,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":656},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":30504,"byte_end":30532,"line_start":681,"line_end":681,"column_start":9,"column_end":37},"name":"max_compute_workgroup_size_y","qualname":"::Limits::max_compute_workgroup_size_y","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" The maximum value of the workgroup_size Y dimension for a compute stage `ShaderModule` entry-point.\n Defaults to 256.\n","sig":null,"attributes":[{"value":"/ The maximum value of the workgroup_size Y dimension for a compute stage `ShaderModule` entry-point.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":30367,"byte_end":30470,"line_start":679,"line_end":679,"column_start":5,"column_end":108}},{"value":"/ Defaults to 256.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":30475,"byte_end":30495,"line_start":680,"line_end":680,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":657},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":30680,"byte_end":30708,"line_start":684,"line_end":684,"column_start":9,"column_end":37},"name":"max_compute_workgroup_size_z","qualname":"::Limits::max_compute_workgroup_size_z","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" The maximum value of the workgroup_size Z dimension for a compute stage `ShaderModule` entry-point.\n Defaults to 256.\n","sig":null,"attributes":[{"value":"/ The maximum value of the workgroup_size Z dimension for a compute stage `ShaderModule` entry-point.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":30543,"byte_end":30646,"line_start":682,"line_end":682,"column_start":5,"column_end":108}},{"value":"/ Defaults to 256.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":30651,"byte_end":30671,"line_start":683,"line_end":683,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":658},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":30844,"byte_end":30880,"line_start":687,"line_end":687,"column_start":9,"column_end":45},"name":"max_compute_workgroups_per_dimension","qualname":"::Limits::max_compute_workgroups_per_dimension","value":"u32","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" The maximum value for each dimension of a `ComputePass::dispatch(x, y, z)` operation.\n Defaults to 65535.\n","sig":null,"attributes":[{"value":"/ The maximum value for each dimension of a `ComputePass::dispatch(x, y, z)` operation.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":30719,"byte_end":30808,"line_start":685,"line_end":685,"column_start":5,"column_end":94}},{"value":"/ Defaults to 65535.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":30813,"byte_end":30835,"line_start":686,"line_end":686,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":32427,"byte_end":32445,"line_start":726,"line_end":726,"column_start":12,"column_end":30},"name":"downlevel_defaults","qualname":"<Limits>::downlevel_defaults","value":"pub fn downlevel_defaults() -> Self","parent":null,"children":[],"decl_id":null,"docs":" These default limits are guarenteed to be compatible with GLES-3.1, and D3D11\n","sig":null,"attributes":[{"value":"/ These default limits are guarenteed to be compatible with GLES-3.1, and D3D11","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":32334,"byte_end":32415,"line_start":725,"line_end":725,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":33937,"byte_end":33962,"line_start":759,"line_end":759,"column_start":12,"column_end":37},"name":"downlevel_webgl2_defaults","qualname":"<Limits>::downlevel_webgl2_defaults","value":"pub fn downlevel_webgl2_defaults() -> Self","parent":null,"children":[],"decl_id":null,"docs":" These default limits are guarenteed to be compatible with GLES-3.0, and D3D11, and WebGL2\n","sig":null,"attributes":[{"value":"/ These default limits are guarenteed to be compatible with GLES-3.0, and D3D11, and WebGL2","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":33832,"byte_end":33925,"line_start":758,"line_end":758,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":35085,"byte_end":35101,"line_start":784,"line_end":784,"column_start":12,"column_end":28},"name":"using_resolution","qualname":"<Limits>::using_resolution","value":"pub fn using_resolution(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Modify the current limits to use the resolution limits of the other.","sig":null,"attributes":[{"value":"/ Modify the current limits to use the resolution limits of the other.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":34747,"byte_end":34819,"line_start":779,"line_end":779,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":34824,"byte_end":34827,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ This is useful because the swapchain might need to be larger than any other image in the application.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":34832,"byte_end":34937,"line_start":781,"line_end":781,"column_start":5,"column_end":110}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":34942,"byte_end":34945,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ If your application only needs 512x512, you might be running on a 4k display and need extremely high resolution limits.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":34950,"byte_end":35073,"line_start":783,"line_end":783,"column_start":5,"column_end":128}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":35598,"byte_end":35613,"line_start":796,"line_end":796,"column_start":12,"column_end":27},"name":"using_alignment","qualname":"<Limits>::using_alignment","value":"pub fn using_alignment(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Modify the current limits to use the buffer alignment limits of the adapter.","sig":null,"attributes":[{"value":"/ Modify the current limits to use the buffer alignment limits of the adapter.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":35396,"byte_end":35476,"line_start":793,"line_end":793,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":35481,"byte_end":35484,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ This is useful for when you'd like to dynamically use the \"best\" supported buffer alignments.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":35489,"byte_end":35586,"line_start":795,"line_end":795,"column_start":5,"column_end":102}}]},{"kind":"Struct","id":{"krate":0,"index":677},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":36070,"byte_end":36085,"line_start":808,"line_end":808,"column_start":12,"column_end":27},"name":"DownlevelLimits","qualname":"::DownlevelLimits","value":"DownlevelLimits {  }","parent":null,"children":[],"decl_id":null,"docs":" Represents the sets of additional limits on an adapter,\n which take place when running on downlevel backends.\n","sig":null,"attributes":[{"value":"/ Represents the sets of additional limits on an adapter,","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":35880,"byte_end":35939,"line_start":805,"line_end":805,"column_start":1,"column_end":60}},{"value":"/ which take place when running on downlevel backends.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":35940,"byte_end":35996,"line_start":806,"line_end":806,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":695},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":36452,"byte_end":36473,"line_start":820,"line_end":820,"column_start":12,"column_end":33},"name":"DownlevelCapabilities","qualname":"::DownlevelCapabilities","value":"DownlevelCapabilities { flags, limits, shader_model }","parent":null,"children":[{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698}],"decl_id":null,"docs":" Lists various ways the underlying platform does not conform to the WebGPU standard.\n","sig":null,"attributes":[{"value":"/ Lists various ways the underlying platform does not conform to the WebGPU standard.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":36291,"byte_end":36378,"line_start":818,"line_end":818,"column_start":1,"column_end":88}}]},{"kind":"Field","id":{"krate":0,"index":696},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":36516,"byte_end":36521,"line_start":822,"line_end":822,"column_start":9,"column_end":14},"name":"flags","qualname":"::DownlevelCapabilities::flags","value":"DownlevelFlags","parent":{"krate":0,"index":695},"children":[],"decl_id":null,"docs":" Combined boolean flags.\n","sig":null,"attributes":[{"value":"/ Combined boolean flags.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":36480,"byte_end":36507,"line_start":821,"line_end":821,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":697},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":36573,"byte_end":36579,"line_start":824,"line_end":824,"column_start":9,"column_end":15},"name":"limits","qualname":"::DownlevelCapabilities::limits","value":"DownlevelLimits","parent":{"krate":0,"index":695},"children":[],"decl_id":null,"docs":" Additional limits\n","sig":null,"attributes":[{"value":"/ Additional limits","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":36543,"byte_end":36564,"line_start":823,"line_end":823,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":698},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":36702,"byte_end":36714,"line_start":826,"line_end":826,"column_start":9,"column_end":21},"name":"shader_model","qualname":"::DownlevelCapabilities::shader_model","value":"ShaderModel","parent":{"krate":0,"index":695},"children":[],"decl_id":null,"docs":" Which collections of features shaders support. Defined in terms of D3D's shader models.\n","sig":null,"attributes":[{"value":"/ Which collections of features shaders support. Defined in terms of D3D's shader models.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":36602,"byte_end":36693,"line_start":825,"line_end":825,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":37315,"byte_end":37334,"line_start":844,"line_end":844,"column_start":12,"column_end":31},"name":"is_webgpu_compliant","qualname":"<DownlevelCapabilities>::is_webgpu_compliant","value":"pub fn is_webgpu_compliant(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the underlying platform offers complete support of the baseline WebGPU standard.","sig":null,"attributes":[{"value":"/ Returns true if the underlying platform offers complete support of the baseline WebGPU standard.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":37007,"byte_end":37107,"line_start":840,"line_end":840,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":37112,"byte_end":37115,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ If this returns false, some parts of the API will result in validation errors where they would not normally.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":37120,"byte_end":37232,"line_start":842,"line_end":842,"column_start":5,"column_end":117}},{"value":"/ These parts can be determined by the values in this structure.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":37237,"byte_end":37303,"line_start":843,"line_end":843,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":717},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":38136,"byte_end":38150,"line_start":862,"line_end":862,"column_start":16,"column_end":30},"name":"DownlevelFlags","qualname":"::DownlevelFlags","value":"DownlevelFlags {  }","parent":null,"children":[{"krate":0,"index":718}],"decl_id":null,"docs":" Binary flags listing features that may or may not be present on downlevel adapters.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":762},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":38241,"byte_end":38256,"line_start":864,"line_end":864,"column_start":15,"column_end":30},"name":"COMPUTE_SHADERS","qualname":"::DownlevelFlags::COMPUTE_SHADERS","value":"Self","parent":{"krate":0,"index":761},"children":[],"decl_id":null,"docs":" The device supports compiling and using compute shaders.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":763},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":38360,"byte_end":38385,"line_start":866,"line_end":866,"column_start":15,"column_end":40},"name":"FRAGMENT_WRITABLE_STORAGE","qualname":"::DownlevelFlags::FRAGMENT_WRITABLE_STORAGE","value":"Self","parent":{"krate":0,"index":761},"children":[],"decl_id":null,"docs":" Supports binding storage buffers and textures to fragment shaders.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":764},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":38465,"byte_end":38483,"line_start":868,"line_end":868,"column_start":15,"column_end":33},"name":"INDIRECT_EXECUTION","qualname":"::DownlevelFlags::INDIRECT_EXECUTION","value":"Self","parent":{"krate":0,"index":761},"children":[],"decl_id":null,"docs":" Supports indirect drawing and dispatching.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":765},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":38585,"byte_end":38596,"line_start":870,"line_end":870,"column_start":15,"column_end":26},"name":"BASE_VERTEX","qualname":"::DownlevelFlags::BASE_VERTEX","value":"Self","parent":{"krate":0,"index":761},"children":[],"decl_id":null,"docs":" Supports non-zero `base_vertex` parameter to indexed draw calls.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":766},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":38743,"byte_end":38766,"line_start":873,"line_end":873,"column_start":15,"column_end":38},"name":"READ_ONLY_DEPTH_STENCIL","qualname":"::DownlevelFlags::READ_ONLY_DEPTH_STENCIL","value":"Self","parent":{"krate":0,"index":761},"children":[],"decl_id":null,"docs":" Supports reading from a depth/stencil buffer while using as a read-only depth/stencil\n attachment.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":767},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":38943,"byte_end":38968,"line_start":877,"line_end":877,"column_start":15,"column_end":40},"name":"DEVICE_LOCAL_IMAGE_COPIES","qualname":"::DownlevelFlags::DEVICE_LOCAL_IMAGE_COPIES","value":"Self","parent":{"krate":0,"index":761},"children":[],"decl_id":null,"docs":" Supports:\n - copy_image_to_image\n - copy_buffer_to_image and copy_image_to_buffer with a buffer without a MAP_* usage\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":768},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":39072,"byte_end":39107,"line_start":879,"line_end":879,"column_start":15,"column_end":50},"name":"NON_POWER_OF_TWO_MIPMAPPED_TEXTURES","qualname":"::DownlevelFlags::NON_POWER_OF_TWO_MIPMAPPED_TEXTURES","value":"Self","parent":{"krate":0,"index":761},"children":[],"decl_id":null,"docs":" Supports textures with mipmaps which have a non power of two size.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":769},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":39184,"byte_end":39203,"line_start":881,"line_end":881,"column_start":15,"column_end":34},"name":"CUBE_ARRAY_TEXTURES","qualname":"::DownlevelFlags::CUBE_ARRAY_TEXTURES","value":"Self","parent":{"krate":0,"index":761},"children":[],"decl_id":null,"docs":" Supports textures that are cube arrays.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":770},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":39270,"byte_end":39289,"line_start":883,"line_end":883,"column_start":15,"column_end":34},"name":"COMPARISON_SAMPLERS","qualname":"::DownlevelFlags::COMPARISON_SAMPLERS","value":"Self","parent":{"krate":0,"index":761},"children":[],"decl_id":null,"docs":" Supports comparison samplers.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":771},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":39378,"byte_end":39398,"line_start":885,"line_end":885,"column_start":15,"column_end":35},"name":"INDEPENDENT_BLENDING","qualname":"::DownlevelFlags::INDEPENDENT_BLENDING","value":"Self","parent":{"krate":0,"index":761},"children":[],"decl_id":null,"docs":" Supports different blending modes per color target.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":772},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":39479,"byte_end":39493,"line_start":887,"line_end":887,"column_start":15,"column_end":29},"name":"VERTEX_STORAGE","qualname":"::DownlevelFlags::VERTEX_STORAGE","value":"Self","parent":{"krate":0,"index":761},"children":[],"decl_id":null,"docs":" Supports storage buffers in vertex shaders.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":773},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":39806,"byte_end":39827,"line_start":893,"line_end":893,"column_start":15,"column_end":36},"name":"ANISOTROPIC_FILTERING","qualname":"::DownlevelFlags::ANISOTROPIC_FILTERING","value":"Self","parent":{"krate":0,"index":761},"children":[],"decl_id":null,"docs":" Supports samplers with anisotropic filtering. Note this isn't actually required by\n WebGPU, the implementation is allowed to completely ignore aniso clamp. This flag is\n here for native backends so they can comunicate to the user of aniso is enabled.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":774},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":39912,"byte_end":39928,"line_start":896,"line_end":896,"column_start":15,"column_end":31},"name":"FRAGMENT_STORAGE","qualname":"::DownlevelFlags::FRAGMENT_STORAGE","value":"Self","parent":{"krate":0,"index":761},"children":[],"decl_id":null,"docs":" Supports storage buffers in fragment shaders.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":40159,"byte_end":40168,"line_start":905,"line_end":905,"column_start":18,"column_end":27},"name":"compliant","qualname":"<DownlevelFlags>::compliant","value":"pub const fn compliant() -> Self","parent":null,"children":[],"decl_id":null,"docs":" All flags that indicate if the backend is WebGPU compliant\n","sig":null,"attributes":[{"value":"/ All flags that indicate if the backend is WebGPU compliant","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":40079,"byte_end":40141,"line_start":904,"line_end":904,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":865},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":40770,"byte_end":40773,"line_start":918,"line_end":918,"column_start":5,"column_end":8},"name":"Sm2","qualname":"::ShaderModel::Sm2","value":"ShaderModel::Sm2","parent":{"krate":0,"index":864},"children":[],"decl_id":null,"docs":" Extremely limited shaders, including a total instruction limit.\n","sig":null,"attributes":[{"value":"/ Extremely limited shaders, including a total instruction limit.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":40698,"byte_end":40765,"line_start":917,"line_end":917,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":867},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":40830,"byte_end":40833,"line_start":920,"line_end":920,"column_start":5,"column_end":8},"name":"Sm4","qualname":"::ShaderModel::Sm4","value":"ShaderModel::Sm4","parent":{"krate":0,"index":864},"children":[],"decl_id":null,"docs":" Missing minor features and storage images.\n","sig":null,"attributes":[{"value":"/ Missing minor features and storage images.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":40779,"byte_end":40825,"line_start":919,"line_end":919,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":869},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":40880,"byte_end":40883,"line_start":922,"line_end":922,"column_start":5,"column_end":8},"name":"Sm5","qualname":"::ShaderModel::Sm5","value":"ShaderModel::Sm5","parent":{"krate":0,"index":864},"children":[],"decl_id":null,"docs":" WebGPU supports shader module 5.\n","sig":null,"attributes":[{"value":"/ WebGPU supports shader module 5.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":40839,"byte_end":40875,"line_start":921,"line_end":921,"column_start":5,"column_end":41}}]},{"kind":"Enum","id":{"krate":0,"index":864},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":40680,"byte_end":40691,"line_start":916,"line_end":916,"column_start":10,"column_end":21},"name":"ShaderModel","qualname":"::ShaderModel","value":"pub enum ShaderModel { Sm2, Sm4, Sm5, }","parent":null,"children":[{"krate":0,"index":865},{"krate":0,"index":867},{"krate":0,"index":869}],"decl_id":null,"docs":" Collections of shader features a device supports if they support less than WebGPU normally allows.\n","sig":null,"attributes":[{"value":"/ Collections of shader features a device supports if they support less than WebGPU normally allows.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":40428,"byte_end":40530,"line_start":913,"line_end":913,"column_start":1,"column_end":103}}]},{"kind":"TupleVariant","id":{"krate":0,"index":890},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41136,"byte_end":41141,"line_start":932,"line_end":932,"column_start":5,"column_end":10},"name":"Other","qualname":"::DeviceType::Other","value":"DeviceType::Other","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":" Other.\n","sig":null,"attributes":[{"value":"/ Other.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41121,"byte_end":41131,"line_start":931,"line_end":931,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":892},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41198,"byte_end":41211,"line_start":934,"line_end":934,"column_start":5,"column_end":18},"name":"IntegratedGpu","qualname":"::DeviceType::IntegratedGpu","value":"DeviceType::IntegratedGpu","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":" Integrated GPU with shared CPU/GPU memory.\n","sig":null,"attributes":[{"value":"/ Integrated GPU with shared CPU/GPU memory.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41147,"byte_end":41193,"line_start":933,"line_end":933,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":894},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41268,"byte_end":41279,"line_start":936,"line_end":936,"column_start":5,"column_end":16},"name":"DiscreteGpu","qualname":"::DeviceType::DiscreteGpu","value":"DeviceType::DiscreteGpu","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":" Discrete GPU with separate CPU/GPU memory.\n","sig":null,"attributes":[{"value":"/ Discrete GPU with separate CPU/GPU memory.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41217,"byte_end":41263,"line_start":935,"line_end":935,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":896},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41311,"byte_end":41321,"line_start":938,"line_end":938,"column_start":5,"column_end":15},"name":"VirtualGpu","qualname":"::DeviceType::VirtualGpu","value":"DeviceType::VirtualGpu","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":" Virtual / Hosted.\n","sig":null,"attributes":[{"value":"/ Virtual / Hosted.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41285,"byte_end":41306,"line_start":937,"line_end":937,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":898},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41361,"byte_end":41364,"line_start":940,"line_end":940,"column_start":5,"column_end":8},"name":"Cpu","qualname":"::DeviceType::Cpu","value":"DeviceType::Cpu","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":" Cpu / Software Rendering.\n","sig":null,"attributes":[{"value":"/ Cpu / Software Rendering.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41327,"byte_end":41356,"line_start":939,"line_end":939,"column_start":5,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":889},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41104,"byte_end":41114,"line_start":930,"line_end":930,"column_start":10,"column_end":20},"name":"DeviceType","qualname":"::DeviceType","value":"pub enum DeviceType { Other, IntegratedGpu, DiscreteGpu, VirtualGpu, Cpu, }","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":896},{"krate":0,"index":898}],"decl_id":null,"docs":" Supported physical device types.\n","sig":null,"attributes":[{"value":"/ Supported physical device types.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":40888,"byte_end":40924,"line_start":925,"line_end":925,"column_start":1,"column_end":37}},{"value":"repr(u8)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":40925,"byte_end":40936,"line_start":926,"line_end":926,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":908},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41614,"byte_end":41625,"line_start":949,"line_end":949,"column_start":12,"column_end":23},"name":"AdapterInfo","qualname":"::AdapterInfo","value":"AdapterInfo { name, vendor, device, device_type, backend }","parent":null,"children":[{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913}],"decl_id":null,"docs":" Information about an adapter.\n","sig":null,"attributes":[{"value":"/ Information about an adapter.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41417,"byte_end":41450,"line_start":945,"line_end":945,"column_start":1,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":909},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41657,"byte_end":41661,"line_start":951,"line_end":951,"column_start":9,"column_end":13},"name":"name","qualname":"::AdapterInfo::name","value":"std::string::String","parent":{"krate":0,"index":908},"children":[],"decl_id":null,"docs":" Adapter name\n","sig":null,"attributes":[{"value":"/ Adapter name","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41632,"byte_end":41648,"line_start":950,"line_end":950,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":910},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41716,"byte_end":41722,"line_start":953,"line_end":953,"column_start":9,"column_end":15},"name":"vendor","qualname":"::AdapterInfo::vendor","value":"usize","parent":{"krate":0,"index":908},"children":[],"decl_id":null,"docs":" Vendor PCI id of the adapter\n","sig":null,"attributes":[{"value":"/ Vendor PCI id of the adapter","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41675,"byte_end":41707,"line_start":952,"line_end":952,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":911},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41769,"byte_end":41775,"line_start":955,"line_end":955,"column_start":9,"column_end":15},"name":"device","qualname":"::AdapterInfo::device","value":"usize","parent":{"krate":0,"index":908},"children":[],"decl_id":null,"docs":" PCI id of the adapter\n","sig":null,"attributes":[{"value":"/ PCI id of the adapter","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41735,"byte_end":41760,"line_start":954,"line_end":954,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":912},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41815,"byte_end":41826,"line_start":957,"line_end":957,"column_start":9,"column_end":20},"name":"device_type","qualname":"::AdapterInfo::device_type","value":"DeviceType","parent":{"krate":0,"index":908},"children":[],"decl_id":null,"docs":" Type of device\n","sig":null,"attributes":[{"value":"/ Type of device","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41788,"byte_end":41806,"line_start":956,"line_end":956,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":913},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41880,"byte_end":41887,"line_start":959,"line_end":959,"column_start":9,"column_end":16},"name":"backend","qualname":"::AdapterInfo::backend","value":"Backend","parent":{"krate":0,"index":908},"children":[],"decl_id":null,"docs":" Backend used for device\n","sig":null,"attributes":[{"value":"/ Backend used for device","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41844,"byte_end":41871,"line_start":958,"line_end":958,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":922},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":42087,"byte_end":42103,"line_start":967,"line_end":967,"column_start":12,"column_end":28},"name":"DeviceDescriptor","qualname":"::DeviceDescriptor","value":"DeviceDescriptor { label, features, limits }","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926}],"decl_id":null,"docs":" Describes a [`Device`].\n","sig":null,"attributes":[{"value":"/ Describes a [`Device`].","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41901,"byte_end":41928,"line_start":962,"line_end":962,"column_start":1,"column_end":28}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":41929,"byte_end":41939,"line_start":963,"line_end":963,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":924},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":42153,"byte_end":42158,"line_start":969,"line_end":969,"column_start":9,"column_end":14},"name":"label","qualname":"::DeviceDescriptor::label","value":"L","parent":{"krate":0,"index":922},"children":[],"decl_id":null,"docs":" Debug label for the device.\n","sig":null,"attributes":[{"value":"/ Debug label for the device.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":42113,"byte_end":42144,"line_start":968,"line_end":968,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":925},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":42306,"byte_end":42314,"line_start":972,"line_end":972,"column_start":9,"column_end":17},"name":"features","qualname":"::DeviceDescriptor::features","value":"Features","parent":{"krate":0,"index":922},"children":[],"decl_id":null,"docs":" Features that the device should support. If any feature is not supported by\n the adapter, creating a device will panic.\n","sig":null,"attributes":[{"value":"/ Features that the device should support. If any feature is not supported by","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":42167,"byte_end":42246,"line_start":970,"line_end":970,"column_start":5,"column_end":84}},{"value":"/ the adapter, creating a device will panic.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":42251,"byte_end":42297,"line_start":971,"line_end":971,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":926},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":42483,"byte_end":42489,"line_start":975,"line_end":975,"column_start":9,"column_end":15},"name":"limits","qualname":"::DeviceDescriptor::limits","value":"Limits","parent":{"krate":0,"index":922},"children":[],"decl_id":null,"docs":" Limits that the device should support. If any limit is \"better\" than the limit exposed by\n the adapter, creating a device will panic.\n","sig":null,"attributes":[{"value":"/ Limits that the device should support. If any limit is \"better\" than the limit exposed by","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":42330,"byte_end":42423,"line_start":973,"line_end":973,"column_start":5,"column_end":98}},{"value":"/ the adapter, creating a device will panic.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":42428,"byte_end":42474,"line_start":974,"line_end":974,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":42551,"byte_end":42560,"line_start":980,"line_end":980,"column_start":12,"column_end":21},"name":"map_label","qualname":"<DeviceDescriptor<L>>::map_label","value":"pub fn map_label<K, impl FnOnce(&L) -> K: FnOnce(&L) ->\n                 K>(&Self, impl FnOnce(&L) -> K) -> DeviceDescriptor<K>","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":42536,"byte_end":42539,"line_start":979,"line_end":979,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":936},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":43107,"byte_end":43119,"line_start":996,"line_end":996,"column_start":16,"column_end":28},"name":"ShaderStages","qualname":"::ShaderStages","value":"ShaderStages {  }","parent":null,"children":[{"krate":0,"index":937}],"decl_id":null,"docs":" Describes the shader stages that a binding will be visible from.","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs","byte_start":9986302,"byte_end":9986311,"line_start":362,"line_end":362,"column_start":11,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":973},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":43199,"byte_end":43203,"line_start":998,"line_end":998,"column_start":15,"column_end":19},"name":"NONE","qualname":"::ShaderStages::NONE","value":"Self","parent":{"krate":0,"index":972},"children":[],"decl_id":null,"docs":" Binding is not visible from any shader stage.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":974},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":43299,"byte_end":43305,"line_start":1000,"line_end":1000,"column_start":15,"column_end":21},"name":"VERTEX","qualname":"::ShaderStages::VERTEX","value":"Self","parent":{"krate":0,"index":972},"children":[],"decl_id":null,"docs":" Binding is visible from the vertex shader of a render pipeline.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":975},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":43408,"byte_end":43416,"line_start":1002,"line_end":1002,"column_start":15,"column_end":23},"name":"FRAGMENT","qualname":"::ShaderStages::FRAGMENT","value":"Self","parent":{"krate":0,"index":972},"children":[],"decl_id":null,"docs":" Binding is visible from the fragment shader of a render pipeline.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":976},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":43519,"byte_end":43526,"line_start":1004,"line_end":1004,"column_start":15,"column_end":22},"name":"COMPUTE","qualname":"::ShaderStages::COMPUTE","value":"Self","parent":{"krate":0,"index":972},"children":[],"decl_id":null,"docs":" Binding is visible from the compute shader of a compute pipeline.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":977},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":43641,"byte_end":43656,"line_start":1006,"line_end":1006,"column_start":15,"column_end":30},"name":"VERTEX_FRAGMENT","qualname":"::ShaderStages::VERTEX_FRAGMENT","value":"Self","parent":{"krate":0,"index":972},"children":[],"decl_id":null,"docs":" Binding is visible from the vertex and fragment shaders of a render pipeline.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1044},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44178,"byte_end":44180,"line_start":1021,"line_end":1021,"column_start":5,"column_end":7},"name":"D1","qualname":"::TextureViewDimension::D1","value":"TextureViewDimension::D1","parent":{"krate":0,"index":1043},"children":[],"decl_id":null,"docs":" A one dimensional texture. `texture1D` in glsl shaders.\n","sig":null,"attributes":[{"value":"/ A one dimensional texture. `texture1D` in glsl shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44057,"byte_end":44116,"line_start":1019,"line_end":1019,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1046},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44307,"byte_end":44309,"line_start":1024,"line_end":1024,"column_start":5,"column_end":7},"name":"D2","qualname":"::TextureViewDimension::D2","value":"TextureViewDimension::D2","parent":{"krate":0,"index":1043},"children":[],"decl_id":null,"docs":" A two dimensional texture. `texture2D` in glsl shaders.\n","sig":null,"attributes":[{"value":"/ A two dimensional texture. `texture2D` in glsl shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44186,"byte_end":44245,"line_start":1022,"line_end":1022,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1048},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44453,"byte_end":44460,"line_start":1027,"line_end":1027,"column_start":5,"column_end":12},"name":"D2Array","qualname":"::TextureViewDimension::D2Array","value":"TextureViewDimension::D2Array","parent":{"krate":0,"index":1043},"children":[],"decl_id":null,"docs":" A two dimensional array texture. `texture2DArray` in glsl shaders.\n","sig":null,"attributes":[{"value":"/ A two dimensional array texture. `texture2DArray` in glsl shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44315,"byte_end":44385,"line_start":1025,"line_end":1025,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1050},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44583,"byte_end":44587,"line_start":1030,"line_end":1030,"column_start":5,"column_end":9},"name":"Cube","qualname":"::TextureViewDimension::Cube","value":"TextureViewDimension::Cube","parent":{"krate":0,"index":1043},"children":[],"decl_id":null,"docs":" A cubemap texture. `textureCube` in glsl shaders.\n","sig":null,"attributes":[{"value":"/ A cubemap texture. `textureCube` in glsl shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44466,"byte_end":44519,"line_start":1028,"line_end":1028,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1052},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44727,"byte_end":44736,"line_start":1033,"line_end":1033,"column_start":5,"column_end":14},"name":"CubeArray","qualname":"::TextureViewDimension::CubeArray","value":"TextureViewDimension::CubeArray","parent":{"krate":0,"index":1043},"children":[],"decl_id":null,"docs":" A cubemap array texture. `textureCubeArray` in glsl shaders.\n","sig":null,"attributes":[{"value":"/ A cubemap array texture. `textureCubeArray` in glsl shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44593,"byte_end":44657,"line_start":1031,"line_end":1031,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1054},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44865,"byte_end":44867,"line_start":1036,"line_end":1036,"column_start":5,"column_end":7},"name":"D3","qualname":"::TextureViewDimension::D3","value":"TextureViewDimension::D3","parent":{"krate":0,"index":1043},"children":[],"decl_id":null,"docs":" A three dimensional texture. `texture3D` in glsl shaders.\n","sig":null,"attributes":[{"value":"/ A three dimensional texture. `texture3D` in glsl shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44742,"byte_end":44803,"line_start":1034,"line_end":1034,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":1043},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44030,"byte_end":44050,"line_start":1018,"line_end":1018,"column_start":10,"column_end":30},"name":"TextureViewDimension","qualname":"::TextureViewDimension","value":"pub enum TextureViewDimension { D1, D2, D2Array, Cube, CubeArray, D3, }","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1046},{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1052},{"krate":0,"index":1054}],"decl_id":null,"docs":" Dimensions of a particular texture view.\n","sig":null,"attributes":[{"value":"/ Dimensions of a particular texture view.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":43811,"byte_end":43855,"line_start":1013,"line_end":1013,"column_start":1,"column_end":45}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":43856,"byte_end":43866,"line_start":1014,"line_end":1014,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45079,"byte_end":45107,"line_start":1047,"line_end":1047,"column_start":12,"column_end":40},"name":"compatible_texture_dimension","qualname":"<TextureViewDimension>::compatible_texture_dimension","value":"pub fn compatible_texture_dimension(Self) -> TextureDimension","parent":null,"children":[],"decl_id":null,"docs":" Get the texture dimension required of this texture view dimension.\n","sig":null,"attributes":[{"value":"/ Get the texture dimension required of this texture view dimension.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44997,"byte_end":45067,"line_start":1046,"line_end":1046,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1071},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45750,"byte_end":45754,"line_start":1066,"line_end":1066,"column_start":5,"column_end":9},"name":"Zero","qualname":"::BlendFactor::Zero","value":"BlendFactor::Zero","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":" 0.0\n","sig":null,"attributes":[{"value":"/ 0.0","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45738,"byte_end":45745,"line_start":1065,"line_end":1065,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1074},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45776,"byte_end":45779,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8},"name":"One","qualname":"::BlendFactor::One","value":"BlendFactor::One","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":" 1.0\n","sig":null,"attributes":[{"value":"/ 1.0","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45764,"byte_end":45771,"line_start":1067,"line_end":1067,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1077},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45809,"byte_end":45812,"line_start":1070,"line_end":1070,"column_start":5,"column_end":8},"name":"Src","qualname":"::BlendFactor::Src","value":"BlendFactor::Src","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":" S.component\n","sig":null,"attributes":[{"value":"/ S.component","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45789,"byte_end":45804,"line_start":1069,"line_end":1069,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1080},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45848,"byte_end":45859,"line_start":1072,"line_end":1072,"column_start":5,"column_end":16},"name":"OneMinusSrc","qualname":"::BlendFactor::OneMinusSrc","value":"BlendFactor::OneMinusSrc","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":" 1.0 - S.component\n","sig":null,"attributes":[{"value":"/ 1.0 - S.component","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45822,"byte_end":45843,"line_start":1071,"line_end":1071,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1083},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45885,"byte_end":45893,"line_start":1074,"line_end":1074,"column_start":5,"column_end":13},"name":"SrcAlpha","qualname":"::BlendFactor::SrcAlpha","value":"BlendFactor::SrcAlpha","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":" S.alpha\n","sig":null,"attributes":[{"value":"/ S.alpha","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45869,"byte_end":45880,"line_start":1073,"line_end":1073,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1086},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45925,"byte_end":45941,"line_start":1076,"line_end":1076,"column_start":5,"column_end":21},"name":"OneMinusSrcAlpha","qualname":"::BlendFactor::OneMinusSrcAlpha","value":"BlendFactor::OneMinusSrcAlpha","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":" 1.0 - S.alpha\n","sig":null,"attributes":[{"value":"/ 1.0 - S.alpha","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45903,"byte_end":45920,"line_start":1075,"line_end":1075,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1089},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45971,"byte_end":45974,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8},"name":"Dst","qualname":"::BlendFactor::Dst","value":"BlendFactor::Dst","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":" D.component\n","sig":null,"attributes":[{"value":"/ D.component","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45951,"byte_end":45966,"line_start":1077,"line_end":1077,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1092},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46010,"byte_end":46021,"line_start":1080,"line_end":1080,"column_start":5,"column_end":16},"name":"OneMinusDst","qualname":"::BlendFactor::OneMinusDst","value":"BlendFactor::OneMinusDst","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":" 1.0 - D.component\n","sig":null,"attributes":[{"value":"/ 1.0 - D.component","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45984,"byte_end":46005,"line_start":1079,"line_end":1079,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1095},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46047,"byte_end":46055,"line_start":1082,"line_end":1082,"column_start":5,"column_end":13},"name":"DstAlpha","qualname":"::BlendFactor::DstAlpha","value":"BlendFactor::DstAlpha","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":" D.alpha\n","sig":null,"attributes":[{"value":"/ D.alpha","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46031,"byte_end":46042,"line_start":1081,"line_end":1081,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1098},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46087,"byte_end":46103,"line_start":1084,"line_end":1084,"column_start":5,"column_end":21},"name":"OneMinusDstAlpha","qualname":"::BlendFactor::OneMinusDstAlpha","value":"BlendFactor::OneMinusDstAlpha","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":" 1.0 - D.alpha\n","sig":null,"attributes":[{"value":"/ 1.0 - D.alpha","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46065,"byte_end":46082,"line_start":1083,"line_end":1083,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1101},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46149,"byte_end":46166,"line_start":1086,"line_end":1086,"column_start":5,"column_end":22},"name":"SrcAlphaSaturated","qualname":"::BlendFactor::SrcAlphaSaturated","value":"BlendFactor::SrcAlphaSaturated","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":" min(S.alpha, 1.0 - D.alpha)\n","sig":null,"attributes":[{"value":"/ min(S.alpha, 1.0 - D.alpha)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46113,"byte_end":46144,"line_start":1085,"line_end":1085,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1104},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46194,"byte_end":46202,"line_start":1088,"line_end":1088,"column_start":5,"column_end":13},"name":"Constant","qualname":"::BlendFactor::Constant","value":"BlendFactor::Constant","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":" Constant\n","sig":null,"attributes":[{"value":"/ Constant","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46177,"byte_end":46189,"line_start":1087,"line_end":1087,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1107},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46236,"byte_end":46252,"line_start":1090,"line_end":1090,"column_start":5,"column_end":21},"name":"OneMinusConstant","qualname":"::BlendFactor::OneMinusConstant","value":"BlendFactor::OneMinusConstant","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":" 1.0 - Constant\n","sig":null,"attributes":[{"value":"/ 1.0 - Constant","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46213,"byte_end":46231,"line_start":1089,"line_end":1089,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1070},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45720,"byte_end":45731,"line_start":1064,"line_end":1064,"column_start":10,"column_end":21},"name":"BlendFactor","qualname":"::BlendFactor","value":"pub enum BlendFactor {\n    Zero = ,\n    One = ,\n    Src = ,\n    OneMinusSrc = ,\n    SrcAlpha = ,\n    OneMinusSrcAlpha = ,\n    Dst = ,\n    OneMinusDst = ,\n    DstAlpha = ,\n    OneMinusDstAlpha = ,\n    SrcAlphaSaturated = ,\n    Constant = ,\n    OneMinusConstant = ,\n}","parent":null,"children":[{"krate":0,"index":1071},{"krate":0,"index":1074},{"krate":0,"index":1077},{"krate":0,"index":1080},{"krate":0,"index":1083},{"krate":0,"index":1086},{"krate":0,"index":1089},{"krate":0,"index":1092},{"krate":0,"index":1095},{"krate":0,"index":1098},{"krate":0,"index":1101},{"krate":0,"index":1104},{"krate":0,"index":1107}],"decl_id":null,"docs":" Alpha blend factor.","sig":null,"attributes":[{"value":"/ Alpha blend factor.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45361,"byte_end":45384,"line_start":1056,"line_end":1056,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45385,"byte_end":45388,"line_start":1057,"line_end":1057,"column_start":1,"column_end":4}},{"value":"/ Alpha blending is very complicated: see the OpenGL or Vulkan spec for more information.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45389,"byte_end":45480,"line_start":1058,"line_end":1058,"column_start":1,"column_end":92}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":45481,"byte_end":45491,"line_start":1059,"line_end":1059,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1125},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46663,"byte_end":46666,"line_start":1103,"line_end":1103,"column_start":5,"column_end":8},"name":"Add","qualname":"::BlendOperation::Add","value":"BlendOperation::Add","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Src + Dst\n","sig":null,"attributes":[{"value":"/ Src + Dst","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46645,"byte_end":46658,"line_start":1102,"line_end":1102,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1128},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46694,"byte_end":46702,"line_start":1105,"line_end":1105,"column_start":5,"column_end":13},"name":"Subtract","qualname":"::BlendOperation::Subtract","value":"BlendOperation::Subtract","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Src - Dst\n","sig":null,"attributes":[{"value":"/ Src - Dst","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46676,"byte_end":46689,"line_start":1104,"line_end":1104,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1131},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46730,"byte_end":46745,"line_start":1107,"line_end":1107,"column_start":5,"column_end":20},"name":"ReverseSubtract","qualname":"::BlendOperation::ReverseSubtract","value":"BlendOperation::ReverseSubtract","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Dst - Src\n","sig":null,"attributes":[{"value":"/ Dst - Src","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46712,"byte_end":46725,"line_start":1106,"line_end":1106,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1134},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46777,"byte_end":46780,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8},"name":"Min","qualname":"::BlendOperation::Min","value":"BlendOperation::Min","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" min(Src, Dst)\n","sig":null,"attributes":[{"value":"/ min(Src, Dst)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46755,"byte_end":46772,"line_start":1108,"line_end":1108,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1137},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46812,"byte_end":46815,"line_start":1111,"line_end":1111,"column_start":5,"column_end":8},"name":"Max","qualname":"::BlendOperation::Max","value":"BlendOperation::Max","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" max(Src, Dst)\n","sig":null,"attributes":[{"value":"/ max(Src, Dst)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46790,"byte_end":46807,"line_start":1110,"line_end":1110,"column_start":5,"column_end":22}}]},{"kind":"Enum","id":{"krate":0,"index":1124},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46624,"byte_end":46638,"line_start":1101,"line_end":1101,"column_start":10,"column_end":24},"name":"BlendOperation","qualname":"::BlendOperation","value":"pub enum BlendOperation {\n    Add = ,\n    Subtract = ,\n    ReverseSubtract = ,\n    Min = ,\n    Max = ,\n}","parent":null,"children":[{"krate":0,"index":1125},{"krate":0,"index":1128},{"krate":0,"index":1131},{"krate":0,"index":1134},{"krate":0,"index":1137}],"decl_id":null,"docs":" Alpha blend operation.","sig":null,"attributes":[{"value":"/ Alpha blend operation.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46262,"byte_end":46288,"line_start":1093,"line_end":1093,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46289,"byte_end":46292,"line_start":1094,"line_end":1094,"column_start":1,"column_end":4}},{"value":"/ Alpha blending is very complicated: see the OpenGL or Vulkan spec for more information.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46293,"byte_end":46384,"line_start":1095,"line_end":1095,"column_start":1,"column_end":92}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46385,"byte_end":46395,"line_start":1096,"line_end":1096,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1154},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":47201,"byte_end":47215,"line_start":1126,"line_end":1126,"column_start":12,"column_end":26},"name":"BlendComponent","qualname":"::BlendComponent","value":"BlendComponent { src_factor, dst_factor, operation }","parent":null,"children":[{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157}],"decl_id":null,"docs":" Describes the blend component of a pipeline.\n","sig":null,"attributes":[{"value":"/ Describes the blend component of a pipeline.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46912,"byte_end":46960,"line_start":1120,"line_end":1120,"column_start":1,"column_end":49}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46961,"byte_end":46971,"line_start":1121,"line_end":1121,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1155},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":47303,"byte_end":47313,"line_start":1128,"line_end":1128,"column_start":9,"column_end":19},"name":"src_factor","qualname":"::BlendComponent::src_factor","value":"BlendFactor","parent":{"krate":0,"index":1154},"children":[],"decl_id":null,"docs":" Multiplier for the source, which is produced by the fragment shader.\n","sig":null,"attributes":[{"value":"/ Multiplier for the source, which is produced by the fragment shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":47222,"byte_end":47294,"line_start":1127,"line_end":1127,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":1156},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":47407,"byte_end":47417,"line_start":1130,"line_end":1130,"column_start":9,"column_end":19},"name":"dst_factor","qualname":"::BlendComponent::dst_factor","value":"BlendFactor","parent":{"krate":0,"index":1154},"children":[],"decl_id":null,"docs":" Multiplier for the destination, which is stored in the target.\n","sig":null,"attributes":[{"value":"/ Multiplier for the destination, which is stored in the target.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":47332,"byte_end":47398,"line_start":1129,"line_end":1129,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":1157},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":47556,"byte_end":47565,"line_start":1133,"line_end":1133,"column_start":9,"column_end":18},"name":"operation","qualname":"::BlendComponent::operation","value":"BlendOperation","parent":{"krate":0,"index":1154},"children":[],"decl_id":null,"docs":" The binary operation applied to the source and destination,\n multiplied by their respective factors.\n","sig":null,"attributes":[{"value":"/ The binary operation applied to the source and destination,","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":47436,"byte_end":47499,"line_start":1131,"line_end":1131,"column_start":5,"column_end":68}},{"value":"/ multiplied by their respective factors.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":47504,"byte_end":47547,"line_start":1132,"line_end":1132,"column_start":5,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":59},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":47696,"byte_end":47703,"line_start":1138,"line_end":1138,"column_start":15,"column_end":22},"name":"REPLACE","qualname":"::BlendComponent::REPLACE","value":"Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Default blending state that replaces destination with the source.\n","sig":null,"attributes":[{"value":"/ Default blending state that replaces destination with the source.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":47612,"byte_end":47681,"line_start":1137,"line_end":1137,"column_start":5,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":60},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":47917,"byte_end":47921,"line_start":1145,"line_end":1145,"column_start":15,"column_end":19},"name":"OVER","qualname":"::BlendComponent::OVER","value":"Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Blend state of (1 * src) + ((1 - src_alpha) * dst)\n","sig":null,"attributes":[{"value":"/ Blend state of (1 * src) + ((1 - src_alpha) * dst)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":47848,"byte_end":47902,"line_start":1144,"line_end":1144,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":48213,"byte_end":48226,"line_start":1153,"line_end":1153,"column_start":12,"column_end":25},"name":"uses_constant","qualname":"<BlendComponent>::uses_constant","value":"pub fn uses_constant(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the state relies on the constant color, which is\n set independently on a render command encoder.\n","sig":null,"attributes":[{"value":"/ Returns true if the state relies on the constant color, which is","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":48078,"byte_end":48146,"line_start":1151,"line_end":1151,"column_start":5,"column_end":73}},{"value":"/ set independently on a render command encoder.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":48151,"byte_end":48201,"line_start":1152,"line_end":1152,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":1173},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":48973,"byte_end":48983,"line_start":1178,"line_end":1178,"column_start":12,"column_end":22},"name":"BlendState","qualname":"::BlendState","value":"BlendState { color, alpha }","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1175}],"decl_id":null,"docs":" Describe the blend state of a render pipeline.","sig":null,"attributes":[{"value":"/ Describe the blend state of a render pipeline.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":48622,"byte_end":48672,"line_start":1170,"line_end":1170,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":48673,"byte_end":48676,"line_start":1171,"line_end":1171,"column_start":1,"column_end":4}},{"value":"/ See the OpenGL or Vulkan spec for more information.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":48677,"byte_end":48732,"line_start":1172,"line_end":1172,"column_start":1,"column_end":56}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":48733,"byte_end":48743,"line_start":1173,"line_end":1173,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1174},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":49018,"byte_end":49023,"line_start":1180,"line_end":1180,"column_start":9,"column_end":14},"name":"color","qualname":"::BlendState::color","value":"BlendComponent","parent":{"krate":0,"index":1173},"children":[],"decl_id":null,"docs":" Color equation.\n","sig":null,"attributes":[{"value":"/ Color equation.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":48990,"byte_end":49009,"line_start":1179,"line_end":1179,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":1175},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":49073,"byte_end":49078,"line_start":1182,"line_end":1182,"column_start":9,"column_end":14},"name":"alpha","qualname":"::BlendState::alpha","value":"BlendComponent","parent":{"krate":0,"index":1173},"children":[],"decl_id":null,"docs":" Alpha equation.\n","sig":null,"attributes":[{"value":"/ Alpha equation.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":49045,"byte_end":49064,"line_start":1181,"line_end":1181,"column_start":5,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":65},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":49239,"byte_end":49246,"line_start":1187,"line_end":1187,"column_start":15,"column_end":22},"name":"REPLACE","qualname":"::BlendState::REPLACE","value":"Self","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Blend mode that does no color blending, just overwrites the output with the contents of the shader.\n","sig":null,"attributes":[{"value":"/ Blend mode that does no color blending, just overwrites the output with the contents of the shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":49121,"byte_end":49224,"line_start":1186,"line_end":1186,"column_start":5,"column_end":108}}]},{"kind":"Const","id":{"krate":0,"index":66},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":49447,"byte_end":49461,"line_start":1193,"line_end":1193,"column_start":15,"column_end":29},"name":"ALPHA_BLENDING","qualname":"::BlendState::ALPHA_BLENDING","value":"Self","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Blend mode that does standard alpha blending with non-premultiplied alpha.\n","sig":null,"attributes":[{"value":"/ Blend mode that does standard alpha blending with non-premultiplied alpha.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":49354,"byte_end":49432,"line_start":1192,"line_end":1192,"column_start":5,"column_end":83}}]},{"kind":"Const","id":{"krate":0,"index":67},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":49804,"byte_end":49832,"line_start":1203,"line_end":1203,"column_start":15,"column_end":43},"name":"PREMULTIPLIED_ALPHA_BLENDING","qualname":"::BlendState::PREMULTIPLIED_ALPHA_BLENDING","value":"Self","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Blend mode that does standard alpha blending with premultiplied alpha.\n","sig":null,"attributes":[{"value":"/ Blend mode that does standard alpha blending with premultiplied alpha.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":49715,"byte_end":49789,"line_start":1202,"line_end":1202,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1191},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":50218,"byte_end":50234,"line_start":1215,"line_end":1215,"column_start":12,"column_end":28},"name":"ColorTargetState","qualname":"::ColorTargetState","value":"ColorTargetState { format, blend, write_mask }","parent":null,"children":[{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1194}],"decl_id":null,"docs":" Describes the color state of a render pipeline.\n","sig":null,"attributes":[{"value":"/ Describes the color state of a render pipeline.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":49932,"byte_end":49983,"line_start":1209,"line_end":1209,"column_start":1,"column_end":52}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":49984,"byte_end":49994,"line_start":1210,"line_end":1210,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1192},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":50437,"byte_end":50443,"line_start":1218,"line_end":1218,"column_start":9,"column_end":15},"name":"format","qualname":"::ColorTargetState::format","value":"TextureFormat","parent":{"krate":0,"index":1191},"children":[],"decl_id":null,"docs":" The [`TextureFormat`] of the image that this pipeline will render to. Must match the the format\n of the corresponding color attachment in [`CommandEncoder::begin_render_pass`].\n","sig":null,"attributes":[{"value":"/ The [`TextureFormat`] of the image that this pipeline will render to. Must match the the format","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":50241,"byte_end":50340,"line_start":1216,"line_end":1216,"column_start":5,"column_end":104}},{"value":"/ of the corresponding color attachment in [`CommandEncoder::begin_render_pass`].","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":50345,"byte_end":50428,"line_start":1217,"line_end":1217,"column_start":5,"column_end":88}}]},{"kind":"Field","id":{"krate":0,"index":1193},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":50572,"byte_end":50577,"line_start":1221,"line_end":1221,"column_start":9,"column_end":14},"name":"blend","qualname":"::ColorTargetState::blend","value":"std::option::Option<BlendState>","parent":{"krate":0,"index":1191},"children":[],"decl_id":null,"docs":" The blending that is used for this pipeline.\n","sig":null,"attributes":[{"value":"/ The blending that is used for this pipeline.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":50464,"byte_end":50512,"line_start":1219,"line_end":1219,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":1194},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":50735,"byte_end":50745,"line_start":1224,"line_end":1224,"column_start":9,"column_end":19},"name":"write_mask","qualname":"::ColorTargetState::write_mask","value":"ColorWrites","parent":{"krate":0,"index":1191},"children":[],"decl_id":null,"docs":" Mask which enables/disables writes to different color/alpha channel.\n","sig":null,"attributes":[{"value":"/ Mask which enables/disables writes to different color/alpha channel.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":50603,"byte_end":50675,"line_start":1222,"line_end":1222,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1210},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51359,"byte_end":51368,"line_start":1245,"line_end":1245,"column_start":5,"column_end":14},"name":"PointList","qualname":"::PrimitiveTopology::PointList","value":"PrimitiveTopology::PointList","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Vertex data is a list of points. Each vertex is a new point.\n","sig":null,"attributes":[{"value":"/ Vertex data is a list of points. Each vertex is a new point.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51290,"byte_end":51354,"line_start":1244,"line_end":1244,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1213},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51529,"byte_end":51537,"line_start":1249,"line_end":1249,"column_start":5,"column_end":13},"name":"LineList","qualname":"::PrimitiveTopology::LineList","value":"PrimitiveTopology::LineList","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Vertex data is a list of lines. Each pair of vertices composes a new line.","sig":null,"attributes":[{"value":"/ Vertex data is a list of lines. Each pair of vertices composes a new line.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51378,"byte_end":51456,"line_start":1246,"line_end":1246,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51461,"byte_end":51464,"line_start":1247,"line_end":1247,"column_start":5,"column_end":8}},{"value":"/ Vertices `0 1 2 3` create two lines `0 1` and `2 3`","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51469,"byte_end":51524,"line_start":1248,"line_end":1248,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1216},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51714,"byte_end":51723,"line_start":1253,"line_end":1253,"column_start":5,"column_end":14},"name":"LineStrip","qualname":"::PrimitiveTopology::LineStrip","value":"PrimitiveTopology::LineStrip","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Vertex data is a strip of lines. Each set of two adjacent vertices form a line.","sig":null,"attributes":[{"value":"/ Vertex data is a strip of lines. Each set of two adjacent vertices form a line.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51547,"byte_end":51630,"line_start":1250,"line_end":1250,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51635,"byte_end":51638,"line_start":1251,"line_end":1251,"column_start":5,"column_end":8}},{"value":"/ Vertices `0 1 2 3` create three lines `0 1`, `1 2`, and `2 3`.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51643,"byte_end":51709,"line_start":1252,"line_end":1252,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1219},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51905,"byte_end":51917,"line_start":1257,"line_end":1257,"column_start":5,"column_end":17},"name":"TriangleList","qualname":"::PrimitiveTopology::TriangleList","value":"PrimitiveTopology::TriangleList","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Vertex data is a list of triangles. Each set of 3 vertices composes a new triangle.","sig":null,"attributes":[{"value":"/ Vertex data is a list of triangles. Each set of 3 vertices composes a new triangle.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51733,"byte_end":51820,"line_start":1254,"line_end":1254,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51825,"byte_end":51828,"line_start":1255,"line_end":1255,"column_start":5,"column_end":8}},{"value":"/ Vertices `0 1 2 3 4 5` create two triangles `0 1 2` and `3 4 5`","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51833,"byte_end":51900,"line_start":1256,"line_end":1256,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1222},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":52122,"byte_end":52135,"line_start":1261,"line_end":1261,"column_start":5,"column_end":18},"name":"TriangleStrip","qualname":"::PrimitiveTopology::TriangleStrip","value":"PrimitiveTopology::TriangleStrip","parent":{"krate":0,"index":1209},"children":[],"decl_id":null,"docs":" Vertex data is a triangle strip. Each set of three adjacent vertices form a triangle.","sig":null,"attributes":[{"value":"/ Vertex data is a triangle strip. Each set of three adjacent vertices form a triangle.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51927,"byte_end":52016,"line_start":1258,"line_end":1258,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":52021,"byte_end":52024,"line_start":1259,"line_end":1259,"column_start":5,"column_end":8}},{"value":"/ Vertices `0 1 2 3 4 5` creates four triangles `0 1 2`, `2 1 3`, `2 3 4`, and `4 3 5`","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":52029,"byte_end":52117,"line_start":1260,"line_end":1260,"column_start":5,"column_end":93}}]},{"kind":"Enum","id":{"krate":0,"index":1209},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51266,"byte_end":51283,"line_start":1243,"line_end":1243,"column_start":10,"column_end":27},"name":"PrimitiveTopology","qualname":"::PrimitiveTopology","value":"pub enum PrimitiveTopology {\n    PointList = ,\n    LineList = ,\n    LineStrip = ,\n    TriangleList = ,\n    TriangleStrip = ,\n}","parent":null,"children":[{"krate":0,"index":1210},{"krate":0,"index":1213},{"krate":0,"index":1216},{"krate":0,"index":1219},{"krate":0,"index":1222}],"decl_id":null,"docs":" Primitive type the input mesh is composed of.\n","sig":null,"attributes":[{"value":"/ Primitive type the input mesh is composed of.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":50977,"byte_end":51026,"line_start":1237,"line_end":1237,"column_start":1,"column_end":50}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":51027,"byte_end":51037,"line_start":1238,"line_end":1238,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":52336,"byte_end":52344,"line_start":1272,"line_end":1272,"column_start":12,"column_end":20},"name":"is_strip","qualname":"<PrimitiveTopology>::is_strip","value":"pub fn is_strip(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true for strip topologies.\n","sig":null,"attributes":[{"value":"/ Returns true for strip topologies.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":52286,"byte_end":52324,"line_start":1271,"line_end":1271,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1240},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53009,"byte_end":53012,"line_start":1290,"line_end":1290,"column_start":5,"column_end":8},"name":"Ccw","qualname":"::FrontFace::Ccw","value":"FrontFace::Ccw","parent":{"krate":0,"index":1239},"children":[],"decl_id":null,"docs":" Triangles with vertices in counter clockwise order are considered the front face.","sig":null,"attributes":[{"value":"/ Triangles with vertices in counter clockwise order are considered the front face.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":52846,"byte_end":52931,"line_start":1287,"line_end":1287,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":52936,"byte_end":52939,"line_start":1288,"line_end":1288,"column_start":5,"column_end":8}},{"value":"/ This is the default with right handed coordinate spaces.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":52944,"byte_end":53004,"line_start":1289,"line_end":1289,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1243},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53176,"byte_end":53178,"line_start":1294,"line_end":1294,"column_start":5,"column_end":7},"name":"Cw","qualname":"::FrontFace::Cw","value":"FrontFace::Cw","parent":{"krate":0,"index":1239},"children":[],"decl_id":null,"docs":" Triangles with vertices in clockwise order are considered the front face.","sig":null,"attributes":[{"value":"/ Triangles with vertices in clockwise order are considered the front face.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53022,"byte_end":53099,"line_start":1291,"line_end":1291,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53104,"byte_end":53107,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ This is the default with left handed coordinate spaces.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53112,"byte_end":53171,"line_start":1293,"line_end":1293,"column_start":5,"column_end":64}}]},{"kind":"Enum","id":{"krate":0,"index":1239},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":52830,"byte_end":52839,"line_start":1286,"line_end":1286,"column_start":10,"column_end":19},"name":"FrontFace","qualname":"::FrontFace","value":"pub enum FrontFace { Ccw = , Cw = , }","parent":null,"children":[{"krate":0,"index":1240},{"krate":0,"index":1243}],"decl_id":null,"docs":" Winding order which classifies the \"front\" face.\n","sig":null,"attributes":[{"value":"/ Winding order which classifies the \"front\" face.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":52538,"byte_end":52590,"line_start":1280,"line_end":1280,"column_start":1,"column_end":53}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":52591,"byte_end":52601,"line_start":1281,"line_end":1281,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1261},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53561,"byte_end":53566,"line_start":1311,"line_end":1311,"column_start":5,"column_end":10},"name":"Front","qualname":"::Face::Front","value":"Face::Front","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Front face\n","sig":null,"attributes":[{"value":"/ Front face","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53542,"byte_end":53556,"line_start":1310,"line_end":1310,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1264},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53594,"byte_end":53598,"line_start":1313,"line_end":1313,"column_start":5,"column_end":9},"name":"Back","qualname":"::Face::Back","value":"Face::Back","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" Back face\n","sig":null,"attributes":[{"value":"/ Back face","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53576,"byte_end":53589,"line_start":1312,"line_end":1312,"column_start":5,"column_end":18}}]},{"kind":"Enum","id":{"krate":0,"index":1260},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53531,"byte_end":53535,"line_start":1309,"line_end":1309,"column_start":10,"column_end":14},"name":"Face","qualname":"::Face","value":"pub enum Face { Front = , Back = , }","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1264}],"decl_id":null,"docs":" Face of a vertex.\n","sig":null,"attributes":[{"value":"/ Face of a vertex.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53270,"byte_end":53291,"line_start":1303,"line_end":1303,"column_start":1,"column_end":22}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53292,"byte_end":53302,"line_start":1304,"line_end":1304,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1282},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53930,"byte_end":53934,"line_start":1324,"line_end":1324,"column_start":5,"column_end":9},"name":"Fill","qualname":"::PolygonMode::Fill","value":"PolygonMode::Fill","parent":{"krate":0,"index":1281},"children":[],"decl_id":null,"docs":" Polygons are filled\n","sig":null,"attributes":[{"value":"/ Polygons are filled","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53902,"byte_end":53925,"line_start":1323,"line_end":1323,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1285},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53988,"byte_end":53992,"line_start":1326,"line_end":1326,"column_start":5,"column_end":9},"name":"Line","qualname":"::PolygonMode::Line","value":"PolygonMode::Line","parent":{"krate":0,"index":1281},"children":[],"decl_id":null,"docs":" Polygons are drawn as line segments\n","sig":null,"attributes":[{"value":"/ Polygons are drawn as line segments","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53944,"byte_end":53983,"line_start":1325,"line_end":1325,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1288},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":54039,"byte_end":54044,"line_start":1328,"line_end":1328,"column_start":5,"column_end":10},"name":"Point","qualname":"::PolygonMode::Point","value":"PolygonMode::Point","parent":{"krate":0,"index":1281},"children":[],"decl_id":null,"docs":" Polygons are drawn as points\n","sig":null,"attributes":[{"value":"/ Polygons are drawn as points","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":54002,"byte_end":54034,"line_start":1327,"line_end":1327,"column_start":5,"column_end":37}}]},{"kind":"Enum","id":{"krate":0,"index":1281},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53884,"byte_end":53895,"line_start":1322,"line_end":1322,"column_start":10,"column_end":21},"name":"PolygonMode","qualname":"::PolygonMode","value":"pub enum PolygonMode { Fill = , Line = , Point = , }","parent":null,"children":[{"krate":0,"index":1282},{"krate":0,"index":1285},{"krate":0,"index":1288}],"decl_id":null,"docs":" Type of drawing mode for polygons\n","sig":null,"attributes":[{"value":"/ Type of drawing mode for polygons","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53607,"byte_end":53644,"line_start":1316,"line_end":1316,"column_start":1,"column_end":38}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53645,"byte_end":53655,"line_start":1317,"line_end":1317,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1305},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":54474,"byte_end":54488,"line_start":1343,"line_end":1343,"column_start":12,"column_end":26},"name":"PrimitiveState","qualname":"::PrimitiveState","value":"PrimitiveState { topology, strip_index_format, front_face, cull_mode, unclipped_depth, polygon_mode, conservative }","parent":null,"children":[{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1312}],"decl_id":null,"docs":" Describes the state of primitive assembly and rasterization in a render pipeline.\n","sig":null,"attributes":[{"value":"/ Describes the state of primitive assembly and rasterization in a render pipeline.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":54139,"byte_end":54224,"line_start":1337,"line_end":1337,"column_start":1,"column_end":86}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":54225,"byte_end":54235,"line_start":1338,"line_end":1338,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1306},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":54558,"byte_end":54566,"line_start":1345,"line_end":1345,"column_start":9,"column_end":17},"name":"topology","qualname":"::PrimitiveState::topology","value":"PrimitiveTopology","parent":{"krate":0,"index":1305},"children":[],"decl_id":null,"docs":" The primitive topology used to interpret vertices.\n","sig":null,"attributes":[{"value":"/ The primitive topology used to interpret vertices.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":54495,"byte_end":54549,"line_start":1344,"line_end":1344,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":1307},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":54810,"byte_end":54828,"line_start":1349,"line_end":1349,"column_start":9,"column_end":27},"name":"strip_index_format","qualname":"::PrimitiveState::strip_index_format","value":"std::option::Option<IndexFormat>","parent":{"krate":0,"index":1305},"children":[],"decl_id":null,"docs":" When drawing strip topologies with indices, this is the required format for the index buffer.\n This has no effect on non-indexed or non-strip draws.\n","sig":null,"attributes":[{"value":"/ When drawing strip topologies with indices, this is the required format for the index buffer.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":54591,"byte_end":54688,"line_start":1346,"line_end":1346,"column_start":5,"column_end":102}},{"value":"/ This has no effect on non-indexed or non-strip draws.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":54693,"byte_end":54750,"line_start":1347,"line_end":1347,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":1308},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55000,"byte_end":55010,"line_start":1352,"line_end":1352,"column_start":9,"column_end":19},"name":"front_face","qualname":"::PrimitiveState::front_face","value":"FrontFace","parent":{"krate":0,"index":1305},"children":[],"decl_id":null,"docs":" The face to consider the front for the purpose of culling and stencil operations.\n","sig":null,"attributes":[{"value":"/ The face to consider the front for the purpose of culling and stencil operations.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":54855,"byte_end":54940,"line_start":1350,"line_end":1350,"column_start":5,"column_end":90}}]},{"kind":"Field","id":{"krate":0,"index":1309},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55113,"byte_end":55122,"line_start":1355,"line_end":1355,"column_start":9,"column_end":18},"name":"cull_mode","qualname":"::PrimitiveState::cull_mode","value":"std::option::Option<Face>","parent":{"krate":0,"index":1305},"children":[],"decl_id":null,"docs":" The face culling mode.\n","sig":null,"attributes":[{"value":"/ The face culling mode.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55027,"byte_end":55053,"line_start":1353,"line_end":1353,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1310},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55368,"byte_end":55383,"line_start":1360,"line_end":1360,"column_start":9,"column_end":24},"name":"unclipped_depth","qualname":"::PrimitiveState::unclipped_depth","value":"bool","parent":{"krate":0,"index":1305},"children":[],"decl_id":null,"docs":" If set to true, the polygon depth is not clipped to 0-1 before rasterization.","sig":null,"attributes":[{"value":"/ If set to true, the polygon depth is not clipped to 0-1 before rasterization.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55142,"byte_end":55223,"line_start":1356,"line_end":1356,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55228,"byte_end":55231,"line_start":1357,"line_end":1357,"column_start":5,"column_end":8}},{"value":"/ Enabling this requires `Features::DEPTH_CLIP_CONTROL` to be enabled.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55236,"byte_end":55308,"line_start":1358,"line_end":1358,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":1311},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55741,"byte_end":55753,"line_start":1367,"line_end":1367,"column_start":9,"column_end":21},"name":"polygon_mode","qualname":"::PrimitiveState::polygon_mode","value":"PolygonMode","parent":{"krate":0,"index":1305},"children":[],"decl_id":null,"docs":" Controls the way each polygon is rasterized. Can be either `Fill` (default), `Line` or `Point`","sig":null,"attributes":[{"value":"/ Controls the way each polygon is rasterized. Can be either `Fill` (default), `Line` or `Point`","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55395,"byte_end":55493,"line_start":1361,"line_end":1361,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55498,"byte_end":55501,"line_start":1362,"line_end":1362,"column_start":5,"column_end":8}},{"value":"/ Setting this to `Line` requires `Features::POLYGON_MODE_LINE` to be enabled.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55506,"byte_end":55586,"line_start":1363,"line_end":1363,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55591,"byte_end":55594,"line_start":1364,"line_end":1364,"column_start":5,"column_end":8}},{"value":"/ Setting this to `Point` requires `Features::POLYGON_MODE_POINT` to be enabled.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55599,"byte_end":55681,"line_start":1365,"line_end":1365,"column_start":5,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":1312},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":56046,"byte_end":56058,"line_start":1372,"line_end":1372,"column_start":9,"column_end":21},"name":"conservative","qualname":"::PrimitiveState::conservative","value":"bool","parent":{"krate":0,"index":1305},"children":[],"decl_id":null,"docs":" If set to true, the primitives are rendered with conservative overestimation. I.e. any rastered pixel touched by it is filled.\n Only valid for PolygonMode::Fill!","sig":null,"attributes":[{"value":"/ If set to true, the primitives are rendered with conservative overestimation. I.e. any rastered pixel touched by it is filled.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55772,"byte_end":55902,"line_start":1368,"line_end":1368,"column_start":5,"column_end":135}},{"value":"/ Only valid for PolygonMode::Fill!","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55907,"byte_end":55944,"line_start":1369,"line_end":1369,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55949,"byte_end":55952,"line_start":1370,"line_end":1370,"column_start":5,"column_end":8}},{"value":"/ Enabling this requires `Features::CONSERVATIVE_RASTERIZATION` to be enabled.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":55957,"byte_end":56037,"line_start":1371,"line_end":1371,"column_start":5,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":1330},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":56370,"byte_end":56386,"line_start":1381,"line_end":1381,"column_start":12,"column_end":28},"name":"MultisampleState","qualname":"::MultisampleState","value":"MultisampleState { count, mask, alpha_to_coverage_enabled }","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333}],"decl_id":null,"docs":" Describes the multi-sampling state of a render pipeline.\n","sig":null,"attributes":[{"value":"/ Describes the multi-sampling state of a render pipeline.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":56069,"byte_end":56129,"line_start":1375,"line_end":1375,"column_start":1,"column_end":61}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":56130,"byte_end":56140,"line_start":1376,"line_end":1376,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1331},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":56518,"byte_end":56523,"line_start":1384,"line_end":1384,"column_start":9,"column_end":14},"name":"count","qualname":"::MultisampleState::count","value":"u32","parent":{"krate":0,"index":1330},"children":[],"decl_id":null,"docs":" The number of samples calculated per pixel (for MSAA). For non-multisampled textures,\n this should be `1`\n","sig":null,"attributes":[{"value":"/ The number of samples calculated per pixel (for MSAA). For non-multisampled textures,","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":56393,"byte_end":56482,"line_start":1382,"line_end":1382,"column_start":5,"column_end":94}},{"value":"/ this should be `1`","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":56487,"byte_end":56509,"line_start":1383,"line_end":1383,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":1332},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":56675,"byte_end":56679,"line_start":1387,"line_end":1387,"column_start":9,"column_end":13},"name":"mask","qualname":"::MultisampleState::mask","value":"u64","parent":{"krate":0,"index":1330},"children":[],"decl_id":null,"docs":" Bitmask that restricts the samples of a pixel modified by this pipeline. All samples\n can be enabled using the value `!0`\n","sig":null,"attributes":[{"value":"/ Bitmask that restricts the samples of a pixel modified by this pipeline. All samples","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":56534,"byte_end":56622,"line_start":1385,"line_end":1385,"column_start":5,"column_end":93}},{"value":"/ can be enabled using the value `!0`","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":56627,"byte_end":56666,"line_start":1386,"line_end":1386,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1333},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":57067,"byte_end":57092,"line_start":1394,"line_end":1394,"column_start":9,"column_end":34},"name":"alpha_to_coverage_enabled","qualname":"::MultisampleState::alpha_to_coverage_enabled","value":"bool","parent":{"krate":0,"index":1330},"children":[],"decl_id":null,"docs":" When enabled, produces another sample mask per pixel based on the alpha output value, that\n is ANDed with the sample_mask and the primitive coverage to restrict the set of samples\n affected by a primitive.","sig":null,"attributes":[{"value":"/ When enabled, produces another sample mask per pixel based on the alpha output value, that","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":56690,"byte_end":56784,"line_start":1388,"line_end":1388,"column_start":5,"column_end":99}},{"value":"/ is ANDed with the sample_mask and the primitive coverage to restrict the set of samples","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":56789,"byte_end":56880,"line_start":1389,"line_end":1389,"column_start":5,"column_end":96}},{"value":"/ affected by a primitive.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":56885,"byte_end":56913,"line_start":1390,"line_end":1390,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":56918,"byte_end":56921,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/ The implicit mask produced for alpha of zero is guaranteed to be zero, and for alpha of one","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":56926,"byte_end":57021,"line_start":1392,"line_end":1392,"column_start":5,"column_end":100}},{"value":"/ is guaranteed to be all 1-s.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":57026,"byte_end":57058,"line_start":1393,"line_end":1393,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1349},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":57408,"byte_end":57433,"line_start":1410,"line_end":1410,"column_start":16,"column_end":41},"name":"TextureFormatFeatureFlags","qualname":"::TextureFormatFeatureFlags","value":"TextureFormatFeatureFlags {  }","parent":null,"children":[{"krate":0,"index":1350}],"decl_id":null,"docs":" Feature flags for a texture format.\n","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs","byte_start":9986302,"byte_end":9986311,"line_start":362,"line_end":362,"column_start":11,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":1383},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":57636,"byte_end":57654,"line_start":1413,"line_end":1413,"column_start":15,"column_end":33},"name":"STORAGE_READ_WRITE","qualname":"::TextureFormatFeatureFlags::STORAGE_READ_WRITE","value":"Self","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" When used as a STORAGE texture, then a texture with this format can be bound with\n [`StorageTextureAccess::ReadOnly`] or [`StorageTextureAccess::ReadWrite`].\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1384},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":57841,"byte_end":57856,"line_start":1416,"line_end":1416,"column_start":15,"column_end":30},"name":"STORAGE_ATOMICS","qualname":"::TextureFormatFeatureFlags::STORAGE_ATOMICS","value":"Self","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" When used as a STORAGE texture, then a texture with this format can be written to with atomics.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1441},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58227,"byte_end":58248,"line_start":1427,"line_end":1427,"column_start":12,"column_end":33},"name":"TextureFormatFeatures","qualname":"::TextureFormatFeatures","value":"TextureFormatFeatures { allowed_usages, flags, filterable }","parent":null,"children":[{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444}],"decl_id":null,"docs":" Features supported by a given texture format","sig":null,"attributes":[{"value":"/ Features supported by a given texture format","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":57991,"byte_end":58039,"line_start":1423,"line_end":1423,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58040,"byte_end":58043,"line_start":1424,"line_end":1424,"column_start":1,"column_end":4}},{"value":"/ Features are defined by WebGPU specification unless `Features::TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES` is enabled.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58044,"byte_end":58164,"line_start":1425,"line_end":1425,"column_start":1,"column_end":121}}]},{"kind":"Field","id":{"krate":0,"index":1442},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58339,"byte_end":58353,"line_start":1429,"line_end":1429,"column_start":9,"column_end":23},"name":"allowed_usages","qualname":"::TextureFormatFeatures::allowed_usages","value":"TextureUsages","parent":{"krate":0,"index":1441},"children":[],"decl_id":null,"docs":" Valid bits for `TextureDescriptor::Usage` provided for format creation.\n","sig":null,"attributes":[{"value":"/ Valid bits for `TextureDescriptor::Usage` provided for format creation.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58255,"byte_end":58330,"line_start":1428,"line_end":1428,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":1443},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58428,"byte_end":58433,"line_start":1431,"line_end":1431,"column_start":9,"column_end":14},"name":"flags","qualname":"::TextureFormatFeatures::flags","value":"TextureFormatFeatureFlags","parent":{"krate":0,"index":1441},"children":[],"decl_id":null,"docs":" Additional property flags for the format.\n","sig":null,"attributes":[{"value":"/ Additional property flags for the format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58374,"byte_end":58419,"line_start":1430,"line_end":1430,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":1444},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58622,"byte_end":58632,"line_start":1434,"line_end":1434,"column_start":9,"column_end":19},"name":"filterable","qualname":"::TextureFormatFeatures::filterable","value":"bool","parent":{"krate":0,"index":1441},"children":[],"decl_id":null,"docs":" If `filterable` is false, the texture can't be sampled with a filtering sampler.\n This may overwrite TextureSampleType::Float.filterable\n","sig":null,"attributes":[{"value":"/ If `filterable` is false, the texture can't be sampled with a filtering sampler.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58466,"byte_end":58550,"line_start":1432,"line_end":1432,"column_start":5,"column_end":89}},{"value":"/ This may overwrite TextureSampleType::Float.filterable","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58555,"byte_end":58613,"line_start":1433,"line_end":1433,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1460},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58745,"byte_end":58762,"line_start":1439,"line_end":1439,"column_start":12,"column_end":29},"name":"TextureFormatInfo","qualname":"::TextureFormatInfo","value":"TextureFormatInfo { required_features, sample_type, block_dimensions, block_size, components, srgb, guaranteed_format_features }","parent":null,"children":[{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1464},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1467}],"decl_id":null,"docs":" Information about a texture format.\n","sig":null,"attributes":[{"value":"/ Information about a texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58643,"byte_end":58682,"line_start":1437,"line_end":1437,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1461},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58828,"byte_end":58845,"line_start":1441,"line_end":1441,"column_start":9,"column_end":26},"name":"required_features","qualname":"::TextureFormatInfo::required_features","value":"Features","parent":{"krate":0,"index":1460},"children":[],"decl_id":null,"docs":" Features required (if any) to use the texture.\n","sig":null,"attributes":[{"value":"/ Features required (if any) to use the texture.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58769,"byte_end":58819,"line_start":1440,"line_end":1440,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1462},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58921,"byte_end":58932,"line_start":1443,"line_end":1443,"column_start":9,"column_end":20},"name":"sample_type","qualname":"::TextureFormatInfo::sample_type","value":"TextureSampleType","parent":{"krate":0,"index":1460},"children":[],"decl_id":null,"docs":" Type of sampling that is valid for the texture.\n","sig":null,"attributes":[{"value":"/ Type of sampling that is valid for the texture.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58861,"byte_end":58912,"line_start":1442,"line_end":1442,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1463},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":59051,"byte_end":59067,"line_start":1445,"line_end":1445,"column_start":9,"column_end":25},"name":"block_dimensions","qualname":"::TextureFormatInfo::block_dimensions","value":"(u8, u8)","parent":{"krate":0,"index":1460},"children":[],"decl_id":null,"docs":" Dimension of a \"block\" of texels. This is always (1, 1) on uncompressed textures.\n","sig":null,"attributes":[{"value":"/ Dimension of a \"block\" of texels. This is always (1, 1) on uncompressed textures.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":58957,"byte_end":59042,"line_start":1444,"line_end":1444,"column_start":5,"column_end":90}}]},{"kind":"Field","id":{"krate":0,"index":1464},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":59186,"byte_end":59196,"line_start":1447,"line_end":1447,"column_start":9,"column_end":19},"name":"block_size","qualname":"::TextureFormatInfo::block_size","value":"u8","parent":{"krate":0,"index":1460},"children":[],"decl_id":null,"docs":" Size in bytes of a \"block\" of texels. This is the size per pixel on uncompressed textures.\n","sig":null,"attributes":[{"value":"/ Size in bytes of a \"block\" of texels. This is the size per pixel on uncompressed textures.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":59083,"byte_end":59177,"line_start":1446,"line_end":1446,"column_start":5,"column_end":99}}]},{"kind":"Field","id":{"krate":0,"index":1465},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":59332,"byte_end":59342,"line_start":1449,"line_end":1449,"column_start":9,"column_end":19},"name":"components","qualname":"::TextureFormatInfo::components","value":"u8","parent":{"krate":0,"index":1460},"children":[],"decl_id":null,"docs":" Count of components in the texture. This determines which components there will be actual data in the shader for.\n","sig":null,"attributes":[{"value":"/ Count of components in the texture. This determines which components there will be actual data in the shader for.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":59206,"byte_end":59323,"line_start":1448,"line_end":1448,"column_start":5,"column_end":122}}]},{"kind":"Field","id":{"krate":0,"index":1466},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":59463,"byte_end":59467,"line_start":1451,"line_end":1451,"column_start":9,"column_end":13},"name":"srgb","qualname":"::TextureFormatInfo::srgb","value":"bool","parent":{"krate":0,"index":1460},"children":[],"decl_id":null,"docs":" Format will have colors be converted from srgb to linear on read and from linear to srgb on write.\n","sig":null,"attributes":[{"value":"/ Format will have colors be converted from srgb to linear on read and from linear to srgb on write.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":59352,"byte_end":59454,"line_start":1450,"line_end":1450,"column_start":5,"column_end":107}}]},{"kind":"Field","id":{"krate":0,"index":1467},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":59640,"byte_end":59666,"line_start":1453,"line_end":1453,"column_start":9,"column_end":35},"name":"guaranteed_format_features","qualname":"::TextureFormatInfo::guaranteed_format_features","value":"TextureFormatFeatures","parent":{"krate":0,"index":1460},"children":[],"decl_id":null,"docs":" Format features guaranteed by the WebGPU spec. Additional features are available if `Features::TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES` is enabled.\n","sig":null,"attributes":[{"value":"/ Format features guaranteed by the WebGPU spec. Additional features are available if `Features::TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES` is enabled.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":59479,"byte_end":59631,"line_start":1452,"line_end":1452,"column_start":5,"column_end":157}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1484},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":60284,"byte_end":60291,"line_start":1467,"line_end":1467,"column_start":5,"column_end":12},"name":"R8Unorm","qualname":"::TextureFormat::R8Unorm","value":"TextureFormat::R8Unorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red channel only. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":60118,"byte_end":60217,"line_start":1465,"line_end":1465,"column_start":5,"column_end":104}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1486},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":60467,"byte_end":60474,"line_start":1470,"line_end":1470,"column_start":5,"column_end":12},"name":"R8Snorm","qualname":"::TextureFormat::R8Snorm","value":"TextureFormat::R8Snorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red channel only. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":60297,"byte_end":60400,"line_start":1468,"line_end":1468,"column_start":5,"column_end":108}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1488},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":60614,"byte_end":60620,"line_start":1473,"line_end":1473,"column_start":5,"column_end":11},"name":"R8Uint","qualname":"::TextureFormat::R8Uint","value":"TextureFormat::R8Uint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red channel only. 8 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 8 bit integer per channel. Unsigned in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":60480,"byte_end":60548,"line_start":1471,"line_end":1471,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1490},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":60758,"byte_end":60764,"line_start":1476,"line_end":1476,"column_start":5,"column_end":11},"name":"R8Sint","qualname":"::TextureFormat::R8Sint","value":"TextureFormat::R8Sint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red channel only. 8 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 8 bit integer per channel. Signed in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":60626,"byte_end":60692,"line_start":1474,"line_end":1474,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1492},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":60936,"byte_end":60943,"line_start":1481,"line_end":1481,"column_start":5,"column_end":12},"name":"R16Uint","qualname":"::TextureFormat::R16Uint","value":"TextureFormat::R16Uint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red channel only. 16 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 16 bit integer per channel. Unsigned in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":60800,"byte_end":60869,"line_start":1479,"line_end":1479,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1494},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":61083,"byte_end":61090,"line_start":1484,"line_end":1484,"column_start":5,"column_end":12},"name":"R16Sint","qualname":"::TextureFormat::R16Sint","value":"TextureFormat::R16Sint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red channel only. 16 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 16 bit integer per channel. Signed in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":60949,"byte_end":61016,"line_start":1482,"line_end":1482,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1496},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":61366,"byte_end":61374,"line_start":1489,"line_end":1489,"column_start":5,"column_end":13},"name":"R16Unorm","qualname":"::TextureFormat::R16Unorm","value":"TextureFormat::R16Unorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red channel only. 16 bit integer per channel. [0, 65535] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ Red channel only. 16 bit integer per channel. [0, 65535] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":61096,"byte_end":61198,"line_start":1485,"line_end":1485,"column_start":5,"column_end":107}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":61203,"byte_end":61206,"line_start":1486,"line_end":1486,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_FORMAT_16BIT_NORM`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":61211,"byte_end":61298,"line_start":1487,"line_end":1487,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1498},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":61651,"byte_end":61659,"line_start":1494,"line_end":1494,"column_start":5,"column_end":13},"name":"R16Snorm","qualname":"::TextureFormat::R16Snorm","value":"TextureFormat::R16Snorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red channel only. 16 bit integer per channel. [0, 65535] converted to/from float [-1, 1] in shader.","sig":null,"attributes":[{"value":"/ Red channel only. 16 bit integer per channel. [0, 65535] converted to/from float [-1, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":61380,"byte_end":61483,"line_start":1490,"line_end":1490,"column_start":5,"column_end":108}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":61488,"byte_end":61491,"line_start":1491,"line_end":1491,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_FORMAT_16BIT_NORM`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":61496,"byte_end":61583,"line_start":1492,"line_end":1492,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1500},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":61797,"byte_end":61805,"line_start":1497,"line_end":1497,"column_start":5,"column_end":13},"name":"R16Float","qualname":"::TextureFormat::R16Float","value":"TextureFormat::R16Float","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red channel only. 16 bit float per channel. Float in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 16 bit float per channel. Float in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":61665,"byte_end":61729,"line_start":1495,"line_end":1495,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1502},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":61984,"byte_end":61992,"line_start":1500,"line_end":1500,"column_start":5,"column_end":13},"name":"Rg8Unorm","qualname":"::TextureFormat::Rg8Unorm","value":"TextureFormat::Rg8Unorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red and green channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":61811,"byte_end":61916,"line_start":1498,"line_end":1498,"column_start":5,"column_end":110}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1504},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":62175,"byte_end":62183,"line_start":1503,"line_end":1503,"column_start":5,"column_end":13},"name":"Rg8Snorm","qualname":"::TextureFormat::Rg8Snorm","value":"TextureFormat::Rg8Snorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red and green channels. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":61998,"byte_end":62107,"line_start":1501,"line_end":1501,"column_start":5,"column_end":114}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1506},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":62330,"byte_end":62337,"line_start":1506,"line_end":1506,"column_start":5,"column_end":12},"name":"Rg8Uint","qualname":"::TextureFormat::Rg8Uint","value":"TextureFormat::Rg8Uint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red and green channels. 8 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 8 bit integer per channel. Unsigned in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":62189,"byte_end":62263,"line_start":1504,"line_end":1504,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1508},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":62482,"byte_end":62489,"line_start":1509,"line_end":1509,"column_start":5,"column_end":12},"name":"Rg8Sint","qualname":"::TextureFormat::Rg8Sint","value":"TextureFormat::Rg8Sint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red and green channels. 8 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 8 bit integer per channel. Signed in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":62343,"byte_end":62415,"line_start":1507,"line_end":1507,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1510},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":62661,"byte_end":62668,"line_start":1514,"line_end":1514,"column_start":5,"column_end":12},"name":"R32Uint","qualname":"::TextureFormat::R32Uint","value":"TextureFormat::R32Uint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red channel only. 32 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 32 bit integer per channel. Unsigned in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":62525,"byte_end":62594,"line_start":1512,"line_end":1512,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1512},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":62808,"byte_end":62815,"line_start":1517,"line_end":1517,"column_start":5,"column_end":12},"name":"R32Sint","qualname":"::TextureFormat::R32Sint","value":"TextureFormat::R32Sint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red channel only. 32 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 32 bit integer per channel. Signed in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":62674,"byte_end":62741,"line_start":1515,"line_end":1515,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1514},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":62953,"byte_end":62961,"line_start":1520,"line_end":1520,"column_start":5,"column_end":13},"name":"R32Float","qualname":"::TextureFormat::R32Float","value":"TextureFormat::R32Float","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red channel only. 32 bit float per channel. Float in shader.\n","sig":null,"attributes":[{"value":"/ Red channel only. 32 bit float per channel. Float in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":62821,"byte_end":62885,"line_start":1518,"line_end":1518,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1516},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":63110,"byte_end":63118,"line_start":1523,"line_end":1523,"column_start":5,"column_end":13},"name":"Rg16Uint","qualname":"::TextureFormat::Rg16Uint","value":"TextureFormat::Rg16Uint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red and green channels. 16 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 16 bit integer per channel. Unsigned in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":62967,"byte_end":63042,"line_start":1521,"line_end":1521,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1518},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":63265,"byte_end":63273,"line_start":1526,"line_end":1526,"column_start":5,"column_end":13},"name":"Rg16Sint","qualname":"::TextureFormat::Rg16Sint","value":"TextureFormat::Rg16Sint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red and green channels. 16 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 16 bit integer per channel. Signed in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":63124,"byte_end":63197,"line_start":1524,"line_end":1524,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1520},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":63556,"byte_end":63565,"line_start":1531,"line_end":1531,"column_start":5,"column_end":14},"name":"Rg16Unorm","qualname":"::TextureFormat::Rg16Unorm","value":"TextureFormat::Rg16Unorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red and green channels. 16 bit integer per channel. [0, 65535] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ Red and green channels. 16 bit integer per channel. [0, 65535] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":63279,"byte_end":63387,"line_start":1527,"line_end":1527,"column_start":5,"column_end":113}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":63392,"byte_end":63395,"line_start":1528,"line_end":1528,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_FORMAT_16BIT_NORM`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":63400,"byte_end":63487,"line_start":1529,"line_end":1529,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1522},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":63849,"byte_end":63858,"line_start":1536,"line_end":1536,"column_start":5,"column_end":14},"name":"Rg16Snorm","qualname":"::TextureFormat::Rg16Snorm","value":"TextureFormat::Rg16Snorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red and green channels. 16 bit integer per channel. [0, 65535] converted to/from float [-1, 1] in shader.","sig":null,"attributes":[{"value":"/ Red and green channels. 16 bit integer per channel. [0, 65535] converted to/from float [-1, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":63571,"byte_end":63680,"line_start":1532,"line_end":1532,"column_start":5,"column_end":114}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":63685,"byte_end":63688,"line_start":1533,"line_end":1533,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_FORMAT_16BIT_NORM`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":63693,"byte_end":63780,"line_start":1534,"line_end":1534,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1524},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":64003,"byte_end":64012,"line_start":1539,"line_end":1539,"column_start":5,"column_end":14},"name":"Rg16Float","qualname":"::TextureFormat::Rg16Float","value":"TextureFormat::Rg16Float","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red and green channels. 16 bit float per channel. Float in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 16 bit float per channel. Float in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":63864,"byte_end":63934,"line_start":1537,"line_end":1537,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1526},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":64207,"byte_end":64217,"line_start":1542,"line_end":1542,"column_start":5,"column_end":15},"name":"Rgba8Unorm","qualname":"::TextureFormat::Rgba8Unorm","value":"TextureFormat::Rgba8Unorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":64018,"byte_end":64137,"line_start":1540,"line_end":1540,"column_start":5,"column_end":124}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1528},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":64441,"byte_end":64455,"line_start":1545,"line_end":1545,"column_start":5,"column_end":19},"name":"Rgba8UnormSrgb","qualname":"::TextureFormat::Rgba8UnormSrgb","value":"TextureFormat::Rgba8UnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 8 bit integer per channel. Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 8 bit integer per channel. Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":64223,"byte_end":64366,"line_start":1543,"line_end":1543,"column_start":5,"column_end":148}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1530},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":64654,"byte_end":64664,"line_start":1548,"line_end":1548,"column_start":5,"column_end":15},"name":"Rgba8Snorm","qualname":"::TextureFormat::Rgba8Snorm","value":"TextureFormat::Rgba8Snorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 8 bit integer per channel. [-127, 127] converted to/from float [-1, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":64461,"byte_end":64584,"line_start":1546,"line_end":1546,"column_start":5,"column_end":128}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1532},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":64827,"byte_end":64836,"line_start":1551,"line_end":1551,"column_start":5,"column_end":14},"name":"Rgba8Uint","qualname":"::TextureFormat::Rgba8Uint","value":"TextureFormat::Rgba8Uint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 8 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 8 bit integer per channel. Unsigned in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":64670,"byte_end":64758,"line_start":1549,"line_end":1549,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1534},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":64997,"byte_end":65006,"line_start":1554,"line_end":1554,"column_start":5,"column_end":14},"name":"Rgba8Sint","qualname":"::TextureFormat::Rgba8Sint","value":"TextureFormat::Rgba8Sint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 8 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 8 bit integer per channel. Signed in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":64842,"byte_end":64928,"line_start":1552,"line_end":1552,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1536},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":65201,"byte_end":65211,"line_start":1557,"line_end":1557,"column_start":5,"column_end":15},"name":"Bgra8Unorm","qualname":"::TextureFormat::Bgra8Unorm","value":"TextureFormat::Bgra8Unorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Blue, green, red, and alpha channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Blue, green, red, and alpha channels. 8 bit integer per channel. [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":65012,"byte_end":65131,"line_start":1555,"line_end":1555,"column_start":5,"column_end":124}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1538},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":65435,"byte_end":65449,"line_start":1560,"line_end":1560,"column_start":5,"column_end":19},"name":"Bgra8UnormSrgb","qualname":"::TextureFormat::Bgra8UnormSrgb","value":"TextureFormat::Bgra8UnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Blue, green, red, and alpha channels. 8 bit integer per channel. Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Blue, green, red, and alpha channels. 8 bit integer per channel. Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":65217,"byte_end":65360,"line_start":1558,"line_end":1558,"column_start":5,"column_end":148}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1540},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":65735,"byte_end":65747,"line_start":1565,"line_end":1565,"column_start":5,"column_end":17},"name":"Rgb10a2Unorm","qualname":"::TextureFormat::Rgb10a2Unorm","value":"TextureFormat::Rgb10a2Unorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 10 bit integer for RGB channels, 2 bit integer for alpha channel. [0, 1023] ([0, 3] for alpha) converted to/from float [0, 1] in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 10 bit integer for RGB channels, 2 bit integer for alpha channel. [0, 1023] ([0, 3] for alpha) converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":65485,"byte_end":65663,"line_start":1563,"line_end":1563,"column_start":5,"column_end":183}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1542},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":65972,"byte_end":65984,"line_start":1568,"line_end":1568,"column_start":5,"column_end":17},"name":"Rg11b10Float","qualname":"::TextureFormat::Rg11b10Float","value":"TextureFormat::Rg11b10Float","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red, green, and blue channels. 11 bit float with no sign bit for RG channels. 10 bit float with no sign bit for blue channel. Float in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, and blue channels. 11 bit float with no sign bit for RG channels. 10 bit float with no sign bit for blue channel. Float in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":65753,"byte_end":65899,"line_start":1566,"line_end":1566,"column_start":5,"column_end":151}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1544},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":66163,"byte_end":66171,"line_start":1573,"line_end":1573,"column_start":5,"column_end":13},"name":"Rg32Uint","qualname":"::TextureFormat::Rg32Uint","value":"TextureFormat::Rg32Uint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red and green channels. 32 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 32 bit integer per channel. Unsigned in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":66020,"byte_end":66095,"line_start":1571,"line_end":1571,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1546},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":66318,"byte_end":66326,"line_start":1576,"line_end":1576,"column_start":5,"column_end":13},"name":"Rg32Sint","qualname":"::TextureFormat::Rg32Sint","value":"TextureFormat::Rg32Sint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red and green channels. 32 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 32 bit integer per channel. Signed in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":66177,"byte_end":66250,"line_start":1574,"line_end":1574,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1548},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":66471,"byte_end":66480,"line_start":1579,"line_end":1579,"column_start":5,"column_end":14},"name":"Rg32Float","qualname":"::TextureFormat::Rg32Float","value":"TextureFormat::Rg32Float","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red and green channels. 32 bit float per channel. Float in shader.\n","sig":null,"attributes":[{"value":"/ Red and green channels. 32 bit float per channel. Float in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":66332,"byte_end":66402,"line_start":1577,"line_end":1577,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1550},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":66645,"byte_end":66655,"line_start":1582,"line_end":1582,"column_start":5,"column_end":15},"name":"Rgba16Uint","qualname":"::TextureFormat::Rgba16Uint","value":"TextureFormat::Rgba16Uint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 16 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 16 bit integer per channel. Unsigned in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":66486,"byte_end":66575,"line_start":1580,"line_end":1580,"column_start":5,"column_end":94}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1552},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":66818,"byte_end":66828,"line_start":1585,"line_end":1585,"column_start":5,"column_end":15},"name":"Rgba16Sint","qualname":"::TextureFormat::Rgba16Sint","value":"TextureFormat::Rgba16Sint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 16 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 16 bit integer per channel. Signed in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":66661,"byte_end":66748,"line_start":1583,"line_end":1583,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1554},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":67127,"byte_end":67138,"line_start":1590,"line_end":1590,"column_start":5,"column_end":16},"name":"Rgba16Unorm","qualname":"::TextureFormat::Rgba16Unorm","value":"TextureFormat::Rgba16Unorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 16 bit integer per channel. [0, 65535] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 16 bit integer per channel. [0, 65535] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":66834,"byte_end":66956,"line_start":1586,"line_end":1586,"column_start":5,"column_end":127}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":66961,"byte_end":66964,"line_start":1587,"line_end":1587,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_FORMAT_16BIT_NORM`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":66969,"byte_end":67056,"line_start":1588,"line_end":1588,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1556},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":67429,"byte_end":67440,"line_start":1595,"line_end":1595,"column_start":5,"column_end":16},"name":"Rgba16Snorm","qualname":"::TextureFormat::Rgba16Snorm","value":"TextureFormat::Rgba16Snorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha. 16 bit integer per channel. [0, 65535] converted to/from float [-1, 1] in shader.","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha. 16 bit integer per channel. [0, 65535] converted to/from float [-1, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":67144,"byte_end":67258,"line_start":1591,"line_end":1591,"column_start":5,"column_end":119}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":67263,"byte_end":67266,"line_start":1592,"line_end":1592,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_FORMAT_16BIT_NORM`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":67271,"byte_end":67358,"line_start":1593,"line_end":1593,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1558},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":67601,"byte_end":67612,"line_start":1598,"line_end":1598,"column_start":5,"column_end":16},"name":"Rgba16Float","qualname":"::TextureFormat::Rgba16Float","value":"TextureFormat::Rgba16Float","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 16 bit float per channel. Float in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 16 bit float per channel. Float in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":67446,"byte_end":67530,"line_start":1596,"line_end":1596,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1560},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":67808,"byte_end":67818,"line_start":1603,"line_end":1603,"column_start":5,"column_end":15},"name":"Rgba32Uint","qualname":"::TextureFormat::Rgba32Uint","value":"TextureFormat::Rgba32Uint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 32 bit integer per channel. Unsigned in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 32 bit integer per channel. Unsigned in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":67649,"byte_end":67738,"line_start":1601,"line_end":1601,"column_start":5,"column_end":94}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1562},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":67981,"byte_end":67991,"line_start":1606,"line_end":1606,"column_start":5,"column_end":15},"name":"Rgba32Sint","qualname":"::TextureFormat::Rgba32Sint","value":"TextureFormat::Rgba32Sint","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 32 bit integer per channel. Signed in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 32 bit integer per channel. Signed in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":67824,"byte_end":67911,"line_start":1604,"line_end":1604,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1564},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":68152,"byte_end":68163,"line_start":1609,"line_end":1609,"column_start":5,"column_end":16},"name":"Rgba32Float","qualname":"::TextureFormat::Rgba32Float","value":"TextureFormat::Rgba32Float","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Red, green, blue, and alpha channels. 32 bit float per channel. Float in shader.\n","sig":null,"attributes":[{"value":"/ Red, green, blue, and alpha channels. 32 bit float per channel. Float in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":67997,"byte_end":68081,"line_start":1607,"line_end":1607,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1566},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":68333,"byte_end":68345,"line_start":1614,"line_end":1614,"column_start":5,"column_end":17},"name":"Depth32Float","qualname":"::TextureFormat::Depth32Float","value":"TextureFormat::Depth32Float","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Special depth format with 32 bit floating point depth.\n","sig":null,"attributes":[{"value":"/ Special depth format with 32 bit floating point depth.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":68203,"byte_end":68261,"line_start":1612,"line_end":1612,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1568},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":68482,"byte_end":68493,"line_start":1617,"line_end":1617,"column_start":5,"column_end":16},"name":"Depth24Plus","qualname":"::TextureFormat::Depth24Plus","value":"TextureFormat::Depth24Plus","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Special depth format with at least 24 bit integer depth.\n","sig":null,"attributes":[{"value":"/ Special depth format with at least 24 bit integer depth.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":68351,"byte_end":68411,"line_start":1615,"line_end":1615,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1570},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":68674,"byte_end":68693,"line_start":1620,"line_end":1620,"column_start":5,"column_end":24},"name":"Depth24PlusStencil8","qualname":"::TextureFormat::Depth24PlusStencil8","value":"TextureFormat::Depth24PlusStencil8","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Special depth/stencil format with at least 24 bit integer depth and 8 bits integer stencil.\n","sig":null,"attributes":[{"value":"/ Special depth/stencil format with at least 24 bit integer depth and 8 bits integer stencil.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":68499,"byte_end":68594,"line_start":1618,"line_end":1618,"column_start":5,"column_end":100}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1572},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":68914,"byte_end":68926,"line_start":1625,"line_end":1625,"column_start":5,"column_end":17},"name":"Rgb9e5Ufloat","qualname":"::TextureFormat::Rgb9e5Ufloat","value":"TextureFormat::Rgb9e5Ufloat","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Packed unsigned float with 9 bits mantisa for each RGB component, then a common 5 bits exponent\n","sig":null,"attributes":[{"value":"/ Packed unsigned float with 9 bits mantisa for each RGB component, then a common 5 bits exponent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":68743,"byte_end":68842,"line_start":1623,"line_end":1623,"column_start":5,"column_end":104}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1574},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":69420,"byte_end":69432,"line_start":1635,"line_end":1635,"column_start":5,"column_end":17},"name":"Bc1RgbaUnorm","qualname":"::TextureFormat::Bc1RgbaUnorm","value":"TextureFormat::Bc1RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 8 bytes per block (4 bit/px). 4 color + alpha pallet. 5 bit R + 6 bit G + 5 bit B + 1 bit alpha.\n [0, 63] ([0, 1] for alpha) converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 8 bytes per block (4 bit/px). 4 color + alpha pallet. 5 bit R + 6 bit G + 5 bit B + 1 bit alpha.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":69006,"byte_end":69136,"line_start":1628,"line_end":1628,"column_start":5,"column_end":135}},{"value":"/ [0, 63] ([0, 1] for alpha) converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":69141,"byte_end":69213,"line_start":1629,"line_end":1629,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":69218,"byte_end":69221,"line_start":1630,"line_end":1630,"column_start":5,"column_end":8}},{"value":"/ Also known as DXT1.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":69226,"byte_end":69249,"line_start":1631,"line_end":1631,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":69254,"byte_end":69257,"line_start":1632,"line_end":1632,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":69262,"byte_end":69346,"line_start":1633,"line_end":1633,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1576},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":69881,"byte_end":69897,"line_start":1643,"line_end":1643,"column_start":5,"column_end":21},"name":"Bc1RgbaUnormSrgb","qualname":"::TextureFormat::Bc1RgbaUnormSrgb","value":"TextureFormat::Bc1RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 8 bytes per block (4 bit/px). 4 color + alpha pallet. 5 bit R + 6 bit G + 5 bit B + 1 bit alpha.\n Srgb-color [0, 63] ([0, 1] for alpha) converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 8 bytes per block (4 bit/px). 4 color + alpha pallet. 5 bit R + 6 bit G + 5 bit B + 1 bit alpha.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":69438,"byte_end":69568,"line_start":1636,"line_end":1636,"column_start":5,"column_end":135}},{"value":"/ Srgb-color [0, 63] ([0, 1] for alpha) converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":69573,"byte_end":69669,"line_start":1637,"line_end":1637,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":69674,"byte_end":69677,"line_start":1638,"line_end":1638,"column_start":5,"column_end":8}},{"value":"/ Also known as DXT1.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":69682,"byte_end":69705,"line_start":1639,"line_end":1639,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":69710,"byte_end":69713,"line_start":1640,"line_end":1640,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":69718,"byte_end":69802,"line_start":1641,"line_end":1641,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1578},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":70311,"byte_end":70323,"line_start":1651,"line_end":1651,"column_start":5,"column_end":17},"name":"Bc2RgbaUnorm","qualname":"::TextureFormat::Bc2RgbaUnorm","value":"TextureFormat::Bc2RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet. 5 bit R + 6 bit G + 5 bit B + 4 bit alpha.\n [0, 63] ([0, 15] for alpha) converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet. 5 bit R + 6 bit G + 5 bit B + 4 bit alpha.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":69903,"byte_end":70026,"line_start":1644,"line_end":1644,"column_start":5,"column_end":128}},{"value":"/ [0, 63] ([0, 15] for alpha) converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":70031,"byte_end":70104,"line_start":1645,"line_end":1645,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":70109,"byte_end":70112,"line_start":1646,"line_end":1646,"column_start":5,"column_end":8}},{"value":"/ Also known as DXT3.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":70117,"byte_end":70140,"line_start":1647,"line_end":1647,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":70145,"byte_end":70148,"line_start":1648,"line_end":1648,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":70153,"byte_end":70237,"line_start":1649,"line_end":1649,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1580},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":70767,"byte_end":70783,"line_start":1659,"line_end":1659,"column_start":5,"column_end":21},"name":"Bc2RgbaUnormSrgb","qualname":"::TextureFormat::Bc2RgbaUnormSrgb","value":"TextureFormat::Bc2RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet. 5 bit R + 6 bit G + 5 bit B + 4 bit alpha.\n Srgb-color [0, 63] ([0, 255] for alpha) converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet. 5 bit R + 6 bit G + 5 bit B + 4 bit alpha.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":70329,"byte_end":70452,"line_start":1652,"line_end":1652,"column_start":5,"column_end":128}},{"value":"/ Srgb-color [0, 63] ([0, 255] for alpha) converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":70457,"byte_end":70555,"line_start":1653,"line_end":1653,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":70560,"byte_end":70563,"line_start":1654,"line_end":1654,"column_start":5,"column_end":8}},{"value":"/ Also known as DXT3.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":70568,"byte_end":70591,"line_start":1655,"line_end":1655,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":70596,"byte_end":70599,"line_start":1656,"line_end":1656,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":70604,"byte_end":70688,"line_start":1657,"line_end":1657,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1582},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71215,"byte_end":71227,"line_start":1667,"line_end":1667,"column_start":5,"column_end":17},"name":"Bc3RgbaUnorm","qualname":"::TextureFormat::Bc3RgbaUnorm","value":"TextureFormat::Bc3RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet + 8 alpha pallet. 5 bit R + 6 bit G + 5 bit B + 8 bit alpha.\n [0, 63] ([0, 255] for alpha) converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet + 8 alpha pallet. 5 bit R + 6 bit G + 5 bit B + 8 bit alpha.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":70789,"byte_end":70929,"line_start":1660,"line_end":1660,"column_start":5,"column_end":145}},{"value":"/ [0, 63] ([0, 255] for alpha) converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":70934,"byte_end":71008,"line_start":1661,"line_end":1661,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71013,"byte_end":71016,"line_start":1662,"line_end":1662,"column_start":5,"column_end":8}},{"value":"/ Also known as DXT5.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71021,"byte_end":71044,"line_start":1663,"line_end":1663,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71049,"byte_end":71052,"line_start":1664,"line_end":1664,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71057,"byte_end":71141,"line_start":1665,"line_end":1665,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1584},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71688,"byte_end":71704,"line_start":1675,"line_end":1675,"column_start":5,"column_end":21},"name":"Bc3RgbaUnormSrgb","qualname":"::TextureFormat::Bc3RgbaUnormSrgb","value":"TextureFormat::Bc3RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet + 8 alpha pallet. 5 bit R + 6 bit G + 5 bit B + 8 bit alpha.\n Srgb-color [0, 63] ([0, 255] for alpha) converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). 4 color pallet + 8 alpha pallet. 5 bit R + 6 bit G + 5 bit B + 8 bit alpha.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71233,"byte_end":71373,"line_start":1668,"line_end":1668,"column_start":5,"column_end":145}},{"value":"/ Srgb-color [0, 63] ([0, 255] for alpha) converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71378,"byte_end":71476,"line_start":1669,"line_end":1669,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71481,"byte_end":71484,"line_start":1670,"line_end":1670,"column_start":5,"column_end":8}},{"value":"/ Also known as DXT5.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71489,"byte_end":71512,"line_start":1671,"line_end":1671,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71517,"byte_end":71520,"line_start":1672,"line_end":1672,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71525,"byte_end":71609,"line_start":1673,"line_end":1673,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1586},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72062,"byte_end":72071,"line_start":1683,"line_end":1683,"column_start":5,"column_end":14},"name":"Bc4RUnorm","qualname":"::TextureFormat::Bc4RUnorm","value":"TextureFormat::Bc4RUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 8 bytes per block (4 bit/px). 8 color pallet. 8 bit R.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 8 bytes per block (4 bit/px). 8 color pallet. 8 bit R.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71710,"byte_end":71798,"line_start":1676,"line_end":1676,"column_start":5,"column_end":93}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71803,"byte_end":71857,"line_start":1677,"line_end":1677,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71862,"byte_end":71865,"line_start":1678,"line_end":1678,"column_start":5,"column_end":8}},{"value":"/ Also known as RGTC1.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71870,"byte_end":71894,"line_start":1679,"line_end":1679,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71899,"byte_end":71902,"line_start":1680,"line_end":1680,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":71907,"byte_end":71991,"line_start":1681,"line_end":1681,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1588},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72433,"byte_end":72442,"line_start":1691,"line_end":1691,"column_start":5,"column_end":14},"name":"Bc4RSnorm","qualname":"::TextureFormat::Bc4RSnorm","value":"TextureFormat::Bc4RSnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 8 bytes per block (4 bit/px). 8 color pallet. 8 bit R.\n [-127, 127] converted to/from float [-1, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 8 bytes per block (4 bit/px). 8 color pallet. 8 bit R.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72077,"byte_end":72165,"line_start":1684,"line_end":1684,"column_start":5,"column_end":93}},{"value":"/ [-127, 127] converted to/from float [-1, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72170,"byte_end":72228,"line_start":1685,"line_end":1685,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72233,"byte_end":72236,"line_start":1686,"line_end":1686,"column_start":5,"column_end":8}},{"value":"/ Also known as RGTC1.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72241,"byte_end":72265,"line_start":1687,"line_end":1687,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72270,"byte_end":72273,"line_start":1688,"line_end":1688,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72278,"byte_end":72362,"line_start":1689,"line_end":1689,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1590},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72830,"byte_end":72840,"line_start":1699,"line_end":1699,"column_start":5,"column_end":15},"name":"Bc5RgUnorm","qualname":"::TextureFormat::Bc5RgUnorm","value":"TextureFormat::Bc5RgUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). 8 color red pallet + 8 color green pallet. 8 bit RG.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). 8 color red pallet + 8 color green pallet. 8 bit RG.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72448,"byte_end":72565,"line_start":1692,"line_end":1692,"column_start":5,"column_end":122}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72570,"byte_end":72624,"line_start":1693,"line_end":1693,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72629,"byte_end":72632,"line_start":1694,"line_end":1694,"column_start":5,"column_end":8}},{"value":"/ Also known as RGTC2.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72637,"byte_end":72661,"line_start":1695,"line_end":1695,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72666,"byte_end":72669,"line_start":1696,"line_end":1696,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72674,"byte_end":72758,"line_start":1697,"line_end":1697,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1592},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73232,"byte_end":73242,"line_start":1707,"line_end":1707,"column_start":5,"column_end":15},"name":"Bc5RgSnorm","qualname":"::TextureFormat::Bc5RgSnorm","value":"TextureFormat::Bc5RgSnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). 8 color red pallet + 8 color green pallet. 8 bit RG.\n [-127, 127] converted to/from float [-1, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). 8 color red pallet + 8 color green pallet. 8 bit RG.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72846,"byte_end":72963,"line_start":1700,"line_end":1700,"column_start":5,"column_end":122}},{"value":"/ [-127, 127] converted to/from float [-1, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":72968,"byte_end":73026,"line_start":1701,"line_end":1701,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73031,"byte_end":73034,"line_start":1702,"line_end":1702,"column_start":5,"column_end":8}},{"value":"/ Also known as RGTC2.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73039,"byte_end":73063,"line_start":1703,"line_end":1703,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73068,"byte_end":73071,"line_start":1704,"line_end":1704,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73076,"byte_end":73160,"line_start":1705,"line_end":1705,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1594},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73595,"byte_end":73608,"line_start":1714,"line_end":1714,"column_start":5,"column_end":18},"name":"Bc6hRgbUfloat","qualname":"::TextureFormat::Bc6hRgbUfloat","value":"TextureFormat::Bc6hRgbUfloat","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). Variable sized pallet. 16 bit unsigned float RGB. Float in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). Variable sized pallet. 16 bit unsigned float RGB. Float in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73248,"byte_end":73379,"line_start":1708,"line_end":1708,"column_start":5,"column_end":136}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73384,"byte_end":73387,"line_start":1709,"line_end":1709,"column_start":5,"column_end":8}},{"value":"/ Also known as BPTC (float).","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73392,"byte_end":73423,"line_start":1710,"line_end":1710,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73428,"byte_end":73431,"line_start":1711,"line_end":1711,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73436,"byte_end":73520,"line_start":1712,"line_end":1712,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1596},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73958,"byte_end":73971,"line_start":1721,"line_end":1721,"column_start":5,"column_end":18},"name":"Bc6hRgbSfloat","qualname":"::TextureFormat::Bc6hRgbSfloat","value":"TextureFormat::Bc6hRgbSfloat","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). Variable sized pallet. 16 bit signed float RGB. Float in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). Variable sized pallet. 16 bit signed float RGB. Float in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73614,"byte_end":73743,"line_start":1715,"line_end":1715,"column_start":5,"column_end":134}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73748,"byte_end":73751,"line_start":1716,"line_end":1716,"column_start":5,"column_end":8}},{"value":"/ Also known as BPTC (float).","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73756,"byte_end":73787,"line_start":1717,"line_end":1717,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73792,"byte_end":73795,"line_start":1718,"line_end":1718,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73800,"byte_end":73884,"line_start":1719,"line_end":1719,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1598},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74358,"byte_end":74370,"line_start":1729,"line_end":1729,"column_start":5,"column_end":17},"name":"Bc7RgbaUnorm","qualname":"::TextureFormat::Bc7RgbaUnorm","value":"TextureFormat::Bc7RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). Variable sized pallet. 8 bit integer RGBA.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). Variable sized pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":73977,"byte_end":74084,"line_start":1722,"line_end":1722,"column_start":5,"column_end":112}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74089,"byte_end":74143,"line_start":1723,"line_end":1723,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74148,"byte_end":74151,"line_start":1724,"line_end":1724,"column_start":5,"column_end":8}},{"value":"/ Also known as BPTC (unorm).","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74156,"byte_end":74187,"line_start":1725,"line_end":1725,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74192,"byte_end":74195,"line_start":1726,"line_end":1726,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74200,"byte_end":74284,"line_start":1727,"line_end":1727,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1600},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74786,"byte_end":74802,"line_start":1737,"line_end":1737,"column_start":5,"column_end":21},"name":"Bc7RgbaUnormSrgb","qualname":"::TextureFormat::Bc7RgbaUnormSrgb","value":"TextureFormat::Bc7RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). Variable sized pallet. 8 bit integer RGBA.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). Variable sized pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74376,"byte_end":74483,"line_start":1730,"line_end":1730,"column_start":5,"column_end":112}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74488,"byte_end":74566,"line_start":1731,"line_end":1731,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74571,"byte_end":74574,"line_start":1732,"line_end":1732,"column_start":5,"column_end":8}},{"value":"/ Also known as BPTC (unorm).","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74579,"byte_end":74610,"line_start":1733,"line_end":1733,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74615,"byte_end":74618,"line_start":1734,"line_end":1734,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_BC`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74623,"byte_end":74707,"line_start":1735,"line_end":1735,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1602},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":75138,"byte_end":75151,"line_start":1743,"line_end":1743,"column_start":5,"column_end":18},"name":"Etc2Rgb8Unorm","qualname":"::TextureFormat::Etc2Rgb8Unorm","value":"TextureFormat::Etc2Rgb8Unorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 8 bit integer RGB.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 8 bit integer RGB.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74808,"byte_end":74906,"line_start":1738,"line_end":1738,"column_start":5,"column_end":103}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74911,"byte_end":74965,"line_start":1739,"line_end":1739,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74970,"byte_end":74973,"line_start":1740,"line_end":1740,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ETC2`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":74978,"byte_end":75064,"line_start":1741,"line_end":1741,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1604},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":75516,"byte_end":75533,"line_start":1749,"line_end":1749,"column_start":5,"column_end":22},"name":"Etc2Rgb8UnormSrgb","qualname":"::TextureFormat::Etc2Rgb8UnormSrgb","value":"TextureFormat::Etc2Rgb8UnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 8 bit integer RGB.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 8 bit integer RGB.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":75157,"byte_end":75255,"line_start":1744,"line_end":1744,"column_start":5,"column_end":103}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":75260,"byte_end":75338,"line_start":1745,"line_end":1745,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":75343,"byte_end":75346,"line_start":1746,"line_end":1746,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ETC2`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":75351,"byte_end":75437,"line_start":1747,"line_end":1747,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1606},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":75904,"byte_end":75919,"line_start":1755,"line_end":1755,"column_start":5,"column_end":20},"name":"Etc2Rgb8A1Unorm","qualname":"::TextureFormat::Etc2Rgb8A1Unorm","value":"TextureFormat::Etc2Rgb8A1Unorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 8 bit integer RGB + 1 bit alpha.\n [0, 255] ([0, 1] for alpha) converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 8 bit integer RGB + 1 bit alpha.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":75539,"byte_end":75651,"line_start":1750,"line_end":1750,"column_start":5,"column_end":117}},{"value":"/ [0, 255] ([0, 1] for alpha) converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":75656,"byte_end":75729,"line_start":1751,"line_end":1751,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":75734,"byte_end":75737,"line_start":1752,"line_end":1752,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ETC2`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":75742,"byte_end":75828,"line_start":1753,"line_end":1753,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1608},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":76319,"byte_end":76338,"line_start":1761,"line_end":1761,"column_start":5,"column_end":24},"name":"Etc2Rgb8A1UnormSrgb","qualname":"::TextureFormat::Etc2Rgb8A1UnormSrgb","value":"TextureFormat::Etc2Rgb8A1UnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 8 bit integer RGB + 1 bit alpha.\n Srgb-color [0, 255] ([0, 1] for alpha) converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 8 bit integer RGB + 1 bit alpha.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":75925,"byte_end":76037,"line_start":1756,"line_end":1756,"column_start":5,"column_end":117}},{"value":"/ Srgb-color [0, 255] ([0, 1] for alpha) converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":76042,"byte_end":76139,"line_start":1757,"line_end":1757,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":76144,"byte_end":76147,"line_start":1758,"line_end":1758,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ETC2`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":76152,"byte_end":76238,"line_start":1759,"line_end":1759,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1610},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":76690,"byte_end":76704,"line_start":1767,"line_end":1767,"column_start":5,"column_end":19},"name":"Etc2Rgba8Unorm","qualname":"::TextureFormat::Etc2Rgba8Unorm","value":"TextureFormat::Etc2Rgba8Unorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 8 bit integer RGB + 8 bit alpha.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 8 bit integer RGB + 8 bit alpha.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":76344,"byte_end":76457,"line_start":1762,"line_end":1762,"column_start":5,"column_end":118}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":76462,"byte_end":76516,"line_start":1763,"line_end":1763,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":76521,"byte_end":76524,"line_start":1764,"line_end":1764,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ETC2`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":76529,"byte_end":76615,"line_start":1765,"line_end":1765,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1612},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":77085,"byte_end":77103,"line_start":1773,"line_end":1773,"column_start":5,"column_end":23},"name":"Etc2Rgba8UnormSrgb","qualname":"::TextureFormat::Etc2Rgba8UnormSrgb","value":"TextureFormat::Etc2Rgba8UnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 8 bit integer RGB + 8 bit alpha.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 8 bit integer RGB + 8 bit alpha.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":76710,"byte_end":76823,"line_start":1768,"line_end":1768,"column_start":5,"column_end":118}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":76828,"byte_end":76906,"line_start":1769,"line_end":1769,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":76911,"byte_end":76914,"line_start":1770,"line_end":1770,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ETC2`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":76919,"byte_end":77005,"line_start":1771,"line_end":1771,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1614},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":77436,"byte_end":77447,"line_start":1779,"line_end":1779,"column_start":5,"column_end":16},"name":"EacR11Unorm","qualname":"::TextureFormat::EacR11Unorm","value":"TextureFormat::EacR11Unorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 11 bit integer R.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 11 bit integer R.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":77109,"byte_end":77206,"line_start":1774,"line_end":1774,"column_start":5,"column_end":102}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":77211,"byte_end":77265,"line_start":1775,"line_end":1775,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":77270,"byte_end":77273,"line_start":1776,"line_end":1776,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ETC2`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":77278,"byte_end":77364,"line_start":1777,"line_end":1777,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1616},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":77784,"byte_end":77795,"line_start":1785,"line_end":1785,"column_start":5,"column_end":16},"name":"EacR11Snorm","qualname":"::TextureFormat::EacR11Snorm","value":"TextureFormat::EacR11Snorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 11 bit integer R.\n [-127, 127] converted to/from float [-1, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 8 bytes per block (4 bit/px). Complex pallet. 11 bit integer R.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":77453,"byte_end":77550,"line_start":1780,"line_end":1780,"column_start":5,"column_end":102}},{"value":"/ [-127, 127] converted to/from float [-1, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":77555,"byte_end":77613,"line_start":1781,"line_end":1781,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":77618,"byte_end":77621,"line_start":1782,"line_end":1782,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ETC2`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":77626,"byte_end":77712,"line_start":1783,"line_end":1783,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1618},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":78149,"byte_end":78161,"line_start":1791,"line_end":1791,"column_start":5,"column_end":17},"name":"EacRg11Unorm","qualname":"::TextureFormat::EacRg11Unorm","value":"TextureFormat::EacRg11Unorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 11 bit integer R + 11 bit integer G.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 11 bit integer R + 11 bit integer G.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":77801,"byte_end":77918,"line_start":1786,"line_end":1786,"column_start":5,"column_end":122}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":77923,"byte_end":77977,"line_start":1787,"line_end":1787,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":77982,"byte_end":77985,"line_start":1788,"line_end":1788,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ETC2`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":77990,"byte_end":78076,"line_start":1789,"line_end":1789,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1620},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":78519,"byte_end":78531,"line_start":1797,"line_end":1797,"column_start":5,"column_end":17},"name":"EacRg11Snorm","qualname":"::TextureFormat::EacRg11Snorm","value":"TextureFormat::EacRg11Snorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 11 bit integer R + 11 bit integer G.\n [-127, 127] converted to/from float [-1, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 11 bit integer R + 11 bit integer G.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":78167,"byte_end":78284,"line_start":1792,"line_end":1792,"column_start":5,"column_end":122}},{"value":"/ [-127, 127] converted to/from float [-1, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":78289,"byte_end":78347,"line_start":1793,"line_end":1793,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":78352,"byte_end":78355,"line_start":1794,"line_end":1794,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ETC2`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":78360,"byte_end":78446,"line_start":1795,"line_end":1795,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1622},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":78873,"byte_end":78889,"line_start":1803,"line_end":1803,"column_start":5,"column_end":21},"name":"Astc4x4RgbaUnorm","qualname":"::TextureFormat::Astc4x4RgbaUnorm","value":"TextureFormat::Astc4x4RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 8 bit integer RGBA.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":78537,"byte_end":78637,"line_start":1798,"line_end":1798,"column_start":5,"column_end":105}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":78642,"byte_end":78696,"line_start":1799,"line_end":1799,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":78701,"byte_end":78704,"line_start":1800,"line_end":1800,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":78709,"byte_end":78799,"line_start":1801,"line_end":1801,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1624},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":79260,"byte_end":79280,"line_start":1809,"line_end":1809,"column_start":5,"column_end":25},"name":"Astc4x4RgbaUnormSrgb","qualname":"::TextureFormat::Astc4x4RgbaUnormSrgb","value":"TextureFormat::Astc4x4RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 8 bit integer RGBA.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 4x4 block compressed texture. 16 bytes per block (8 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":78895,"byte_end":78995,"line_start":1804,"line_end":1804,"column_start":5,"column_end":105}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":79000,"byte_end":79078,"line_start":1805,"line_end":1805,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":79083,"byte_end":79086,"line_start":1806,"line_end":1806,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":79091,"byte_end":79181,"line_start":1807,"line_end":1807,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1626},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":79624,"byte_end":79640,"line_start":1815,"line_end":1815,"column_start":5,"column_end":21},"name":"Astc5x4RgbaUnorm","qualname":"::TextureFormat::Astc5x4RgbaUnorm","value":"TextureFormat::Astc5x4RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 5x4 block compressed texture. 16 bytes per block (6.4 bit/px). Complex pallet. 8 bit integer RGBA.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 5x4 block compressed texture. 16 bytes per block (6.4 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":79286,"byte_end":79388,"line_start":1810,"line_end":1810,"column_start":5,"column_end":107}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":79393,"byte_end":79447,"line_start":1811,"line_end":1811,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":79452,"byte_end":79455,"line_start":1812,"line_end":1812,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":79460,"byte_end":79550,"line_start":1813,"line_end":1813,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1628},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":80013,"byte_end":80033,"line_start":1821,"line_end":1821,"column_start":5,"column_end":25},"name":"Astc5x4RgbaUnormSrgb","qualname":"::TextureFormat::Astc5x4RgbaUnormSrgb","value":"TextureFormat::Astc5x4RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 5x4 block compressed texture. 16 bytes per block (6.4 bit/px). Complex pallet. 8 bit integer RGBA.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 5x4 block compressed texture. 16 bytes per block (6.4 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":79646,"byte_end":79748,"line_start":1816,"line_end":1816,"column_start":5,"column_end":107}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":79753,"byte_end":79831,"line_start":1817,"line_end":1817,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":79836,"byte_end":79839,"line_start":1818,"line_end":1818,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":79844,"byte_end":79934,"line_start":1819,"line_end":1819,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1630},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":80378,"byte_end":80394,"line_start":1827,"line_end":1827,"column_start":5,"column_end":21},"name":"Astc5x5RgbaUnorm","qualname":"::TextureFormat::Astc5x5RgbaUnorm","value":"TextureFormat::Astc5x5RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 5x5 block compressed texture. 16 bytes per block (5.12 bit/px). Complex pallet. 8 bit integer RGBA.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 5x5 block compressed texture. 16 bytes per block (5.12 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":80039,"byte_end":80142,"line_start":1822,"line_end":1822,"column_start":5,"column_end":108}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":80147,"byte_end":80201,"line_start":1823,"line_end":1823,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":80206,"byte_end":80209,"line_start":1824,"line_end":1824,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":80214,"byte_end":80304,"line_start":1825,"line_end":1825,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1632},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":80768,"byte_end":80788,"line_start":1833,"line_end":1833,"column_start":5,"column_end":25},"name":"Astc5x5RgbaUnormSrgb","qualname":"::TextureFormat::Astc5x5RgbaUnormSrgb","value":"TextureFormat::Astc5x5RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 5x5 block compressed texture. 16 bytes per block (5.12 bit/px). Complex pallet. 8 bit integer RGBA.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 5x5 block compressed texture. 16 bytes per block (5.12 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":80400,"byte_end":80503,"line_start":1828,"line_end":1828,"column_start":5,"column_end":108}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":80508,"byte_end":80586,"line_start":1829,"line_end":1829,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":80591,"byte_end":80594,"line_start":1830,"line_end":1830,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":80599,"byte_end":80689,"line_start":1831,"line_end":1831,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1634},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":81133,"byte_end":81149,"line_start":1839,"line_end":1839,"column_start":5,"column_end":21},"name":"Astc6x5RgbaUnorm","qualname":"::TextureFormat::Astc6x5RgbaUnorm","value":"TextureFormat::Astc6x5RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 6x5 block compressed texture. 16 bytes per block (4.27 bit/px). Complex pallet. 8 bit integer RGBA.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 6x5 block compressed texture. 16 bytes per block (4.27 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":80794,"byte_end":80897,"line_start":1834,"line_end":1834,"column_start":5,"column_end":108}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":80902,"byte_end":80956,"line_start":1835,"line_end":1835,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":80961,"byte_end":80964,"line_start":1836,"line_end":1836,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":80969,"byte_end":81059,"line_start":1837,"line_end":1837,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1636},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":81523,"byte_end":81543,"line_start":1845,"line_end":1845,"column_start":5,"column_end":25},"name":"Astc6x5RgbaUnormSrgb","qualname":"::TextureFormat::Astc6x5RgbaUnormSrgb","value":"TextureFormat::Astc6x5RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 6x5 block compressed texture. 16 bytes per block (4.27 bit/px). Complex pallet. 8 bit integer RGBA.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 6x5 block compressed texture. 16 bytes per block (4.27 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":81155,"byte_end":81258,"line_start":1840,"line_end":1840,"column_start":5,"column_end":108}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":81263,"byte_end":81341,"line_start":1841,"line_end":1841,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":81346,"byte_end":81349,"line_start":1842,"line_end":1842,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":81354,"byte_end":81444,"line_start":1843,"line_end":1843,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1638},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":81888,"byte_end":81904,"line_start":1851,"line_end":1851,"column_start":5,"column_end":21},"name":"Astc6x6RgbaUnorm","qualname":"::TextureFormat::Astc6x6RgbaUnorm","value":"TextureFormat::Astc6x6RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 6x6 block compressed texture. 16 bytes per block (3.56 bit/px). Complex pallet. 8 bit integer RGBA.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 6x6 block compressed texture. 16 bytes per block (3.56 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":81549,"byte_end":81652,"line_start":1846,"line_end":1846,"column_start":5,"column_end":108}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":81657,"byte_end":81711,"line_start":1847,"line_end":1847,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":81716,"byte_end":81719,"line_start":1848,"line_end":1848,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":81724,"byte_end":81814,"line_start":1849,"line_end":1849,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1640},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":82278,"byte_end":82298,"line_start":1857,"line_end":1857,"column_start":5,"column_end":25},"name":"Astc6x6RgbaUnormSrgb","qualname":"::TextureFormat::Astc6x6RgbaUnormSrgb","value":"TextureFormat::Astc6x6RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 6x6 block compressed texture. 16 bytes per block (3.56 bit/px). Complex pallet. 8 bit integer RGBA.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 6x6 block compressed texture. 16 bytes per block (3.56 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":81910,"byte_end":82013,"line_start":1852,"line_end":1852,"column_start":5,"column_end":108}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":82018,"byte_end":82096,"line_start":1853,"line_end":1853,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":82101,"byte_end":82104,"line_start":1854,"line_end":1854,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":82109,"byte_end":82199,"line_start":1855,"line_end":1855,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1642},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":82642,"byte_end":82658,"line_start":1863,"line_end":1863,"column_start":5,"column_end":21},"name":"Astc8x5RgbaUnorm","qualname":"::TextureFormat::Astc8x5RgbaUnorm","value":"TextureFormat::Astc8x5RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 8x5 block compressed texture. 16 bytes per block (3.2 bit/px). Complex pallet. 8 bit integer RGBA.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 8x5 block compressed texture. 16 bytes per block (3.2 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":82304,"byte_end":82406,"line_start":1858,"line_end":1858,"column_start":5,"column_end":107}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":82411,"byte_end":82465,"line_start":1859,"line_end":1859,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":82470,"byte_end":82473,"line_start":1860,"line_end":1860,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":82478,"byte_end":82568,"line_start":1861,"line_end":1861,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1644},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":83031,"byte_end":83051,"line_start":1869,"line_end":1869,"column_start":5,"column_end":25},"name":"Astc8x5RgbaUnormSrgb","qualname":"::TextureFormat::Astc8x5RgbaUnormSrgb","value":"TextureFormat::Astc8x5RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 8x5 block compressed texture. 16 bytes per block (3.2 bit/px). Complex pallet. 8 bit integer RGBA.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 8x5 block compressed texture. 16 bytes per block (3.2 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":82664,"byte_end":82766,"line_start":1864,"line_end":1864,"column_start":5,"column_end":107}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":82771,"byte_end":82849,"line_start":1865,"line_end":1865,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":82854,"byte_end":82857,"line_start":1866,"line_end":1866,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":82862,"byte_end":82952,"line_start":1867,"line_end":1867,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1646},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":83396,"byte_end":83412,"line_start":1875,"line_end":1875,"column_start":5,"column_end":21},"name":"Astc8x6RgbaUnorm","qualname":"::TextureFormat::Astc8x6RgbaUnorm","value":"TextureFormat::Astc8x6RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 8x6 block compressed texture. 16 bytes per block (2.67 bit/px). Complex pallet. 8 bit integer RGBA.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 8x6 block compressed texture. 16 bytes per block (2.67 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":83057,"byte_end":83160,"line_start":1870,"line_end":1870,"column_start":5,"column_end":108}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":83165,"byte_end":83219,"line_start":1871,"line_end":1871,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":83224,"byte_end":83227,"line_start":1872,"line_end":1872,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":83232,"byte_end":83322,"line_start":1873,"line_end":1873,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1648},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":83786,"byte_end":83806,"line_start":1881,"line_end":1881,"column_start":5,"column_end":25},"name":"Astc8x6RgbaUnormSrgb","qualname":"::TextureFormat::Astc8x6RgbaUnormSrgb","value":"TextureFormat::Astc8x6RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 8x6 block compressed texture. 16 bytes per block (2.67 bit/px). Complex pallet. 8 bit integer RGBA.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 8x6 block compressed texture. 16 bytes per block (2.67 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":83418,"byte_end":83521,"line_start":1876,"line_end":1876,"column_start":5,"column_end":108}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":83526,"byte_end":83604,"line_start":1877,"line_end":1877,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":83609,"byte_end":83612,"line_start":1878,"line_end":1878,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":83617,"byte_end":83707,"line_start":1879,"line_end":1879,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1650},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":84153,"byte_end":84170,"line_start":1887,"line_end":1887,"column_start":5,"column_end":22},"name":"Astc10x5RgbaUnorm","qualname":"::TextureFormat::Astc10x5RgbaUnorm","value":"TextureFormat::Astc10x5RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 10x5 block compressed texture. 16 bytes per block (2.56 bit/px). Complex pallet. 8 bit integer RGBA.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 10x5 block compressed texture. 16 bytes per block (2.56 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":83812,"byte_end":83916,"line_start":1882,"line_end":1882,"column_start":5,"column_end":109}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":83921,"byte_end":83975,"line_start":1883,"line_end":1883,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":83980,"byte_end":83983,"line_start":1884,"line_end":1884,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":83988,"byte_end":84078,"line_start":1885,"line_end":1885,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1652},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":84546,"byte_end":84567,"line_start":1893,"line_end":1893,"column_start":5,"column_end":26},"name":"Astc10x5RgbaUnormSrgb","qualname":"::TextureFormat::Astc10x5RgbaUnormSrgb","value":"TextureFormat::Astc10x5RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 10x5 block compressed texture. 16 bytes per block (2.56 bit/px). Complex pallet. 8 bit integer RGBA.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 10x5 block compressed texture. 16 bytes per block (2.56 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":84176,"byte_end":84280,"line_start":1888,"line_end":1888,"column_start":5,"column_end":109}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":84285,"byte_end":84363,"line_start":1889,"line_end":1889,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":84368,"byte_end":84371,"line_start":1890,"line_end":1890,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":84376,"byte_end":84466,"line_start":1891,"line_end":1891,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1654},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":84914,"byte_end":84931,"line_start":1899,"line_end":1899,"column_start":5,"column_end":22},"name":"Astc10x6RgbaUnorm","qualname":"::TextureFormat::Astc10x6RgbaUnorm","value":"TextureFormat::Astc10x6RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 10x6 block compressed texture. 16 bytes per block (2.13 bit/px). Complex pallet. 8 bit integer RGBA.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 10x6 block compressed texture. 16 bytes per block (2.13 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":84573,"byte_end":84677,"line_start":1894,"line_end":1894,"column_start":5,"column_end":109}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":84682,"byte_end":84736,"line_start":1895,"line_end":1895,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":84741,"byte_end":84744,"line_start":1896,"line_end":1896,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":84749,"byte_end":84839,"line_start":1897,"line_end":1897,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1656},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":85307,"byte_end":85328,"line_start":1905,"line_end":1905,"column_start":5,"column_end":26},"name":"Astc10x6RgbaUnormSrgb","qualname":"::TextureFormat::Astc10x6RgbaUnormSrgb","value":"TextureFormat::Astc10x6RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 10x6 block compressed texture. 16 bytes per block (2.13 bit/px). Complex pallet. 8 bit integer RGBA.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 10x6 block compressed texture. 16 bytes per block (2.13 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":84937,"byte_end":85041,"line_start":1900,"line_end":1900,"column_start":5,"column_end":109}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":85046,"byte_end":85124,"line_start":1901,"line_end":1901,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":85129,"byte_end":85132,"line_start":1902,"line_end":1902,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":85137,"byte_end":85227,"line_start":1903,"line_end":1903,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1658},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":85670,"byte_end":85686,"line_start":1911,"line_end":1911,"column_start":5,"column_end":21},"name":"Astc8x8RgbaUnorm","qualname":"::TextureFormat::Astc8x8RgbaUnorm","value":"TextureFormat::Astc8x8RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 8x8 block compressed texture. 16 bytes per block (2 bit/px). Complex pallet. 8 bit integer RGBA.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 8x8 block compressed texture. 16 bytes per block (2 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":85334,"byte_end":85434,"line_start":1906,"line_end":1906,"column_start":5,"column_end":105}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":85439,"byte_end":85493,"line_start":1907,"line_end":1907,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":85498,"byte_end":85501,"line_start":1908,"line_end":1908,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":85506,"byte_end":85596,"line_start":1909,"line_end":1909,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1660},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":86057,"byte_end":86077,"line_start":1917,"line_end":1917,"column_start":5,"column_end":25},"name":"Astc8x8RgbaUnormSrgb","qualname":"::TextureFormat::Astc8x8RgbaUnormSrgb","value":"TextureFormat::Astc8x8RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 8x8 block compressed texture. 16 bytes per block (2 bit/px). Complex pallet. 8 bit integer RGBA.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 8x8 block compressed texture. 16 bytes per block (2 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":85692,"byte_end":85792,"line_start":1912,"line_end":1912,"column_start":5,"column_end":105}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":85797,"byte_end":85875,"line_start":1913,"line_end":1913,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":85880,"byte_end":85883,"line_start":1914,"line_end":1914,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":85888,"byte_end":85978,"line_start":1915,"line_end":1915,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1662},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":86423,"byte_end":86440,"line_start":1923,"line_end":1923,"column_start":5,"column_end":22},"name":"Astc10x8RgbaUnorm","qualname":"::TextureFormat::Astc10x8RgbaUnorm","value":"TextureFormat::Astc10x8RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 10x8 block compressed texture. 16 bytes per block (1.6 bit/px). Complex pallet. 8 bit integer RGBA.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 10x8 block compressed texture. 16 bytes per block (1.6 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":86083,"byte_end":86186,"line_start":1918,"line_end":1918,"column_start":5,"column_end":108}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":86191,"byte_end":86245,"line_start":1919,"line_end":1919,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":86250,"byte_end":86253,"line_start":1920,"line_end":1920,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":86258,"byte_end":86348,"line_start":1921,"line_end":1921,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1664},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":86815,"byte_end":86836,"line_start":1929,"line_end":1929,"column_start":5,"column_end":26},"name":"Astc10x8RgbaUnormSrgb","qualname":"::TextureFormat::Astc10x8RgbaUnormSrgb","value":"TextureFormat::Astc10x8RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 10x8 block compressed texture. 16 bytes per block (1.6 bit/px). Complex pallet. 8 bit integer RGBA.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 10x8 block compressed texture. 16 bytes per block (1.6 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":86446,"byte_end":86549,"line_start":1924,"line_end":1924,"column_start":5,"column_end":108}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":86554,"byte_end":86632,"line_start":1925,"line_end":1925,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":86637,"byte_end":86640,"line_start":1926,"line_end":1926,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":86645,"byte_end":86735,"line_start":1927,"line_end":1927,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1666},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":87185,"byte_end":87203,"line_start":1935,"line_end":1935,"column_start":5,"column_end":23},"name":"Astc10x10RgbaUnorm","qualname":"::TextureFormat::Astc10x10RgbaUnorm","value":"TextureFormat::Astc10x10RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 10x10 block compressed texture. 16 bytes per block (1.28 bit/px). Complex pallet. 8 bit integer RGBA.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 10x10 block compressed texture. 16 bytes per block (1.28 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":86842,"byte_end":86947,"line_start":1930,"line_end":1930,"column_start":5,"column_end":110}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":86952,"byte_end":87006,"line_start":1931,"line_end":1931,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":87011,"byte_end":87014,"line_start":1932,"line_end":1932,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":87019,"byte_end":87109,"line_start":1933,"line_end":1933,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1668},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":87581,"byte_end":87603,"line_start":1941,"line_end":1941,"column_start":5,"column_end":27},"name":"Astc10x10RgbaUnormSrgb","qualname":"::TextureFormat::Astc10x10RgbaUnormSrgb","value":"TextureFormat::Astc10x10RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 10x10 block compressed texture. 16 bytes per block (1.28 bit/px). Complex pallet. 8 bit integer RGBA.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 10x10 block compressed texture. 16 bytes per block (1.28 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":87209,"byte_end":87314,"line_start":1936,"line_end":1936,"column_start":5,"column_end":110}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":87319,"byte_end":87397,"line_start":1937,"line_end":1937,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":87402,"byte_end":87405,"line_start":1938,"line_end":1938,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":87410,"byte_end":87500,"line_start":1939,"line_end":1939,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1670},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":87952,"byte_end":87970,"line_start":1947,"line_end":1947,"column_start":5,"column_end":23},"name":"Astc12x10RgbaUnorm","qualname":"::TextureFormat::Astc12x10RgbaUnorm","value":"TextureFormat::Astc12x10RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 12x10 block compressed texture. 16 bytes per block (1.07 bit/px). Complex pallet. 8 bit integer RGBA.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 12x10 block compressed texture. 16 bytes per block (1.07 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":87609,"byte_end":87714,"line_start":1942,"line_end":1942,"column_start":5,"column_end":110}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":87719,"byte_end":87773,"line_start":1943,"line_end":1943,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":87778,"byte_end":87781,"line_start":1944,"line_end":1944,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":87786,"byte_end":87876,"line_start":1945,"line_end":1945,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1672},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":88348,"byte_end":88370,"line_start":1953,"line_end":1953,"column_start":5,"column_end":27},"name":"Astc12x10RgbaUnormSrgb","qualname":"::TextureFormat::Astc12x10RgbaUnormSrgb","value":"TextureFormat::Astc12x10RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 12x10 block compressed texture. 16 bytes per block (1.07 bit/px). Complex pallet. 8 bit integer RGBA.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 12x10 block compressed texture. 16 bytes per block (1.07 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":87976,"byte_end":88081,"line_start":1948,"line_end":1948,"column_start":5,"column_end":110}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":88086,"byte_end":88164,"line_start":1949,"line_end":1949,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":88169,"byte_end":88172,"line_start":1950,"line_end":1950,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":88177,"byte_end":88267,"line_start":1951,"line_end":1951,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1674},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":88719,"byte_end":88737,"line_start":1959,"line_end":1959,"column_start":5,"column_end":23},"name":"Astc12x12RgbaUnorm","qualname":"::TextureFormat::Astc12x12RgbaUnorm","value":"TextureFormat::Astc12x12RgbaUnorm","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 12x12 block compressed texture. 16 bytes per block (0.89 bit/px). Complex pallet. 8 bit integer RGBA.\n [0, 255] converted to/from float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 12x12 block compressed texture. 16 bytes per block (0.89 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":88376,"byte_end":88481,"line_start":1954,"line_end":1954,"column_start":5,"column_end":110}},{"value":"/ [0, 255] converted to/from float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":88486,"byte_end":88540,"line_start":1955,"line_end":1955,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":88545,"byte_end":88548,"line_start":1956,"line_end":1956,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":88553,"byte_end":88643,"line_start":1957,"line_end":1957,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1676},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":89115,"byte_end":89137,"line_start":1965,"line_end":1965,"column_start":5,"column_end":27},"name":"Astc12x12RgbaUnormSrgb","qualname":"::TextureFormat::Astc12x12RgbaUnormSrgb","value":"TextureFormat::Astc12x12RgbaUnormSrgb","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" 12x12 block compressed texture. 16 bytes per block (0.89 bit/px). Complex pallet. 8 bit integer RGBA.\n Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","sig":null,"attributes":[{"value":"/ 12x12 block compressed texture. 16 bytes per block (0.89 bit/px). Complex pallet. 8 bit integer RGBA.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":88743,"byte_end":88848,"line_start":1960,"line_end":1960,"column_start":5,"column_end":110}},{"value":"/ Srgb-color [0, 255] converted to/from linear-color float [0, 1] in shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":88853,"byte_end":88931,"line_start":1961,"line_end":1961,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":88936,"byte_end":88939,"line_start":1962,"line_end":1962,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_COMPRESSION_ASTC_LDR`] must be enabled to use this texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":88944,"byte_end":89034,"line_start":1963,"line_end":1963,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":1483},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":60070,"byte_end":60083,"line_start":1463,"line_end":1463,"column_start":10,"column_end":23},"name":"TextureFormat","qualname":"::TextureFormat","value":"pub enum TextureFormat {\n    R8Unorm,\n    R8Snorm,\n    R8Uint,\n    R8Sint,\n    R16Uint,\n    R16Sint,\n    R16Unorm,\n    R16Snorm,\n    R16Float,\n    Rg8Unorm,\n    Rg8Snorm,\n    Rg8Uint,\n    Rg8Sint,\n    R32Uint,\n    R32Sint,\n    R32Float,\n    Rg16Uint,\n    Rg16Sint,\n    Rg16Unorm,\n    Rg16Snorm,\n    Rg16Float,\n    Rgba8Unorm,\n    Rgba8UnormSrgb,\n    Rgba8Snorm,\n    Rgba8Uint,\n    Rgba8Sint,\n    Bgra8Unorm,\n    Bgra8UnormSrgb,\n    Rgb10a2Unorm,\n    Rg11b10Float,\n    Rg32Uint,\n    Rg32Sint,\n    Rg32Float,\n    Rgba16Uint,\n    Rgba16Sint,\n    Rgba16Unorm,\n    Rgba16Snorm,\n    Rgba16Float,\n    Rgba32Uint,\n    Rgba32Sint,\n    Rgba32Float,\n    Depth32Float,\n    Depth24Plus,\n    Depth24PlusStencil8,\n    Rgb9e5Ufloat,\n    Bc1RgbaUnorm,\n    Bc1RgbaUnormSrgb,\n    Bc2RgbaUnorm,\n    Bc2RgbaUnormSrgb,\n    Bc3RgbaUnorm,\n    Bc3RgbaUnormSrgb,\n    Bc4RUnorm,\n    Bc4RSnorm,\n    Bc5RgUnorm,\n    Bc5RgSnorm,\n    Bc6hRgbUfloat,\n    Bc6hRgbSfloat,\n    Bc7RgbaUnorm,\n    Bc7RgbaUnormSrgb,\n    Etc2Rgb8Unorm,\n    Etc2Rgb8UnormSrgb,\n    Etc2Rgb8A1Unorm,\n    Etc2Rgb8A1UnormSrgb,\n    Etc2Rgba8Unorm,\n    Etc2Rgba8UnormSrgb,\n    EacR11Unorm,\n    EacR11Snorm,\n    EacRg11Unorm,\n    EacRg11Snorm,\n    Astc4x4RgbaUnorm,\n    Astc4x4RgbaUnormSrgb,\n    Astc5x4RgbaUnorm,\n    Astc5x4RgbaUnormSrgb,\n    Astc5x5RgbaUnorm,\n    Astc5x5RgbaUnormSrgb,\n    Astc6x5RgbaUnorm,\n    Astc6x5RgbaUnormSrgb,\n    Astc6x6RgbaUnorm,\n    Astc6x6RgbaUnormSrgb,\n    Astc8x5RgbaUnorm,\n    Astc8x5RgbaUnormSrgb,\n    Astc8x6RgbaUnorm,\n    Astc8x6RgbaUnormSrgb,\n    Astc10x5RgbaUnorm,\n    Astc10x5RgbaUnormSrgb,\n    Astc10x6RgbaUnorm,\n    Astc10x6RgbaUnormSrgb,\n    Astc8x8RgbaUnorm,\n    Astc8x8RgbaUnormSrgb,\n    Astc10x8RgbaUnorm,\n    Astc10x8RgbaUnormSrgb,\n    Astc10x10RgbaUnorm,\n    Astc10x10RgbaUnormSrgb,\n    Astc12x10RgbaUnorm,\n    Astc12x10RgbaUnormSrgb,\n    Astc12x12RgbaUnorm,\n    Astc12x12RgbaUnormSrgb,\n}","parent":null,"children":[{"krate":0,"index":1484},{"krate":0,"index":1486},{"krate":0,"index":1488},{"krate":0,"index":1490},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1508},{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1516},{"krate":0,"index":1518},{"krate":0,"index":1520},{"krate":0,"index":1522},{"krate":0,"index":1524},{"krate":0,"index":1526},{"krate":0,"index":1528},{"krate":0,"index":1530},{"krate":0,"index":1532},{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1540},{"krate":0,"index":1542},{"krate":0,"index":1544},{"krate":0,"index":1546},{"krate":0,"index":1548},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1562},{"krate":0,"index":1564},{"krate":0,"index":1566},{"krate":0,"index":1568},{"krate":0,"index":1570},{"krate":0,"index":1572},{"krate":0,"index":1574},{"krate":0,"index":1576},{"krate":0,"index":1578},{"krate":0,"index":1580},{"krate":0,"index":1582},{"krate":0,"index":1584},{"krate":0,"index":1586},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1592},{"krate":0,"index":1594},{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1600},{"krate":0,"index":1602},{"krate":0,"index":1604},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1610},{"krate":0,"index":1612},{"krate":0,"index":1614},{"krate":0,"index":1616},{"krate":0,"index":1618},{"krate":0,"index":1620},{"krate":0,"index":1622},{"krate":0,"index":1624},{"krate":0,"index":1626},{"krate":0,"index":1628},{"krate":0,"index":1630},{"krate":0,"index":1632},{"krate":0,"index":1634},{"krate":0,"index":1636},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1642},{"krate":0,"index":1644},{"krate":0,"index":1646},{"krate":0,"index":1648},{"krate":0,"index":1650},{"krate":0,"index":1652},{"krate":0,"index":1654},{"krate":0,"index":1656},{"krate":0,"index":1658},{"krate":0,"index":1660},{"krate":0,"index":1662},{"krate":0,"index":1664},{"krate":0,"index":1666},{"krate":0,"index":1668},{"krate":0,"index":1670},{"krate":0,"index":1672},{"krate":0,"index":1674},{"krate":0,"index":1676}],"decl_id":null,"docs":" Underlying texture data format.","sig":null,"attributes":[{"value":"/ Underlying texture data format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":59694,"byte_end":59729,"line_start":1456,"line_end":1456,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":59730,"byte_end":59733,"line_start":1457,"line_end":1457,"column_start":1,"column_end":4}},{"value":"/ If there is a conversion in the format (such as srgb -> linear), The conversion listed is for","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":59734,"byte_end":59831,"line_start":1458,"line_end":1458,"column_start":1,"column_end":98}},{"value":"/ loading from texture in a shader. When writing to the texture, the opposite conversion takes place.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":59832,"byte_end":59935,"line_start":1459,"line_end":1459,"column_start":1,"column_end":104}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":59936,"byte_end":59946,"line_start":1460,"line_end":1460,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":89231,"byte_end":89239,"line_start":1970,"line_end":1970,"column_start":12,"column_end":20},"name":"describe","qualname":"<TextureFormat>::describe","value":"pub fn describe(&Self) -> TextureFormatInfo","parent":null,"children":[],"decl_id":null,"docs":" Get useful information about the texture format.\n","sig":null,"attributes":[{"value":"/ Get useful information about the texture format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":89167,"byte_end":89219,"line_start":1969,"line_end":1969,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1692},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":99675,"byte_end":99686,"line_start":2147,"line_end":2147,"column_start":16,"column_end":27},"name":"ColorWrites","qualname":"::ColorWrites","value":"ColorWrites {  }","parent":null,"children":[{"krate":0,"index":1693}],"decl_id":null,"docs":" Color write mask. Disabled color channels will not be written to.\n","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs","byte_start":9986302,"byte_end":9986311,"line_start":362,"line_end":362,"column_start":11,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":1730},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":99746,"byte_end":99749,"line_start":2149,"line_end":2149,"column_start":15,"column_end":18},"name":"RED","qualname":"::ColorWrites::RED","value":"Self","parent":{"krate":0,"index":1729},"children":[],"decl_id":null,"docs":" Enable red channel writes\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1731},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":99814,"byte_end":99819,"line_start":2151,"line_end":2151,"column_start":15,"column_end":20},"name":"GREEN","qualname":"::ColorWrites::GREEN","value":"Self","parent":{"krate":0,"index":1729},"children":[],"decl_id":null,"docs":" Enable green channel writes\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1732},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":99883,"byte_end":99887,"line_start":2153,"line_end":2153,"column_start":15,"column_end":19},"name":"BLUE","qualname":"::ColorWrites::BLUE","value":"Self","parent":{"krate":0,"index":1729},"children":[],"decl_id":null,"docs":" Enable blue channel writes\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1733},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":99952,"byte_end":99957,"line_start":2155,"line_end":2155,"column_start":15,"column_end":20},"name":"ALPHA","qualname":"::ColorWrites::ALPHA","value":"Self","parent":{"krate":0,"index":1729},"children":[],"decl_id":null,"docs":" Enable alpha channel writes\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1734},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":100037,"byte_end":100042,"line_start":2157,"line_end":2157,"column_start":15,"column_end":20},"name":"COLOR","qualname":"::ColorWrites::COLOR","value":"Self","parent":{"krate":0,"index":1729},"children":[],"decl_id":null,"docs":" Enable red, green, and blue channel writes\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1735},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":100155,"byte_end":100158,"line_start":2159,"line_end":2159,"column_start":15,"column_end":18},"name":"ALL","qualname":"::ColorWrites::ALL","value":"Self","parent":{"krate":0,"index":1729},"children":[],"decl_id":null,"docs":" Enable writes to all channels.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1804},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":100666,"byte_end":100678,"line_start":2177,"line_end":2177,"column_start":12,"column_end":24},"name":"StencilState","qualname":"::StencilState","value":"StencilState { front, back, read_mask, write_mask }","parent":null,"children":[{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1808}],"decl_id":null,"docs":" State of the stencil operation (fixed-pipeline stage).\n","sig":null,"attributes":[{"value":"/ State of the stencil operation (fixed-pipeline stage).","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":100428,"byte_end":100486,"line_start":2172,"line_end":2172,"column_start":1,"column_end":59}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":100487,"byte_end":100497,"line_start":2173,"line_end":2173,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1805},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":100714,"byte_end":100719,"line_start":2179,"line_end":2179,"column_start":9,"column_end":14},"name":"front","qualname":"::StencilState::front","value":"StencilFaceState","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":" Front face mode.\n","sig":null,"attributes":[{"value":"/ Front face mode.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":100685,"byte_end":100705,"line_start":2178,"line_end":2178,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":1806},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":100771,"byte_end":100775,"line_start":2181,"line_end":2181,"column_start":9,"column_end":13},"name":"back","qualname":"::StencilState::back","value":"StencilFaceState","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":" Back face mode.\n","sig":null,"attributes":[{"value":"/ Back face mode.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":100743,"byte_end":100762,"line_start":2180,"line_end":2180,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":1807},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":100927,"byte_end":100936,"line_start":2183,"line_end":2183,"column_start":9,"column_end":18},"name":"read_mask","qualname":"::StencilState::read_mask","value":"u32","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":" Stencil values are AND'd with this mask when reading and writing from the stencil buffer. Only low 8 bits are used.\n","sig":null,"attributes":[{"value":"/ Stencil values are AND'd with this mask when reading and writing from the stencil buffer. Only low 8 bits are used.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":100799,"byte_end":100918,"line_start":2182,"line_end":2182,"column_start":5,"column_end":124}}]},{"kind":"Field","id":{"krate":0,"index":1808},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":101061,"byte_end":101071,"line_start":2185,"line_end":2185,"column_start":9,"column_end":19},"name":"write_mask","qualname":"::StencilState::write_mask","value":"u32","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":" Stencil values are AND'd with this mask when writing to the stencil buffer. Only low 8 bits are used.\n","sig":null,"attributes":[{"value":"/ Stencil values are AND'd with this mask when writing to the stencil buffer. Only low 8 bits are used.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":100947,"byte_end":101052,"line_start":2184,"line_end":2184,"column_start":5,"column_end":110}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":101165,"byte_end":101175,"line_start":2190,"line_end":2190,"column_start":12,"column_end":22},"name":"is_enabled","qualname":"<StencilState>::is_enabled","value":"pub fn is_enabled(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the stencil test is enabled.\n","sig":null,"attributes":[{"value":"/ Returns true if the stencil test is enabled.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":101105,"byte_end":101153,"line_start":2189,"line_end":2189,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":101429,"byte_end":101441,"line_start":2195,"line_end":2195,"column_start":12,"column_end":24},"name":"is_read_only","qualname":"<StencilState>::is_read_only","value":"pub fn is_read_only(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the state doesn't mutate the target values.\n","sig":null,"attributes":[{"value":"/ Returns true if the state doesn't mutate the target values.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":101354,"byte_end":101417,"line_start":2194,"line_end":2194,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":101585,"byte_end":101600,"line_start":2199,"line_end":2199,"column_start":12,"column_end":27},"name":"needs_ref_value","qualname":"<StencilState>::needs_ref_value","value":"pub fn needs_ref_value(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the stencil state uses the reference value for testing.\n","sig":null,"attributes":[{"value":"/ Returns true if the stencil state uses the reference value for testing.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":101498,"byte_end":101573,"line_start":2198,"line_end":2198,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":1825},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":101926,"byte_end":101940,"line_start":2209,"line_end":2209,"column_start":12,"column_end":26},"name":"DepthBiasState","qualname":"::DepthBiasState","value":"DepthBiasState { constant, slope_scale, clamp }","parent":null,"children":[{"krate":0,"index":1826},{"krate":0,"index":1827},{"krate":0,"index":1828}],"decl_id":null,"docs":" Describes the biasing setting for the depth target.\n","sig":null,"attributes":[{"value":"/ Describes the biasing setting for the depth target.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":101695,"byte_end":101750,"line_start":2204,"line_end":2204,"column_start":1,"column_end":56}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":101751,"byte_end":101761,"line_start":2205,"line_end":2205,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1826},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102026,"byte_end":102034,"line_start":2211,"line_end":2211,"column_start":9,"column_end":17},"name":"constant","qualname":"::DepthBiasState::constant","value":"i32","parent":{"krate":0,"index":1825},"children":[],"decl_id":null,"docs":" Constant depth biasing factor, in basic units of the depth format.\n","sig":null,"attributes":[{"value":"/ Constant depth biasing factor, in basic units of the depth format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":101947,"byte_end":102017,"line_start":2210,"line_end":2210,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":1827},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102085,"byte_end":102096,"line_start":2213,"line_end":2213,"column_start":9,"column_end":20},"name":"slope_scale","qualname":"::DepthBiasState::slope_scale","value":"f32","parent":{"krate":0,"index":1825},"children":[],"decl_id":null,"docs":" Slope depth biasing factor.\n","sig":null,"attributes":[{"value":"/ Slope depth biasing factor.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102045,"byte_end":102076,"line_start":2212,"line_end":2212,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":1828},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102154,"byte_end":102159,"line_start":2215,"line_end":2215,"column_start":9,"column_end":14},"name":"clamp","qualname":"::DepthBiasState::clamp","value":"f32","parent":{"krate":0,"index":1825},"children":[],"decl_id":null,"docs":" Depth bias clamp value (absolute).\n","sig":null,"attributes":[{"value":"/ Depth bias clamp value (absolute).","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102107,"byte_end":102145,"line_start":2214,"line_end":2214,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102256,"byte_end":102266,"line_start":2220,"line_end":2220,"column_start":12,"column_end":22},"name":"is_enabled","qualname":"<DepthBiasState>::is_enabled","value":"pub fn is_enabled(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the depth biasing is enabled.\n","sig":null,"attributes":[{"value":"/ Returns true if the depth biasing is enabled.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102195,"byte_end":102244,"line_start":2219,"line_end":2219,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1840},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102567,"byte_end":102584,"line_start":2230,"line_end":2230,"column_start":12,"column_end":29},"name":"DepthStencilState","qualname":"::DepthStencilState","value":"DepthStencilState { format, depth_write_enabled, depth_compare, stencil, bias }","parent":null,"children":[{"krate":0,"index":1841},{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1844},{"krate":0,"index":1845}],"decl_id":null,"docs":" Describes the depth/stencil state in a render pipeline.\n","sig":null,"attributes":[{"value":"/ Describes the depth/stencil state in a render pipeline.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102347,"byte_end":102406,"line_start":2225,"line_end":2225,"column_start":1,"column_end":60}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102407,"byte_end":102417,"line_start":2226,"line_end":2226,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1841},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102777,"byte_end":102783,"line_start":2233,"line_end":2233,"column_start":9,"column_end":15},"name":"format","qualname":"::DepthStencilState::format","value":"TextureFormat","parent":{"krate":0,"index":1840},"children":[],"decl_id":null,"docs":" Format of the depth/stencil buffer, must be special depth format. Must match the the format\n of the depth/stencil attachment in [`CommandEncoder::begin_render_pass`].\n","sig":null,"attributes":[{"value":"/ Format of the depth/stencil buffer, must be special depth format. Must match the the format","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102591,"byte_end":102686,"line_start":2231,"line_end":2231,"column_start":5,"column_end":100}},{"value":"/ of the depth/stencil attachment in [`CommandEncoder::begin_render_pass`].","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102691,"byte_end":102768,"line_start":2232,"line_end":2232,"column_start":5,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":1842},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102859,"byte_end":102878,"line_start":2235,"line_end":2235,"column_start":9,"column_end":28},"name":"depth_write_enabled","qualname":"::DepthStencilState::depth_write_enabled","value":"bool","parent":{"krate":0,"index":1840},"children":[],"decl_id":null,"docs":" If disabled, depth will not be written to.\n","sig":null,"attributes":[{"value":"/ If disabled, depth will not be written to.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102804,"byte_end":102850,"line_start":2234,"line_end":2234,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":1843},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102970,"byte_end":102983,"line_start":2237,"line_end":2237,"column_start":9,"column_end":22},"name":"depth_compare","qualname":"::DepthStencilState::depth_compare","value":"CompareFunction","parent":{"krate":0,"index":1840},"children":[],"decl_id":null,"docs":" Comparison function used to compare depth values in the depth test.\n","sig":null,"attributes":[{"value":"/ Comparison function used to compare depth values in the depth test.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102890,"byte_end":102961,"line_start":2236,"line_end":2236,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1844},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":103109,"byte_end":103116,"line_start":2240,"line_end":2240,"column_start":9,"column_end":16},"name":"stencil","qualname":"::DepthStencilState::stencil","value":"StencilState","parent":{"krate":0,"index":1840},"children":[],"decl_id":null,"docs":" Stencil state.\n","sig":null,"attributes":[{"value":"/ Stencil state.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":103006,"byte_end":103024,"line_start":2238,"line_end":2238,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1845},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":103242,"byte_end":103246,"line_start":2243,"line_end":2243,"column_start":9,"column_end":13},"name":"bias","qualname":"::DepthStencilState::bias","value":"DepthBiasState","parent":{"krate":0,"index":1840},"children":[],"decl_id":null,"docs":" Depth bias state.\n","sig":null,"attributes":[{"value":"/ Depth bias state.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":103136,"byte_end":103157,"line_start":2241,"line_end":2241,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":103357,"byte_end":103373,"line_start":2248,"line_end":2248,"column_start":12,"column_end":28},"name":"is_depth_enabled","qualname":"<DepthStencilState>::is_depth_enabled","value":"pub fn is_depth_enabled(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the depth testing is enabled.\n","sig":null,"attributes":[{"value":"/ Returns true if the depth testing is enabled.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":103296,"byte_end":103345,"line_start":2247,"line_end":2247,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":103578,"byte_end":103590,"line_start":2252,"line_end":2252,"column_start":12,"column_end":24},"name":"is_read_only","qualname":"<DepthStencilState>::is_read_only","value":"pub fn is_read_only(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the state doesn't mutate either depth or stencil of the target.\n","sig":null,"attributes":[{"value":"/ Returns true if the state doesn't mutate either depth or stencil of the target.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":103483,"byte_end":103566,"line_start":2251,"line_end":2251,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1855},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":103987,"byte_end":103993,"line_start":2264,"line_end":2264,"column_start":5,"column_end":11},"name":"Uint16","qualname":"::IndexFormat::Uint16","value":"IndexFormat::Uint16","parent":{"krate":0,"index":1854},"children":[],"decl_id":null,"docs":" Indices are 16 bit unsigned integers.\n","sig":null,"attributes":[{"value":"/ Indices are 16 bit unsigned integers.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":103941,"byte_end":103982,"line_start":2263,"line_end":2263,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1858},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104049,"byte_end":104055,"line_start":2266,"line_end":2266,"column_start":5,"column_end":11},"name":"Uint32","qualname":"::IndexFormat::Uint32","value":"IndexFormat::Uint32","parent":{"krate":0,"index":1854},"children":[],"decl_id":null,"docs":" Indices are 32 bit unsigned integers.\n","sig":null,"attributes":[{"value":"/ Indices are 32 bit unsigned integers.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104003,"byte_end":104044,"line_start":2265,"line_end":2265,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":1854},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":103923,"byte_end":103934,"line_start":2262,"line_end":2262,"column_start":10,"column_end":21},"name":"IndexFormat","qualname":"::IndexFormat","value":"pub enum IndexFormat { Uint16 = , Uint32 = , }","parent":null,"children":[{"krate":0,"index":1855},{"krate":0,"index":1858}],"decl_id":null,"docs":" Format of indices used with pipeline.\n","sig":null,"attributes":[{"value":"/ Format of indices used with pipeline.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":103682,"byte_end":103723,"line_start":2257,"line_end":2257,"column_start":1,"column_end":42}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":103724,"byte_end":103734,"line_start":2258,"line_end":2258,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1876},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104499,"byte_end":104503,"line_start":2283,"line_end":2283,"column_start":5,"column_end":9},"name":"Keep","qualname":"::StencilOperation::Keep","value":"StencilOperation::Keep","parent":{"krate":0,"index":1875},"children":[],"decl_id":null,"docs":" Keep stencil value unchanged.\n","sig":null,"attributes":[{"value":"/ Keep stencil value unchanged.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104461,"byte_end":104494,"line_start":2282,"line_end":2282,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1879},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104548,"byte_end":104552,"line_start":2285,"line_end":2285,"column_start":5,"column_end":9},"name":"Zero","qualname":"::StencilOperation::Zero","value":"StencilOperation::Zero","parent":{"krate":0,"index":1875},"children":[],"decl_id":null,"docs":" Set stencil value to zero.\n","sig":null,"attributes":[{"value":"/ Set stencil value to zero.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104513,"byte_end":104543,"line_start":2284,"line_end":2284,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1882},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104674,"byte_end":104681,"line_start":2287,"line_end":2287,"column_start":5,"column_end":12},"name":"Replace","qualname":"::StencilOperation::Replace","value":"StencilOperation::Replace","parent":{"krate":0,"index":1875},"children":[],"decl_id":null,"docs":" Replace stencil value with value provided in most recent call to [`RenderPass::set_stencil_reference`].\n","sig":null,"attributes":[{"value":"/ Replace stencil value with value provided in most recent call to [`RenderPass::set_stencil_reference`].","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104562,"byte_end":104669,"line_start":2286,"line_end":2286,"column_start":5,"column_end":112}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1885},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104730,"byte_end":104736,"line_start":2289,"line_end":2289,"column_start":5,"column_end":11},"name":"Invert","qualname":"::StencilOperation::Invert","value":"StencilOperation::Invert","parent":{"krate":0,"index":1875},"children":[],"decl_id":null,"docs":" Bitwise inverts stencil value.\n","sig":null,"attributes":[{"value":"/ Bitwise inverts stencil value.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104691,"byte_end":104725,"line_start":2288,"line_end":2288,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1888},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104809,"byte_end":104823,"line_start":2291,"line_end":2291,"column_start":5,"column_end":19},"name":"IncrementClamp","qualname":"::StencilOperation::IncrementClamp","value":"StencilOperation::IncrementClamp","parent":{"krate":0,"index":1875},"children":[],"decl_id":null,"docs":" Increments stencil value by one, clamping on overflow.\n","sig":null,"attributes":[{"value":"/ Increments stencil value by one, clamping on overflow.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104746,"byte_end":104804,"line_start":2290,"line_end":2290,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1891},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104897,"byte_end":104911,"line_start":2293,"line_end":2293,"column_start":5,"column_end":19},"name":"DecrementClamp","qualname":"::StencilOperation::DecrementClamp","value":"StencilOperation::DecrementClamp","parent":{"krate":0,"index":1875},"children":[],"decl_id":null,"docs":" Decrements stencil value by one, clamping on underflow.\n","sig":null,"attributes":[{"value":"/ Decrements stencil value by one, clamping on underflow.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104833,"byte_end":104892,"line_start":2292,"line_end":2292,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1894},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104984,"byte_end":104997,"line_start":2295,"line_end":2295,"column_start":5,"column_end":18},"name":"IncrementWrap","qualname":"::StencilOperation::IncrementWrap","value":"StencilOperation::IncrementWrap","parent":{"krate":0,"index":1875},"children":[],"decl_id":null,"docs":" Increments stencil value by one, wrapping on overflow.\n","sig":null,"attributes":[{"value":"/ Increments stencil value by one, wrapping on overflow.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104921,"byte_end":104979,"line_start":2294,"line_end":2294,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1897},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":105071,"byte_end":105084,"line_start":2297,"line_end":2297,"column_start":5,"column_end":18},"name":"DecrementWrap","qualname":"::StencilOperation::DecrementWrap","value":"StencilOperation::DecrementWrap","parent":{"krate":0,"index":1875},"children":[],"decl_id":null,"docs":" Decrements stencil value by one, wrapping on underflow.\n","sig":null,"attributes":[{"value":"/ Decrements stencil value by one, wrapping on underflow.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":105007,"byte_end":105066,"line_start":2296,"line_end":2296,"column_start":5,"column_end":64}}]},{"kind":"Enum","id":{"krate":0,"index":1875},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104438,"byte_end":104454,"line_start":2281,"line_end":2281,"column_start":10,"column_end":26},"name":"StencilOperation","qualname":"::StencilOperation","value":"pub enum StencilOperation {\n    Keep = ,\n    Zero = ,\n    Replace = ,\n    Invert = ,\n    IncrementClamp = ,\n    DecrementClamp = ,\n    IncrementWrap = ,\n    DecrementWrap = ,\n}","parent":null,"children":[{"krate":0,"index":1876},{"krate":0,"index":1879},{"krate":0,"index":1882},{"krate":0,"index":1885},{"krate":0,"index":1888},{"krate":0,"index":1891},{"krate":0,"index":1894},{"krate":0,"index":1897}],"decl_id":null,"docs":" Operation to perform on the stencil value.\n","sig":null,"attributes":[{"value":"/ Operation to perform on the stencil value.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104152,"byte_end":104198,"line_start":2275,"line_end":2275,"column_start":1,"column_end":47}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104199,"byte_end":104209,"line_start":2276,"line_end":2276,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1914},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":105560,"byte_end":105576,"line_start":2314,"line_end":2314,"column_start":12,"column_end":28},"name":"StencilFaceState","qualname":"::StencilFaceState","value":"StencilFaceState { compare, fail_op, depth_fail_op, pass_op }","parent":null,"children":[{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1917},{"krate":0,"index":1918}],"decl_id":null,"docs":" Describes stencil state in a render pipeline.","sig":null,"attributes":[{"value":"/ Describes stencil state in a render pipeline.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":105184,"byte_end":105233,"line_start":2306,"line_end":2306,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":105234,"byte_end":105237,"line_start":2307,"line_end":2307,"column_start":1,"column_end":4}},{"value":"/ If you are not using stencil state, set this to [`StencilFaceState::IGNORE`].","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":105238,"byte_end":105319,"line_start":2308,"line_end":2308,"column_start":1,"column_end":82}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":105320,"byte_end":105330,"line_start":2309,"line_end":2309,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1915},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":105688,"byte_end":105695,"line_start":2316,"line_end":2316,"column_start":9,"column_end":16},"name":"compare","qualname":"::StencilFaceState::compare","value":"CompareFunction","parent":{"krate":0,"index":1914},"children":[],"decl_id":null,"docs":" Comparison function that determines if the fail_op or pass_op is used on the stencil buffer.\n","sig":null,"attributes":[{"value":"/ Comparison function that determines if the fail_op or pass_op is used on the stencil buffer.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":105583,"byte_end":105679,"line_start":2315,"line_end":2315,"column_start":5,"column_end":101}}]},{"kind":"Field","id":{"krate":0,"index":1916},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":105783,"byte_end":105790,"line_start":2318,"line_end":2318,"column_start":9,"column_end":16},"name":"fail_op","qualname":"::StencilFaceState::fail_op","value":"StencilOperation","parent":{"krate":0,"index":1914},"children":[],"decl_id":null,"docs":" Operation that is preformed when stencil test fails.\n","sig":null,"attributes":[{"value":"/ Operation that is preformed when stencil test fails.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":105718,"byte_end":105774,"line_start":2317,"line_end":2317,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":1917},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":105903,"byte_end":105916,"line_start":2320,"line_end":2320,"column_start":9,"column_end":22},"name":"depth_fail_op","qualname":"::StencilFaceState::depth_fail_op","value":"StencilOperation","parent":{"krate":0,"index":1914},"children":[],"decl_id":null,"docs":" Operation that is performed when depth test fails but stencil test succeeds.\n","sig":null,"attributes":[{"value":"/ Operation that is performed when depth test fails but stencil test succeeds.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":105814,"byte_end":105894,"line_start":2319,"line_end":2319,"column_start":5,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":1918},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":106007,"byte_end":106014,"line_start":2322,"line_end":2322,"column_start":9,"column_end":16},"name":"pass_op","qualname":"::StencilFaceState::pass_op","value":"StencilOperation","parent":{"krate":0,"index":1914},"children":[],"decl_id":null,"docs":" Operation that is performed when stencil test success.\n","sig":null,"attributes":[{"value":"/ Operation that is performed when stencil test success.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":105940,"byte_end":105998,"line_start":2321,"line_end":2321,"column_start":5,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":98},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":106122,"byte_end":106128,"line_start":2327,"line_end":2327,"column_start":15,"column_end":21},"name":"IGNORE","qualname":"::StencilFaceState::IGNORE","value":"Self","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Ignore the stencil state for the face.\n","sig":null,"attributes":[{"value":"/ Ignore the stencil state for the face.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":106065,"byte_end":106107,"line_start":2326,"line_end":2326,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":106436,"byte_end":106451,"line_start":2335,"line_end":2335,"column_start":12,"column_end":27},"name":"needs_ref_value","qualname":"<StencilFaceState>::needs_ref_value","value":"pub fn needs_ref_value(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the face state uses the reference value for testing or operation.\n","sig":null,"attributes":[{"value":"/ Returns true if the face state uses the reference value for testing or operation.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":106339,"byte_end":106424,"line_start":2334,"line_end":2334,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1935},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107141,"byte_end":107146,"line_start":2357,"line_end":2357,"column_start":5,"column_end":10},"name":"Never","qualname":"::CompareFunction::Never","value":"CompareFunction::Never","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" Function never passes\n","sig":null,"attributes":[{"value":"/ Function never passes","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107111,"byte_end":107136,"line_start":2356,"line_end":2356,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1938},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107218,"byte_end":107222,"line_start":2359,"line_end":2359,"column_start":5,"column_end":9},"name":"Less","qualname":"::CompareFunction::Less","value":"CompareFunction::Less","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" Function passes if new value less than existing value\n","sig":null,"attributes":[{"value":"/ Function passes if new value less than existing value","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107156,"byte_end":107213,"line_start":2358,"line_end":2358,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1941},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107296,"byte_end":107301,"line_start":2361,"line_end":2361,"column_start":5,"column_end":10},"name":"Equal","qualname":"::CompareFunction::Equal","value":"CompareFunction::Equal","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" Function passes if new value is equal to existing value\n","sig":null,"attributes":[{"value":"/ Function passes if new value is equal to existing value","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107232,"byte_end":107291,"line_start":2360,"line_end":2360,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1944},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107388,"byte_end":107397,"line_start":2363,"line_end":2363,"column_start":5,"column_end":14},"name":"LessEqual","qualname":"::CompareFunction::LessEqual","value":"CompareFunction::LessEqual","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" Function passes if new value is less than or equal to existing value\n","sig":null,"attributes":[{"value":"/ Function passes if new value is less than or equal to existing value","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107311,"byte_end":107383,"line_start":2362,"line_end":2362,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1947},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107475,"byte_end":107482,"line_start":2365,"line_end":2365,"column_start":5,"column_end":12},"name":"Greater","qualname":"::CompareFunction::Greater","value":"CompareFunction::Greater","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" Function passes if new value is greater than existing value\n","sig":null,"attributes":[{"value":"/ Function passes if new value is greater than existing value","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107407,"byte_end":107470,"line_start":2364,"line_end":2364,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1950},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107560,"byte_end":107568,"line_start":2367,"line_end":2367,"column_start":5,"column_end":13},"name":"NotEqual","qualname":"::CompareFunction::NotEqual","value":"CompareFunction::NotEqual","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" Function passes if new value is not equal to existing value\n","sig":null,"attributes":[{"value":"/ Function passes if new value is not equal to existing value","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107492,"byte_end":107555,"line_start":2366,"line_end":2366,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1953},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107658,"byte_end":107670,"line_start":2369,"line_end":2369,"column_start":5,"column_end":17},"name":"GreaterEqual","qualname":"::CompareFunction::GreaterEqual","value":"CompareFunction::GreaterEqual","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" Function passes if new value is greater than or equal to existing value\n","sig":null,"attributes":[{"value":"/ Function passes if new value is greater than or equal to existing value","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107578,"byte_end":107653,"line_start":2368,"line_end":2368,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1956},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107711,"byte_end":107717,"line_start":2371,"line_end":2371,"column_start":5,"column_end":11},"name":"Always","qualname":"::CompareFunction::Always","value":"CompareFunction::Always","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":" Function always passes\n","sig":null,"attributes":[{"value":"/ Function always passes","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107680,"byte_end":107706,"line_start":2370,"line_end":2370,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":1934},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107089,"byte_end":107104,"line_start":2355,"line_end":2355,"column_start":10,"column_end":25},"name":"CompareFunction","qualname":"::CompareFunction","value":"pub enum CompareFunction {\n    Never = ,\n    Less = ,\n    Equal = ,\n    LessEqual = ,\n    Greater = ,\n    NotEqual = ,\n    GreaterEqual = ,\n    Always = ,\n}","parent":null,"children":[{"krate":0,"index":1935},{"krate":0,"index":1938},{"krate":0,"index":1941},{"krate":0,"index":1944},{"krate":0,"index":1947},{"krate":0,"index":1950},{"krate":0,"index":1953},{"krate":0,"index":1956}],"decl_id":null,"docs":" Comparison function used for depth and stencil operations.\n","sig":null,"attributes":[{"value":"/ Comparison function used for depth and stencil operations.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":106787,"byte_end":106849,"line_start":2349,"line_end":2349,"column_start":1,"column_end":63}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":106850,"byte_end":106860,"line_start":2350,"line_end":2350,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107831,"byte_end":107846,"line_start":2376,"line_end":2376,"column_start":12,"column_end":27},"name":"needs_ref_value","qualname":"<CompareFunction>::needs_ref_value","value":"pub fn needs_ref_value(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the comparison depends on the reference value.\n","sig":null,"attributes":[{"value":"/ Returns true if the comparison depends on the reference value.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107753,"byte_end":107819,"line_start":2375,"line_end":2375,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1974},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":108336,"byte_end":108342,"line_start":2392,"line_end":2392,"column_start":5,"column_end":11},"name":"Vertex","qualname":"::VertexStepMode::Vertex","value":"VertexStepMode::Vertex","parent":{"krate":0,"index":1973},"children":[],"decl_id":null,"docs":" Vertex data is advanced every vertex.\n","sig":null,"attributes":[{"value":"/ Vertex data is advanced every vertex.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":108290,"byte_end":108331,"line_start":2391,"line_end":2391,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1977},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":108400,"byte_end":108408,"line_start":2394,"line_end":2394,"column_start":5,"column_end":13},"name":"Instance","qualname":"::VertexStepMode::Instance","value":"VertexStepMode::Instance","parent":{"krate":0,"index":1973},"children":[],"decl_id":null,"docs":" Vertex data is advanced every instance.\n","sig":null,"attributes":[{"value":"/ Vertex data is advanced every instance.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":108352,"byte_end":108395,"line_start":2393,"line_end":2393,"column_start":5,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":1973},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":108269,"byte_end":108283,"line_start":2390,"line_end":2390,"column_start":10,"column_end":24},"name":"VertexStepMode","qualname":"::VertexStepMode","value":"pub enum VertexStepMode { Vertex = , Instance = , }","parent":null,"children":[{"krate":0,"index":1974},{"krate":0,"index":1977}],"decl_id":null,"docs":" Rate that determines when vertex data is advanced.\n","sig":null,"attributes":[{"value":"/ Rate that determines when vertex data is advanced.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107975,"byte_end":108029,"line_start":2384,"line_end":2384,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":108030,"byte_end":108040,"line_start":2385,"line_end":2385,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1994},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":108927,"byte_end":108942,"line_start":2411,"line_end":2411,"column_start":12,"column_end":27},"name":"VertexAttribute","qualname":"::VertexAttribute","value":"VertexAttribute { format, offset, shader_location }","parent":null,"children":[{"krate":0,"index":1995},{"krate":0,"index":1996},{"krate":0,"index":1997}],"decl_id":null,"docs":" Vertex inputs (attributes) to shaders.","sig":null,"attributes":[{"value":"/ Vertex inputs (attributes) to shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":108518,"byte_end":108560,"line_start":2403,"line_end":2403,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":108561,"byte_end":108564,"line_start":2404,"line_end":2404,"column_start":1,"column_end":4}},{"value":"/ Arrays of these can be made with the [`vertex_attr_array`] macro. Vertex attributes are assumed to be tightly packed.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":108565,"byte_end":108686,"line_start":2405,"line_end":2405,"column_start":1,"column_end":122}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":108687,"byte_end":108697,"line_start":2406,"line_end":2406,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1995},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":108981,"byte_end":108987,"line_start":2413,"line_end":2413,"column_start":9,"column_end":15},"name":"format","qualname":"::VertexAttribute::format","value":"VertexFormat","parent":{"krate":0,"index":1994},"children":[],"decl_id":null,"docs":" Format of the input\n","sig":null,"attributes":[{"value":"/ Format of the input","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":108949,"byte_end":108972,"line_start":2412,"line_end":2412,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":1996},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109057,"byte_end":109063,"line_start":2415,"line_end":2415,"column_start":9,"column_end":15},"name":"offset","qualname":"::VertexAttribute::offset","value":"u64","parent":{"krate":0,"index":1994},"children":[],"decl_id":null,"docs":" Byte offset of the start of the input\n","sig":null,"attributes":[{"value":"/ Byte offset of the start of the input","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109007,"byte_end":109048,"line_start":2414,"line_end":2414,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":1997},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109160,"byte_end":109175,"line_start":2417,"line_end":2417,"column_start":9,"column_end":24},"name":"shader_location","qualname":"::VertexAttribute::shader_location","value":"u32","parent":{"krate":0,"index":1994},"children":[],"decl_id":null,"docs":" Location for this input. Must match the location in the shader.\n","sig":null,"attributes":[{"value":"/ Location for this input. Must match the location in the shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109084,"byte_end":109151,"line_start":2416,"line_end":2416,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2014},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109556,"byte_end":109563,"line_start":2428,"line_end":2428,"column_start":5,"column_end":12},"name":"Uint8x2","qualname":"::VertexFormat::Uint8x2","value":"VertexFormat::Uint8x2","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Two unsigned bytes (u8). `uvec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two unsigned bytes (u8). `uvec2` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109503,"byte_end":109551,"line_start":2427,"line_end":2427,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2017},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109627,"byte_end":109634,"line_start":2430,"line_end":2430,"column_start":5,"column_end":12},"name":"Uint8x4","qualname":"::VertexFormat::Uint8x4","value":"VertexFormat::Uint8x4","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Four unsigned bytes (u8). `uvec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four unsigned bytes (u8). `uvec4` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109573,"byte_end":109622,"line_start":2429,"line_end":2429,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2020},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109695,"byte_end":109702,"line_start":2432,"line_end":2432,"column_start":5,"column_end":12},"name":"Sint8x2","qualname":"::VertexFormat::Sint8x2","value":"VertexFormat::Sint8x2","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Two signed bytes (i8). `ivec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two signed bytes (i8). `ivec2` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109644,"byte_end":109690,"line_start":2431,"line_end":2431,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2023},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109764,"byte_end":109771,"line_start":2434,"line_end":2434,"column_start":5,"column_end":12},"name":"Sint8x4","qualname":"::VertexFormat::Sint8x4","value":"VertexFormat::Sint8x4","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Four signed bytes (i8). `ivec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four signed bytes (i8). `ivec4` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109712,"byte_end":109759,"line_start":2433,"line_end":2433,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2026},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109868,"byte_end":109876,"line_start":2436,"line_end":2436,"column_start":5,"column_end":13},"name":"Unorm8x2","qualname":"::VertexFormat::Unorm8x2","value":"VertexFormat::Unorm8x2","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Two unsigned bytes (u8). [0, 255] converted to float [0, 1] `vec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two unsigned bytes (u8). [0, 255] converted to float [0, 1] `vec2` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109781,"byte_end":109863,"line_start":2435,"line_end":2435,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2029},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109974,"byte_end":109982,"line_start":2438,"line_end":2438,"column_start":5,"column_end":13},"name":"Unorm8x4","qualname":"::VertexFormat::Unorm8x4","value":"VertexFormat::Unorm8x4","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Four unsigned bytes (u8). [0, 255] converted to float [0, 1] `vec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four unsigned bytes (u8). [0, 255] converted to float [0, 1] `vec4` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109886,"byte_end":109969,"line_start":2437,"line_end":2437,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2032},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110081,"byte_end":110089,"line_start":2440,"line_end":2440,"column_start":5,"column_end":13},"name":"Snorm8x2","qualname":"::VertexFormat::Snorm8x2","value":"VertexFormat::Snorm8x2","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Two signed bytes (i8). [-127, 127] converted to float [-1, 1] `vec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two signed bytes (i8). [-127, 127] converted to float [-1, 1] `vec2` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109992,"byte_end":110076,"line_start":2439,"line_end":2439,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2035},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110189,"byte_end":110197,"line_start":2442,"line_end":2442,"column_start":5,"column_end":13},"name":"Snorm8x4","qualname":"::VertexFormat::Snorm8x4","value":"VertexFormat::Snorm8x4","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Four signed bytes (i8). [-127, 127] converted to float [-1, 1] `vec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four signed bytes (i8). [-127, 127] converted to float [-1, 1] `vec4` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110099,"byte_end":110184,"line_start":2441,"line_end":2441,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2038},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110262,"byte_end":110270,"line_start":2444,"line_end":2444,"column_start":5,"column_end":13},"name":"Uint16x2","qualname":"::VertexFormat::Uint16x2","value":"VertexFormat::Uint16x2","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Two unsigned shorts (u16). `uvec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two unsigned shorts (u16). `uvec2` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110207,"byte_end":110257,"line_start":2443,"line_end":2443,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2041},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110336,"byte_end":110344,"line_start":2446,"line_end":2446,"column_start":5,"column_end":13},"name":"Uint16x4","qualname":"::VertexFormat::Uint16x4","value":"VertexFormat::Uint16x4","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Four unsigned shorts (u16). `uvec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four unsigned shorts (u16). `uvec4` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110280,"byte_end":110331,"line_start":2445,"line_end":2445,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2044},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110407,"byte_end":110415,"line_start":2448,"line_end":2448,"column_start":5,"column_end":13},"name":"Sint16x2","qualname":"::VertexFormat::Sint16x2","value":"VertexFormat::Sint16x2","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Two signed shorts (i16). `ivec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two signed shorts (i16). `ivec2` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110354,"byte_end":110402,"line_start":2447,"line_end":2447,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2047},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110480,"byte_end":110488,"line_start":2450,"line_end":2450,"column_start":5,"column_end":13},"name":"Sint16x4","qualname":"::VertexFormat::Sint16x4","value":"VertexFormat::Sint16x4","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Four signed shorts (i16). `ivec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four signed shorts (i16). `ivec4` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110426,"byte_end":110475,"line_start":2449,"line_end":2449,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2050},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110590,"byte_end":110599,"line_start":2452,"line_end":2452,"column_start":5,"column_end":14},"name":"Unorm16x2","qualname":"::VertexFormat::Unorm16x2","value":"VertexFormat::Unorm16x2","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Two unsigned shorts (u16). [0, 65535] converted to float [0, 1] `vec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two unsigned shorts (u16). [0, 65535] converted to float [0, 1] `vec2` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110499,"byte_end":110585,"line_start":2451,"line_end":2451,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2053},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110702,"byte_end":110711,"line_start":2454,"line_end":2454,"column_start":5,"column_end":14},"name":"Unorm16x4","qualname":"::VertexFormat::Unorm16x4","value":"VertexFormat::Unorm16x4","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Four unsigned shorts (u16). [0, 65535] converted to float [0, 1] `vec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four unsigned shorts (u16). [0, 65535] converted to float [0, 1] `vec4` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110610,"byte_end":110697,"line_start":2453,"line_end":2453,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2056},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110817,"byte_end":110826,"line_start":2456,"line_end":2456,"column_start":5,"column_end":14},"name":"Snorm16x2","qualname":"::VertexFormat::Snorm16x2","value":"VertexFormat::Snorm16x2","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Two signed shorts (i16). [-32767, 32767] converted to float [-1, 1] `vec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two signed shorts (i16). [-32767, 32767] converted to float [-1, 1] `vec2` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110722,"byte_end":110812,"line_start":2455,"line_end":2455,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2059},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110933,"byte_end":110942,"line_start":2458,"line_end":2458,"column_start":5,"column_end":14},"name":"Snorm16x4","qualname":"::VertexFormat::Snorm16x4","value":"VertexFormat::Snorm16x4","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Four signed shorts (i16). [-32767, 32767] converted to float [-1, 1] `vec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four signed shorts (i16). [-32767, 32767] converted to float [-1, 1] `vec4` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110837,"byte_end":110928,"line_start":2457,"line_end":2457,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2062},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111023,"byte_end":111032,"line_start":2460,"line_end":2460,"column_start":5,"column_end":14},"name":"Float16x2","qualname":"::VertexFormat::Float16x2","value":"VertexFormat::Float16x2","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Two half-precision floats (no Rust equiv). `vec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two half-precision floats (no Rust equiv). `vec2` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":110953,"byte_end":111018,"line_start":2459,"line_end":2459,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2065},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111114,"byte_end":111123,"line_start":2462,"line_end":2462,"column_start":5,"column_end":14},"name":"Float16x4","qualname":"::VertexFormat::Float16x4","value":"VertexFormat::Float16x4","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Four half-precision floats (no Rust equiv). `vec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four half-precision floats (no Rust equiv). `vec4` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111043,"byte_end":111109,"line_start":2461,"line_end":2461,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2068},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111196,"byte_end":111203,"line_start":2464,"line_end":2464,"column_start":5,"column_end":12},"name":"Float32","qualname":"::VertexFormat::Float32","value":"VertexFormat::Float32","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" One single-precision float (f32). `float` in shaders.\n","sig":null,"attributes":[{"value":"/ One single-precision float (f32). `float` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111134,"byte_end":111191,"line_start":2463,"line_end":2463,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2071},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111276,"byte_end":111285,"line_start":2466,"line_end":2466,"column_start":5,"column_end":14},"name":"Float32x2","qualname":"::VertexFormat::Float32x2","value":"VertexFormat::Float32x2","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Two single-precision floats (f32). `vec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two single-precision floats (f32). `vec2` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111214,"byte_end":111271,"line_start":2465,"line_end":2465,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2074},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111360,"byte_end":111369,"line_start":2468,"line_end":2468,"column_start":5,"column_end":14},"name":"Float32x3","qualname":"::VertexFormat::Float32x3","value":"VertexFormat::Float32x3","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Three single-precision floats (f32). `vec3` in shaders.\n","sig":null,"attributes":[{"value":"/ Three single-precision floats (f32). `vec3` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111296,"byte_end":111355,"line_start":2467,"line_end":2467,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2077},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111443,"byte_end":111452,"line_start":2470,"line_end":2470,"column_start":5,"column_end":14},"name":"Float32x4","qualname":"::VertexFormat::Float32x4","value":"VertexFormat::Float32x4","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Four single-precision floats (f32). `vec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four single-precision floats (f32). `vec4` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111380,"byte_end":111438,"line_start":2469,"line_end":2469,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2080},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111514,"byte_end":111520,"line_start":2472,"line_end":2472,"column_start":5,"column_end":11},"name":"Uint32","qualname":"::VertexFormat::Uint32","value":"VertexFormat::Uint32","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" One unsigned int (u32). `uint` in shaders.\n","sig":null,"attributes":[{"value":"/ One unsigned int (u32). `uint` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111463,"byte_end":111509,"line_start":2471,"line_end":2471,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2083},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111584,"byte_end":111592,"line_start":2474,"line_end":2474,"column_start":5,"column_end":13},"name":"Uint32x2","qualname":"::VertexFormat::Uint32x2","value":"VertexFormat::Uint32x2","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Two unsigned ints (u32). `uvec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two unsigned ints (u32). `uvec2` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111531,"byte_end":111579,"line_start":2473,"line_end":2473,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2086},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111658,"byte_end":111666,"line_start":2476,"line_end":2476,"column_start":5,"column_end":13},"name":"Uint32x3","qualname":"::VertexFormat::Uint32x3","value":"VertexFormat::Uint32x3","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Three unsigned ints (u32). `uvec3` in shaders.\n","sig":null,"attributes":[{"value":"/ Three unsigned ints (u32). `uvec3` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111603,"byte_end":111653,"line_start":2475,"line_end":2475,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2089},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111731,"byte_end":111739,"line_start":2478,"line_end":2478,"column_start":5,"column_end":13},"name":"Uint32x4","qualname":"::VertexFormat::Uint32x4","value":"VertexFormat::Uint32x4","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Four unsigned ints (u32). `uvec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four unsigned ints (u32). `uvec4` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111677,"byte_end":111726,"line_start":2477,"line_end":2477,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2092},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111798,"byte_end":111804,"line_start":2480,"line_end":2480,"column_start":5,"column_end":11},"name":"Sint32","qualname":"::VertexFormat::Sint32","value":"VertexFormat::Sint32","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" One signed int (i32). `int` in shaders.\n","sig":null,"attributes":[{"value":"/ One signed int (i32). `int` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111750,"byte_end":111793,"line_start":2479,"line_end":2479,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2095},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111866,"byte_end":111874,"line_start":2482,"line_end":2482,"column_start":5,"column_end":13},"name":"Sint32x2","qualname":"::VertexFormat::Sint32x2","value":"VertexFormat::Sint32x2","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Two signed ints (i32). `ivec2` in shaders.\n","sig":null,"attributes":[{"value":"/ Two signed ints (i32). `ivec2` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111815,"byte_end":111861,"line_start":2481,"line_end":2481,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2098},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111938,"byte_end":111946,"line_start":2484,"line_end":2484,"column_start":5,"column_end":13},"name":"Sint32x3","qualname":"::VertexFormat::Sint32x3","value":"VertexFormat::Sint32x3","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Three signed ints (i32). `ivec3` in shaders.\n","sig":null,"attributes":[{"value":"/ Three signed ints (i32). `ivec3` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111885,"byte_end":111933,"line_start":2483,"line_end":2483,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2101},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":112009,"byte_end":112017,"line_start":2486,"line_end":2486,"column_start":5,"column_end":13},"name":"Sint32x4","qualname":"::VertexFormat::Sint32x4","value":"VertexFormat::Sint32x4","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Four signed ints (i32). `ivec4` in shaders.\n","sig":null,"attributes":[{"value":"/ Four signed ints (i32). `ivec4` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":111957,"byte_end":112004,"line_start":2485,"line_end":2485,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2104},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":112133,"byte_end":112140,"line_start":2488,"line_end":2488,"column_start":5,"column_end":12},"name":"Float64","qualname":"::VertexFormat::Float64","value":"VertexFormat::Float64","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" One double-precision float (f64). `double` in shaders. Requires VERTEX_ATTRIBUTE_64BIT features.\n","sig":null,"attributes":[{"value":"/ One double-precision float (f64). `double` in shaders. Requires VERTEX_ATTRIBUTE_64BIT features.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":112028,"byte_end":112128,"line_start":2487,"line_end":2487,"column_start":5,"column_end":105}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2107},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":112256,"byte_end":112265,"line_start":2490,"line_end":2490,"column_start":5,"column_end":14},"name":"Float64x2","qualname":"::VertexFormat::Float64x2","value":"VertexFormat::Float64x2","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Two double-precision floats (f64). `dvec2` in shaders. Requires VERTEX_ATTRIBUTE_64BIT features.\n","sig":null,"attributes":[{"value":"/ Two double-precision floats (f64). `dvec2` in shaders. Requires VERTEX_ATTRIBUTE_64BIT features.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":112151,"byte_end":112251,"line_start":2489,"line_end":2489,"column_start":5,"column_end":105}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2110},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":112383,"byte_end":112392,"line_start":2492,"line_end":2492,"column_start":5,"column_end":14},"name":"Float64x3","qualname":"::VertexFormat::Float64x3","value":"VertexFormat::Float64x3","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Three double-precision floats (f64). `dvec3` in shaders. Requires VERTEX_ATTRIBUTE_64BIT features.\n","sig":null,"attributes":[{"value":"/ Three double-precision floats (f64). `dvec3` in shaders. Requires VERTEX_ATTRIBUTE_64BIT features.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":112276,"byte_end":112378,"line_start":2491,"line_end":2491,"column_start":5,"column_end":107}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2113},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":112509,"byte_end":112518,"line_start":2494,"line_end":2494,"column_start":5,"column_end":14},"name":"Float64x4","qualname":"::VertexFormat::Float64x4","value":"VertexFormat::Float64x4","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Four double-precision floats (f64). `dvec4` in shaders. Requires VERTEX_ATTRIBUTE_64BIT features.\n","sig":null,"attributes":[{"value":"/ Four double-precision floats (f64). `dvec4` in shaders. Requires VERTEX_ATTRIBUTE_64BIT features.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":112403,"byte_end":112504,"line_start":2493,"line_end":2493,"column_start":5,"column_end":106}}]},{"kind":"Enum","id":{"krate":0,"index":2013},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109484,"byte_end":109496,"line_start":2426,"line_end":2426,"column_start":10,"column_end":22},"name":"VertexFormat","qualname":"::VertexFormat","value":"pub enum VertexFormat {\n    Uint8x2 = ,\n    Uint8x4 = ,\n    Sint8x2 = ,\n    Sint8x4 = ,\n    Unorm8x2 = ,\n    Unorm8x4 = ,\n    Snorm8x2 = ,\n    Snorm8x4 = ,\n    Uint16x2 = ,\n    Uint16x4 = ,\n    Sint16x2 = ,\n    Sint16x4 = ,\n    Unorm16x2 = ,\n    Unorm16x4 = ,\n    Snorm16x2 = ,\n    Snorm16x4 = ,\n    Float16x2 = ,\n    Float16x4 = ,\n    Float32 = ,\n    Float32x2 = ,\n    Float32x3 = ,\n    Float32x4 = ,\n    Uint32 = ,\n    Uint32x2 = ,\n    Uint32x3 = ,\n    Uint32x4 = ,\n    Sint32 = ,\n    Sint32x2 = ,\n    Sint32x3 = ,\n    Sint32x4 = ,\n    Float64 = ,\n    Float64x2 = ,\n    Float64x3 = ,\n    Float64x4 = ,\n}","parent":null,"children":[{"krate":0,"index":2014},{"krate":0,"index":2017},{"krate":0,"index":2020},{"krate":0,"index":2023},{"krate":0,"index":2026},{"krate":0,"index":2029},{"krate":0,"index":2032},{"krate":0,"index":2035},{"krate":0,"index":2038},{"krate":0,"index":2041},{"krate":0,"index":2044},{"krate":0,"index":2047},{"krate":0,"index":2050},{"krate":0,"index":2053},{"krate":0,"index":2056},{"krate":0,"index":2059},{"krate":0,"index":2062},{"krate":0,"index":2065},{"krate":0,"index":2068},{"krate":0,"index":2071},{"krate":0,"index":2074},{"krate":0,"index":2077},{"krate":0,"index":2080},{"krate":0,"index":2083},{"krate":0,"index":2086},{"krate":0,"index":2089},{"krate":0,"index":2092},{"krate":0,"index":2095},{"krate":0,"index":2098},{"krate":0,"index":2101},{"krate":0,"index":2104},{"krate":0,"index":2107},{"krate":0,"index":2110},{"krate":0,"index":2113}],"decl_id":null,"docs":" Vertex Format for a Vertex Attribute (input).\n","sig":null,"attributes":[{"value":"/ Vertex Format for a Vertex Attribute (input).","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109196,"byte_end":109245,"line_start":2420,"line_end":2420,"column_start":1,"column_end":50}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":109246,"byte_end":109256,"line_start":2421,"line_end":2421,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":112610,"byte_end":112614,"line_start":2499,"line_end":2499,"column_start":18,"column_end":22},"name":"size","qualname":"<VertexFormat>::size","value":"pub const fn size(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte size of the format.\n","sig":null,"attributes":[{"value":"/ Returns the byte size of the format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":112552,"byte_end":112592,"line_start":2498,"line_end":2498,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":2130},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":113845,"byte_end":113857,"line_start":2537,"line_end":2537,"column_start":16,"column_end":28},"name":"BufferUsages","qualname":"::BufferUsages","value":"BufferUsages {  }","parent":null,"children":[{"krate":0,"index":2131}],"decl_id":null,"docs":" Different ways that you can use a buffer.","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs","byte_start":9986302,"byte_end":9986311,"line_start":362,"line_end":362,"column_start":11,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":2171},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":114239,"byte_end":114247,"line_start":2543,"line_end":2543,"column_start":15,"column_end":23},"name":"MAP_READ","qualname":"::BufferUsages::MAP_READ","value":"Self","parent":{"krate":0,"index":2170},"children":[],"decl_id":null,"docs":" Allow a buffer to be mapped for reading using [`Buffer::map_async`] + [`Buffer::get_mapped_range`].\n This does not include creating a buffer with [`BufferDescriptor::mapped_at_creation`] set.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2172},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":114624,"byte_end":114633,"line_start":2549,"line_end":2549,"column_start":15,"column_end":24},"name":"MAP_WRITE","qualname":"::BufferUsages::MAP_WRITE","value":"Self","parent":{"krate":0,"index":2170},"children":[],"decl_id":null,"docs":" Allow a buffer to be mapped for writing using [`Buffer::map_async`] + [`Buffer::get_mapped_range_mut`].\n This does not include creating a buffer with `mapped_at_creation` set.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2173},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":114826,"byte_end":114834,"line_start":2552,"line_end":2552,"column_start":15,"column_end":23},"name":"COPY_SRC","qualname":"::BufferUsages::COPY_SRC","value":"Self","parent":{"krate":0,"index":2170},"children":[],"decl_id":null,"docs":" Allow a buffer to be the source buffer for a [`CommandEncoder::copy_buffer_to_buffer`] or [`CommandEncoder::copy_buffer_to_texture`]\n operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2174},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":115091,"byte_end":115099,"line_start":2555,"line_end":2555,"column_start":15,"column_end":23},"name":"COPY_DST","qualname":"::BufferUsages::COPY_DST","value":"Self","parent":{"krate":0,"index":2170},"children":[],"decl_id":null,"docs":" Allow a buffer to be the destination buffer for a [`CommandEncoder::copy_buffer_to_buffer`], [`CommandEncoder::copy_texture_to_buffer`],\n [`CommandEncoder::clear_buffer`] or [`Queue::write_buffer`] operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2175},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":115195,"byte_end":115200,"line_start":2557,"line_end":2557,"column_start":15,"column_end":20},"name":"INDEX","qualname":"::BufferUsages::INDEX","value":"Self","parent":{"krate":0,"index":2170},"children":[],"decl_id":null,"docs":" Allow a buffer to be the index buffer in a draw operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2176},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":115297,"byte_end":115303,"line_start":2559,"line_end":2559,"column_start":15,"column_end":21},"name":"VERTEX","qualname":"::BufferUsages::VERTEX","value":"Self","parent":{"krate":0,"index":2170},"children":[],"decl_id":null,"docs":" Allow a buffer to be the vertex buffer in a draw operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2177},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":115415,"byte_end":115422,"line_start":2561,"line_end":2561,"column_start":15,"column_end":22},"name":"UNIFORM","qualname":"::BufferUsages::UNIFORM","value":"Self","parent":{"krate":0,"index":2170},"children":[],"decl_id":null,"docs":" Allow a buffer to be a [`BufferBindingType::Uniform`] inside a bind group.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2178},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":115534,"byte_end":115541,"line_start":2563,"line_end":2563,"column_start":15,"column_end":22},"name":"STORAGE","qualname":"::BufferUsages::STORAGE","value":"Self","parent":{"krate":0,"index":2170},"children":[],"decl_id":null,"docs":" Allow a buffer to be a [`BufferBindingType::Storage`] inside a bind group.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2179},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":115645,"byte_end":115653,"line_start":2565,"line_end":2565,"column_start":15,"column_end":23},"name":"INDIRECT","qualname":"::BufferUsages::INDIRECT","value":"Self","parent":{"krate":0,"index":2170},"children":[],"decl_id":null,"docs":" Allow a buffer to be the indirect buffer in an indirect draw call.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2257},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":115973,"byte_end":115989,"line_start":2577,"line_end":2577,"column_start":12,"column_end":28},"name":"BufferDescriptor","qualname":"::BufferDescriptor","value":"BufferDescriptor { label, size, usage, mapped_at_creation }","parent":null,"children":[{"krate":0,"index":2259},{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2262}],"decl_id":null,"docs":" Describes a [`Buffer`].\n","sig":null,"attributes":[{"value":"/ Describes a [`Buffer`].","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":115775,"byte_end":115802,"line_start":2572,"line_end":2572,"column_start":1,"column_end":28}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":115803,"byte_end":115813,"line_start":2573,"line_end":2573,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2259},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":116101,"byte_end":116106,"line_start":2579,"line_end":2579,"column_start":9,"column_end":14},"name":"label","qualname":"::BufferDescriptor::label","value":"L","parent":{"krate":0,"index":2257},"children":[],"decl_id":null,"docs":" Debug label of a buffer. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of a buffer. This will show up in graphics debuggers for easy identification.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":115999,"byte_end":116092,"line_start":2578,"line_end":2578,"column_start":5,"column_end":98}}]},{"kind":"Field","id":{"krate":0,"index":2260},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":116145,"byte_end":116149,"line_start":2581,"line_end":2581,"column_start":9,"column_end":13},"name":"size","qualname":"::BufferDescriptor::size","value":"u64","parent":{"krate":0,"index":2257},"children":[],"decl_id":null,"docs":" Size of a buffer.\n","sig":null,"attributes":[{"value":"/ Size of a buffer.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":116115,"byte_end":116136,"line_start":2580,"line_end":2580,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":2261},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":116296,"byte_end":116301,"line_start":2584,"line_end":2584,"column_start":9,"column_end":14},"name":"usage","qualname":"::BufferDescriptor::usage","value":"BufferUsages","parent":{"krate":0,"index":2257},"children":[],"decl_id":null,"docs":" Usages of a buffer. If the buffer is used in any way that isn't specified here, the operation\n will panic.\n","sig":null,"attributes":[{"value":"/ Usages of a buffer. If the buffer is used in any way that isn't specified here, the operation","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":116170,"byte_end":116267,"line_start":2582,"line_end":2582,"column_start":5,"column_end":102}},{"value":"/ will panic.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":116272,"byte_end":116287,"line_start":2583,"line_end":2583,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":2262},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":116535,"byte_end":116553,"line_start":2587,"line_end":2587,"column_start":9,"column_end":27},"name":"mapped_at_creation","qualname":"::BufferDescriptor::mapped_at_creation","value":"bool","parent":{"krate":0,"index":2257},"children":[],"decl_id":null,"docs":" Allows a buffer to be mapped immediately after they are made. It does not have to be [`BufferUsages::MAP_READ`] or\n [`BufferUsages::MAP_WRITE`], all buffers are allowed to be mapped at creation.\n","sig":null,"attributes":[{"value":"/ Allows a buffer to be mapped immediately after they are made. It does not have to be [`BufferUsages::MAP_READ`] or","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":116321,"byte_end":116439,"line_start":2585,"line_end":2585,"column_start":5,"column_end":123}},{"value":"/ [`BufferUsages::MAP_WRITE`], all buffers are allowed to be mapped at creation.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":116444,"byte_end":116526,"line_start":2586,"line_end":2586,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":116613,"byte_end":116622,"line_start":2592,"line_end":2592,"column_start":12,"column_end":21},"name":"map_label","qualname":"<BufferDescriptor<L>>::map_label","value":"pub fn map_label<K, impl FnOnce(&L) -> K: FnOnce(&L) ->\n                 K>(&Self, impl FnOnce(&L) -> K) -> BufferDescriptor<K>","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":116598,"byte_end":116601,"line_start":2591,"line_end":2591,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2284},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":117091,"byte_end":117115,"line_start":2607,"line_end":2607,"column_start":12,"column_end":36},"name":"CommandEncoderDescriptor","qualname":"::CommandEncoderDescriptor","value":"CommandEncoderDescriptor { label }","parent":null,"children":[{"krate":0,"index":2286}],"decl_id":null,"docs":" Describes a [`CommandEncoder`].\n","sig":null,"attributes":[{"value":"/ Describes a [`CommandEncoder`].","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":116885,"byte_end":116920,"line_start":2602,"line_end":2602,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":116921,"byte_end":116931,"line_start":2603,"line_end":2603,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2286},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":117239,"byte_end":117244,"line_start":2609,"line_end":2609,"column_start":9,"column_end":14},"name":"label","qualname":"::CommandEncoderDescriptor::label","value":"L","parent":{"krate":0,"index":2284},"children":[],"decl_id":null,"docs":" Debug label for the command encoder. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label for the command encoder. This will show up in graphics debuggers for easy identification.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":117125,"byte_end":117230,"line_start":2608,"line_end":2608,"column_start":5,"column_end":110}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":117309,"byte_end":117318,"line_start":2614,"line_end":2614,"column_start":12,"column_end":21},"name":"map_label","qualname":"<CommandEncoderDescriptor<L>>::map_label","value":"pub fn map_label<K, impl FnOnce(&L) -> K: FnOnce(&L) ->\n                 K>(&Self, impl FnOnce(&L) -> K)\n-> CommandEncoderDescriptor<K>","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":117294,"byte_end":117297,"line_start":2613,"line_end":2613,"column_start":5,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2309},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":118183,"byte_end":118192,"line_start":2637,"line_end":2637,"column_start":5,"column_end":14},"name":"Immediate","qualname":"::PresentMode::Immediate","value":"PresentMode::Immediate","parent":{"krate":0,"index":2308},"children":[],"decl_id":null,"docs":" The presentation engine does **not** wait for a vertical blanking period and\n the request is presented immediately. This is a low-latency presentation mode,\n but visible tearing may be observed. Will fallback to `Fifo` if unavailable on the\n selected  platform and backend. Not optimal for mobile.\n","sig":null,"attributes":[{"value":"/ The presentation engine does **not** wait for a vertical blanking period and","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":117856,"byte_end":117936,"line_start":2633,"line_end":2633,"column_start":5,"column_end":85}},{"value":"/ the request is presented immediately. This is a low-latency presentation mode,","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":117941,"byte_end":118023,"line_start":2634,"line_end":2634,"column_start":5,"column_end":87}},{"value":"/ but visible tearing may be observed. Will fallback to `Fifo` if unavailable on the","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":118028,"byte_end":118114,"line_start":2635,"line_end":2635,"column_start":5,"column_end":91}},{"value":"/ selected  platform and backend. Not optimal for mobile.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":118119,"byte_end":118178,"line_start":2636,"line_end":2636,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2312},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":118561,"byte_end":118568,"line_start":2642,"line_end":2642,"column_start":5,"column_end":12},"name":"Mailbox","qualname":"::PresentMode::Mailbox","value":"PresentMode::Mailbox","parent":{"krate":0,"index":2308},"children":[],"decl_id":null,"docs":" The presentation engine waits for the next vertical blanking period to update\n the current image, but frames may be submitted without delay. This is a low-latency\n presentation mode and visible tearing will **not** be observed. Will fallback to `Fifo`\n if unavailable on the selected platform and backend. Not optimal for mobile.\n","sig":null,"attributes":[{"value":"/ The presentation engine waits for the next vertical blanking period to update","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":118202,"byte_end":118283,"line_start":2638,"line_end":2638,"column_start":5,"column_end":86}},{"value":"/ the current image, but frames may be submitted without delay. This is a low-latency","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":118288,"byte_end":118375,"line_start":2639,"line_end":2639,"column_start":5,"column_end":92}},{"value":"/ presentation mode and visible tearing will **not** be observed. Will fallback to `Fifo`","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":118380,"byte_end":118471,"line_start":2640,"line_end":2640,"column_start":5,"column_end":96}},{"value":"/ if unavailable on the selected platform and backend. Not optimal for mobile.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":118476,"byte_end":118556,"line_start":2641,"line_end":2641,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2315},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":118835,"byte_end":118839,"line_start":2646,"line_end":2646,"column_start":5,"column_end":9},"name":"Fifo","qualname":"::PresentMode::Fifo","value":"PresentMode::Fifo","parent":{"krate":0,"index":2308},"children":[],"decl_id":null,"docs":" The presentation engine waits for the next vertical blanking period to update\n the current image. The framerate will be capped at the display refresh rate,\n corresponding to the `VSync`. Tearing cannot be observed. Optimal for mobile.\n","sig":null,"attributes":[{"value":"/ The presentation engine waits for the next vertical blanking period to update","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":118578,"byte_end":118659,"line_start":2643,"line_end":2643,"column_start":5,"column_end":86}},{"value":"/ the current image. The framerate will be capped at the display refresh rate,","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":118664,"byte_end":118744,"line_start":2644,"line_end":2644,"column_start":5,"column_end":85}},{"value":"/ corresponding to the `VSync`. Tearing cannot be observed. Optimal for mobile.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":118749,"byte_end":118830,"line_start":2645,"line_end":2645,"column_start":5,"column_end":86}}]},{"kind":"Enum","id":{"krate":0,"index":2308},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":117838,"byte_end":117849,"line_start":2632,"line_end":2632,"column_start":10,"column_end":21},"name":"PresentMode","qualname":"::PresentMode","value":"pub enum PresentMode { Immediate = , Mailbox = , Fifo = , }","parent":null,"children":[{"krate":0,"index":2309},{"krate":0,"index":2312},{"krate":0,"index":2315}],"decl_id":null,"docs":" Behavior of the presentation engine based on frame rate.\n","sig":null,"attributes":[{"value":"/ Behavior of the presentation engine based on frame rate.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":117603,"byte_end":117663,"line_start":2627,"line_end":2627,"column_start":1,"column_end":61}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":117664,"byte_end":117674,"line_start":2628,"line_end":2628,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":2332},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":119101,"byte_end":119114,"line_start":2655,"line_end":2655,"column_start":16,"column_end":29},"name":"TextureUsages","qualname":"::TextureUsages","value":"TextureUsages {  }","parent":null,"children":[{"krate":0,"index":2333}],"decl_id":null,"docs":" Different ways that you can use a texture.","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs","byte_start":9986302,"byte_end":9986311,"line_start":362,"line_end":362,"column_start":11,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":2369},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":119300,"byte_end":119308,"line_start":2658,"line_end":2658,"column_start":15,"column_end":23},"name":"COPY_SRC","qualname":"::TextureUsages::COPY_SRC","value":"Self","parent":{"krate":0,"index":2368},"children":[],"decl_id":null,"docs":" Allows a texture to be the source in a [`CommandEncoder::copy_texture_to_buffer`] or\n [`CommandEncoder::copy_texture_to_texture`] operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2370},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":119530,"byte_end":119538,"line_start":2661,"line_end":2661,"column_start":15,"column_end":23},"name":"COPY_DST","qualname":"::TextureUsages::COPY_DST","value":"Self","parent":{"krate":0,"index":2368},"children":[],"decl_id":null,"docs":" Allows a texture to be the destination in a  [`CommandEncoder::copy_buffer_to_texture`],\n [`CommandEncoder::copy_texture_to_texture`], or [`Queue::write_texture`] operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2371},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":119642,"byte_end":119657,"line_start":2663,"line_end":2663,"column_start":15,"column_end":30},"name":"TEXTURE_BINDING","qualname":"::TextureUsages::TEXTURE_BINDING","value":"Self","parent":{"krate":0,"index":2368},"children":[],"decl_id":null,"docs":" Allows a texture to be a [`BindingType::Texture`] in a bind group.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2372},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":119768,"byte_end":119783,"line_start":2665,"line_end":2665,"column_start":15,"column_end":30},"name":"STORAGE_BINDING","qualname":"::TextureUsages::STORAGE_BINDING","value":"Self","parent":{"krate":0,"index":2368},"children":[],"decl_id":null,"docs":" Allows a texture to be a [`BindingType::StorageTexture`] in a bind group.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2373},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":119881,"byte_end":119898,"line_start":2667,"line_end":2667,"column_start":15,"column_end":32},"name":"RENDER_ATTACHMENT","qualname":"::TextureUsages::RENDER_ATTACHMENT","value":"Self","parent":{"krate":0,"index":2368},"children":[],"decl_id":null,"docs":" Allows a texture to be an output attachment of a renderpass.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2439},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120238,"byte_end":120258,"line_start":2679,"line_end":2679,"column_start":12,"column_end":32},"name":"SurfaceConfiguration","qualname":"::SurfaceConfiguration","value":"SurfaceConfiguration { usage, format, width, height, present_mode }","parent":null,"children":[{"krate":0,"index":2440},{"krate":0,"index":2441},{"krate":0,"index":2442},{"krate":0,"index":2443},{"krate":0,"index":2444}],"decl_id":null,"docs":" Configures a [`Surface`] for presentation.\n","sig":null,"attributes":[{"value":"/ Configures a [`Surface`] for presentation.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120021,"byte_end":120067,"line_start":2674,"line_end":2674,"column_start":1,"column_end":47}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120068,"byte_end":120078,"line_start":2675,"line_end":2675,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2440},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120355,"byte_end":120360,"line_start":2681,"line_end":2681,"column_start":9,"column_end":14},"name":"usage","qualname":"::SurfaceConfiguration::usage","value":"TextureUsages","parent":{"krate":0,"index":2439},"children":[],"decl_id":null,"docs":" The usage of the swap chain. The only supported usage is `RENDER_ATTACHMENT`.\n","sig":null,"attributes":[{"value":"/ The usage of the swap chain. The only supported usage is `RENDER_ATTACHMENT`.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120265,"byte_end":120346,"line_start":2680,"line_end":2680,"column_start":5,"column_end":86}}]},{"kind":"Field","id":{"krate":0,"index":2441},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120514,"byte_end":120520,"line_start":2684,"line_end":2684,"column_start":9,"column_end":15},"name":"format","qualname":"::SurfaceConfiguration::format","value":"TextureFormat","parent":{"krate":0,"index":2439},"children":[],"decl_id":null,"docs":" The texture format of the swap chain. The only formats that are guaranteed are\n `Bgra8Unorm` and `Bgra8UnormSrgb`\n","sig":null,"attributes":[{"value":"/ The texture format of the swap chain. The only formats that are guaranteed are","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120381,"byte_end":120463,"line_start":2682,"line_end":2682,"column_start":5,"column_end":87}},{"value":"/ `Bgra8Unorm` and `Bgra8UnormSrgb`","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120468,"byte_end":120505,"line_start":2683,"line_end":2683,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":2442},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120616,"byte_end":120621,"line_start":2686,"line_end":2686,"column_start":9,"column_end":14},"name":"width","qualname":"::SurfaceConfiguration::width","value":"u32","parent":{"krate":0,"index":2439},"children":[],"decl_id":null,"docs":" Width of the swap chain. Must be the same size as the surface.\n","sig":null,"attributes":[{"value":"/ Width of the swap chain. Must be the same size as the surface.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120541,"byte_end":120607,"line_start":2685,"line_end":2685,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2443},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120708,"byte_end":120714,"line_start":2688,"line_end":2688,"column_start":9,"column_end":15},"name":"height","qualname":"::SurfaceConfiguration::height","value":"u32","parent":{"krate":0,"index":2439},"children":[],"decl_id":null,"docs":" Height of the swap chain. Must be the same size as the surface.\n","sig":null,"attributes":[{"value":"/ Height of the swap chain. Must be the same size as the surface.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120632,"byte_end":120699,"line_start":2687,"line_end":2687,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":2444},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120886,"byte_end":120898,"line_start":2691,"line_end":2691,"column_start":9,"column_end":21},"name":"present_mode","qualname":"::SurfaceConfiguration::present_mode","value":"PresentMode","parent":{"krate":0,"index":2439},"children":[],"decl_id":null,"docs":" Presentation mode of the swap chain. FIFO is the only guaranteed to be supported, though\n other formats will automatically fall back to FIFO.\n","sig":null,"attributes":[{"value":"/ Presentation mode of the swap chain. FIFO is the only guaranteed to be supported, though","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120725,"byte_end":120817,"line_start":2689,"line_end":2689,"column_start":5,"column_end":97}},{"value":"/ other formats will automatically fall back to FIFO.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120822,"byte_end":120877,"line_start":2690,"line_end":2690,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2460},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121034,"byte_end":121038,"line_start":2699,"line_end":2699,"column_start":5,"column_end":9},"name":"Good","qualname":"::SurfaceStatus::Good","value":"SurfaceStatus::Good","parent":{"krate":0,"index":2459},"children":[],"decl_id":null,"docs":" No issues.\n","sig":null,"attributes":[{"value":"/ No issues.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121015,"byte_end":121029,"line_start":2698,"line_end":2698,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2462},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121172,"byte_end":121182,"line_start":2702,"line_end":2702,"column_start":5,"column_end":15},"name":"Suboptimal","qualname":"::SurfaceStatus::Suboptimal","value":"SurfaceStatus::Suboptimal","parent":{"krate":0,"index":2459},"children":[],"decl_id":null,"docs":" The swap chain is operational, but it does no longer perfectly\n match the surface. A re-configuration is needed.\n","sig":null,"attributes":[{"value":"/ The swap chain is operational, but it does no longer perfectly","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121044,"byte_end":121110,"line_start":2700,"line_end":2700,"column_start":5,"column_end":71}},{"value":"/ match the surface. A re-configuration is needed.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121115,"byte_end":121167,"line_start":2701,"line_end":2701,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2464},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121237,"byte_end":121244,"line_start":2704,"line_end":2704,"column_start":5,"column_end":12},"name":"Timeout","qualname":"::SurfaceStatus::Timeout","value":"SurfaceStatus::Timeout","parent":{"krate":0,"index":2459},"children":[],"decl_id":null,"docs":" Unable to get the next frame, timed out.\n","sig":null,"attributes":[{"value":"/ Unable to get the next frame, timed out.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121188,"byte_end":121232,"line_start":2703,"line_end":2703,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2466},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121304,"byte_end":121312,"line_start":2706,"line_end":2706,"column_start":5,"column_end":13},"name":"Outdated","qualname":"::SurfaceStatus::Outdated","value":"SurfaceStatus::Outdated","parent":{"krate":0,"index":2459},"children":[],"decl_id":null,"docs":" The surface under the swap chain has changed.\n","sig":null,"attributes":[{"value":"/ The surface under the swap chain has changed.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121250,"byte_end":121299,"line_start":2705,"line_end":2705,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2468},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121368,"byte_end":121372,"line_start":2708,"line_end":2708,"column_start":5,"column_end":9},"name":"Lost","qualname":"::SurfaceStatus::Lost","value":"SurfaceStatus::Lost","parent":{"krate":0,"index":2459},"children":[],"decl_id":null,"docs":" The surface under the swap chain is lost.\n","sig":null,"attributes":[{"value":"/ The surface under the swap chain is lost.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121318,"byte_end":121363,"line_start":2707,"line_end":2707,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":2459},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120995,"byte_end":121008,"line_start":2697,"line_end":2697,"column_start":10,"column_end":23},"name":"SurfaceStatus","qualname":"::SurfaceStatus","value":"pub enum SurfaceStatus { Good, Suboptimal, Timeout, Outdated, Lost, }","parent":null,"children":[{"krate":0,"index":2460},{"krate":0,"index":2462},{"krate":0,"index":2464},{"krate":0,"index":2466},{"krate":0,"index":2468}],"decl_id":null,"docs":" Status of the recieved surface image.\n","sig":null,"attributes":[{"value":"/ Status of the recieved surface image.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120916,"byte_end":120957,"line_start":2694,"line_end":2694,"column_start":1,"column_end":42}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":120958,"byte_end":120968,"line_start":2695,"line_end":2695,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":2472},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121700,"byte_end":121705,"line_start":2718,"line_end":2718,"column_start":12,"column_end":17},"name":"Color","qualname":"::Color","value":"Color { r, g, b, a }","parent":null,"children":[{"krate":0,"index":2473},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476}],"decl_id":null,"docs":" RGBA double precision color.","sig":null,"attributes":[{"value":"/ RGBA double precision color.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121377,"byte_end":121409,"line_start":2711,"line_end":2711,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121410,"byte_end":121413,"line_start":2712,"line_end":2712,"column_start":1,"column_end":4}},{"value":"/ This is not to be used as a generic color type, only for specific wgpu interfaces.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121414,"byte_end":121500,"line_start":2713,"line_end":2713,"column_start":1,"column_end":87}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121501,"byte_end":121511,"line_start":2714,"line_end":2714,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2473},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121724,"byte_end":121725,"line_start":2720,"line_end":2720,"column_start":9,"column_end":10},"name":"r","qualname":"::Color::r","value":"f64","parent":{"krate":0,"index":2472},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121712,"byte_end":121715,"line_start":2719,"line_end":2719,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":2474},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121748,"byte_end":121749,"line_start":2722,"line_end":2722,"column_start":9,"column_end":10},"name":"g","qualname":"::Color::g","value":"f64","parent":{"krate":0,"index":2472},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121736,"byte_end":121739,"line_start":2721,"line_end":2721,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":2475},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121772,"byte_end":121773,"line_start":2724,"line_end":2724,"column_start":9,"column_end":10},"name":"b","qualname":"::Color::b","value":"f64","parent":{"krate":0,"index":2472},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121760,"byte_end":121763,"line_start":2723,"line_end":2723,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":2476},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121796,"byte_end":121797,"line_start":2726,"line_end":2726,"column_start":9,"column_end":10},"name":"a","qualname":"::Color::a","value":"f64","parent":{"krate":0,"index":2472},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121784,"byte_end":121787,"line_start":2725,"line_end":2725,"column_start":5,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":122},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121857,"byte_end":121868,"line_start":2731,"line_end":2731,"column_start":15,"column_end":26},"name":"TRANSPARENT","qualname":"::Color::TRANSPARENT","value":"Self","parent":{"krate":0,"index":121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":123},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121969,"byte_end":121974,"line_start":2737,"line_end":2737,"column_start":15,"column_end":20},"name":"BLACK","qualname":"::Color::BLACK","value":"Self","parent":{"krate":0,"index":121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":124},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":122075,"byte_end":122080,"line_start":2743,"line_end":2743,"column_start":15,"column_end":20},"name":"WHITE","qualname":"::Color::WHITE","value":"Self","parent":{"krate":0,"index":121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":125},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":122181,"byte_end":122184,"line_start":2749,"line_end":2749,"column_start":15,"column_end":18},"name":"RED","qualname":"::Color::RED","value":"Self","parent":{"krate":0,"index":121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":126},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":122285,"byte_end":122290,"line_start":2755,"line_end":2755,"column_start":15,"column_end":20},"name":"GREEN","qualname":"::Color::GREEN","value":"Self","parent":{"krate":0,"index":121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":127},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":122391,"byte_end":122395,"line_start":2761,"line_end":2761,"column_start":15,"column_end":19},"name":"BLUE","qualname":"::Color::BLUE","value":"Self","parent":{"krate":0,"index":121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2489},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":122791,"byte_end":122793,"line_start":2777,"line_end":2777,"column_start":5,"column_end":7},"name":"D1","qualname":"::TextureDimension::D1","value":"TextureDimension::D1","parent":{"krate":0,"index":2488},"children":[],"decl_id":null,"docs":" 1D texture\n","sig":null,"attributes":[{"value":"/ 1D texture","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":122715,"byte_end":122729,"line_start":2775,"line_end":2775,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2491},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":122875,"byte_end":122877,"line_start":2780,"line_end":2780,"column_start":5,"column_end":7},"name":"D2","qualname":"::TextureDimension::D2","value":"TextureDimension::D2","parent":{"krate":0,"index":2488},"children":[],"decl_id":null,"docs":" 2D texture\n","sig":null,"attributes":[{"value":"/ 2D texture","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":122799,"byte_end":122813,"line_start":2778,"line_end":2778,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2493},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":122959,"byte_end":122961,"line_start":2783,"line_end":2783,"column_start":5,"column_end":7},"name":"D3","qualname":"::TextureDimension::D3","value":"TextureDimension::D3","parent":{"krate":0,"index":2488},"children":[],"decl_id":null,"docs":" 3D texture\n","sig":null,"attributes":[{"value":"/ 3D texture","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":122883,"byte_end":122897,"line_start":2781,"line_end":2781,"column_start":5,"column_end":19}}]},{"kind":"Enum","id":{"krate":0,"index":2488},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":122692,"byte_end":122708,"line_start":2774,"line_end":2774,"column_start":10,"column_end":26},"name":"TextureDimension","qualname":"::TextureDimension","value":"pub enum TextureDimension { D1, D2, D3, }","parent":null,"children":[{"krate":0,"index":2489},{"krate":0,"index":2491},{"krate":0,"index":2493}],"decl_id":null,"docs":" Dimensionality of a texture.\n","sig":null,"attributes":[{"value":"/ Dimensionality of a texture.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":122485,"byte_end":122517,"line_start":2769,"line_end":2769,"column_start":1,"column_end":33}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":122518,"byte_end":122528,"line_start":2770,"line_end":2770,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":2509},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123246,"byte_end":123254,"line_start":2792,"line_end":2792,"column_start":12,"column_end":20},"name":"Origin3d","qualname":"::Origin3d","value":"Origin3d { x, y, z }","parent":null,"children":[{"krate":0,"index":2510},{"krate":0,"index":2511},{"krate":0,"index":2512}],"decl_id":null,"docs":" Origin of a copy to/from a texture.\n","sig":null,"attributes":[{"value":"/ Origin of a copy to/from a texture.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":122966,"byte_end":123005,"line_start":2786,"line_end":2786,"column_start":1,"column_end":40}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123006,"byte_end":123016,"line_start":2787,"line_end":2787,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2510},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123273,"byte_end":123274,"line_start":2794,"line_end":2794,"column_start":9,"column_end":10},"name":"x","qualname":"::Origin3d::x","value":"u32","parent":{"krate":0,"index":2509},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123261,"byte_end":123264,"line_start":2793,"line_end":2793,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":2511},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123297,"byte_end":123298,"line_start":2796,"line_end":2796,"column_start":9,"column_end":10},"name":"y","qualname":"::Origin3d::y","value":"u32","parent":{"krate":0,"index":2509},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123285,"byte_end":123288,"line_start":2795,"line_end":2795,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":2512},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123321,"byte_end":123322,"line_start":2798,"line_end":2798,"column_start":9,"column_end":10},"name":"z","qualname":"::Origin3d::z","value":"u32","parent":{"krate":0,"index":2509},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123309,"byte_end":123312,"line_start":2797,"line_end":2797,"column_start":5,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":129},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123383,"byte_end":123387,"line_start":2803,"line_end":2803,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::Origin3d::ZERO","value":"Self","parent":{"krate":0,"index":128},"children":[],"decl_id":null,"docs":" Zero origin.\n","sig":null,"attributes":[{"value":"/ Zero origin.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123352,"byte_end":123368,"line_start":2802,"line_end":2802,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":2528},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123792,"byte_end":123800,"line_start":2818,"line_end":2818,"column_start":12,"column_end":20},"name":"Extent3d","qualname":"::Extent3d","value":"Extent3d { width, height, depth_or_array_layers }","parent":null,"children":[{"krate":0,"index":2529},{"krate":0,"index":2530},{"krate":0,"index":2531}],"decl_id":null,"docs":" Extent of a texture related operation.\n","sig":null,"attributes":[{"value":"/ Extent of a texture related operation.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123509,"byte_end":123551,"line_start":2812,"line_end":2812,"column_start":1,"column_end":43}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123552,"byte_end":123562,"line_start":2813,"line_end":2813,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2529},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123819,"byte_end":123824,"line_start":2820,"line_end":2820,"column_start":9,"column_end":14},"name":"width","qualname":"::Extent3d::width","value":"u32","parent":{"krate":0,"index":2528},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123807,"byte_end":123810,"line_start":2819,"line_end":2819,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":2530},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123847,"byte_end":123853,"line_start":2822,"line_end":2822,"column_start":9,"column_end":15},"name":"height","qualname":"::Extent3d::height","value":"u32","parent":{"krate":0,"index":2528},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123835,"byte_end":123838,"line_start":2821,"line_end":2821,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":2531},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123945,"byte_end":123966,"line_start":2825,"line_end":2825,"column_start":9,"column_end":30},"name":"depth_or_array_layers","qualname":"::Extent3d::depth_or_array_layers","value":"u32","parent":{"krate":0,"index":2528},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123864,"byte_end":123867,"line_start":2823,"line_end":2823,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":125491,"byte_end":125504,"line_start":2869,"line_end":2869,"column_start":12,"column_end":25},"name":"physical_size","qualname":"<Extent3d>::physical_size","value":"pub fn physical_size(&Self, TextureFormat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the [physical size] is backing an texture of the given format and extent.\n This includes padding to the block width and height of the format.","sig":null,"attributes":[{"value":"/ Calculates the [physical size] is backing an texture of the given format and extent.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124231,"byte_end":124319,"line_start":2844,"line_end":2844,"column_start":5,"column_end":93}},{"value":"/ This includes padding to the block width and height of the format.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124324,"byte_end":124394,"line_start":2845,"line_end":2845,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124399,"byte_end":124402,"line_start":2846,"line_end":2846,"column_start":5,"column_end":8}},{"value":"/ This is the texture extent that you must upload at when uploading to _mipmaps_ of compressed textures.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124407,"byte_end":124513,"line_start":2847,"line_end":2847,"column_start":5,"column_end":111}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124518,"byte_end":124521,"line_start":2848,"line_end":2848,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124526,"byte_end":124537,"line_start":2849,"line_end":2849,"column_start":5,"column_end":16}},{"value":"/ # use wgpu_types as wgpu;","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124542,"byte_end":124571,"line_start":2850,"line_end":2850,"column_start":5,"column_end":34}},{"value":"/ let format = wgpu::TextureFormat::Bc1RgbaUnormSrgb; // 4x4 blocks","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124576,"byte_end":124645,"line_start":2851,"line_end":2851,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124650,"byte_end":124665,"line_start":2852,"line_end":2852,"column_start":5,"column_end":20}},{"value":"/     wgpu::Extent3d { width: 7, height: 7, depth_or_array_layers: 1 }.physical_size(format),","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124670,"byte_end":124765,"line_start":2853,"line_end":2853,"column_start":5,"column_end":100}},{"value":"/     wgpu::Extent3d { width: 8, height: 8, depth_or_array_layers: 1 }","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124770,"byte_end":124842,"line_start":2854,"line_end":2854,"column_start":5,"column_end":77}},{"value":"/ );","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124847,"byte_end":124853,"line_start":2855,"line_end":2855,"column_start":5,"column_end":11}},{"value":"/ // Doesn't change, already aligned","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124858,"byte_end":124896,"line_start":2856,"line_end":2856,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124901,"byte_end":124916,"line_start":2857,"line_end":2857,"column_start":5,"column_end":20}},{"value":"/     wgpu::Extent3d { width: 8, height: 8, depth_or_array_layers: 1 }.physical_size(format),","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124921,"byte_end":125016,"line_start":2858,"line_end":2858,"column_start":5,"column_end":100}},{"value":"/     wgpu::Extent3d { width: 8, height: 8, depth_or_array_layers: 1 }","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":125021,"byte_end":125093,"line_start":2859,"line_end":2859,"column_start":5,"column_end":77}},{"value":"/ );","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":125098,"byte_end":125104,"line_start":2860,"line_end":2860,"column_start":5,"column_end":11}},{"value":"/ let format = wgpu::TextureFormat::Astc8x5RgbaUnorm; // 8x5 blocks","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":125109,"byte_end":125178,"line_start":2861,"line_end":2861,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":125183,"byte_end":125198,"line_start":2862,"line_end":2862,"column_start":5,"column_end":20}},{"value":"/     wgpu::Extent3d { width: 7, height: 7, depth_or_array_layers: 1 }.physical_size(format),","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":125203,"byte_end":125298,"line_start":2863,"line_end":2863,"column_start":5,"column_end":100}},{"value":"/     wgpu::Extent3d { width: 8, height: 10, depth_or_array_layers: 1 }","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":125303,"byte_end":125376,"line_start":2864,"line_end":2864,"column_start":5,"column_end":78}},{"value":"/ );","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":125381,"byte_end":125387,"line_start":2865,"line_end":2865,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":125392,"byte_end":125399,"line_start":2866,"line_end":2866,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":125404,"byte_end":125407,"line_start":2867,"line_end":2867,"column_start":5,"column_end":8}},{"value":"/ [physical size]: https://gpuweb.github.io/gpuweb/#physical-size","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":125412,"byte_end":125479,"line_start":2868,"line_end":2868,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":126613,"byte_end":126621,"line_start":2895,"line_end":2895,"column_start":12,"column_end":20},"name":"max_mips","qualname":"<Extent3d>::max_mips","value":"pub fn max_mips(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Calculates the maximum possible count of mipmaps.","sig":null,"attributes":[{"value":"/ Calculates the maximum possible count of mipmaps.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":126026,"byte_end":126079,"line_start":2884,"line_end":2884,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":126084,"byte_end":126087,"line_start":2885,"line_end":2885,"column_start":5,"column_end":8}},{"value":"/ Treats the depth as part of the mipmaps. If calculating","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":126092,"byte_end":126151,"line_start":2886,"line_end":2886,"column_start":5,"column_end":64}},{"value":"/ for a 2DArray texture, which does not mipmap depth, set depth to 1.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":126156,"byte_end":126227,"line_start":2887,"line_end":2887,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":126232,"byte_end":126235,"line_start":2888,"line_end":2888,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":126240,"byte_end":126251,"line_start":2889,"line_end":2889,"column_start":5,"column_end":16}},{"value":"/ # use wgpu_types as wgpu;","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":126256,"byte_end":126285,"line_start":2890,"line_end":2890,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(wgpu::Extent3d { width: 1, height: 1, depth_or_array_layers: 1 }.max_mips(), 1);","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":126290,"byte_end":126385,"line_start":2891,"line_end":2891,"column_start":5,"column_end":100}},{"value":"/ assert_eq!(wgpu::Extent3d { width: 60, height: 60, depth_or_array_layers: 1 }.max_mips(), 6);","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":126390,"byte_end":126487,"line_start":2892,"line_end":2892,"column_start":5,"column_end":102}},{"value":"/ assert_eq!(wgpu::Extent3d { width: 240, height: 1, depth_or_array_layers: 1 }.max_mips(), 8);","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":126492,"byte_end":126589,"line_start":2893,"line_end":2893,"column_start":5,"column_end":102}},{"value":"/ ```","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":126594,"byte_end":126601,"line_start":2894,"line_end":2894,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":126903,"byte_end":126917,"line_start":2902,"line_end":2902,"column_start":12,"column_end":26},"name":"mip_level_size","qualname":"<Extent3d>::mip_level_size","value":"pub fn mip_level_size(&Self, u32, bool) -> Extent3d","parent":null,"children":[],"decl_id":null,"docs":" Calculates the extent at a given mip level.\n Does *not* account for memory size being a multiple of block size.\n","sig":null,"attributes":[{"value":"/ Calculates the extent at a given mip level.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":126769,"byte_end":126816,"line_start":2900,"line_end":2900,"column_start":5,"column_end":52}},{"value":"/ Does *not* account for memory size being a multiple of block size.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":126821,"byte_end":126891,"line_start":2901,"line_end":2901,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":2547},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":127516,"byte_end":127533,"line_start":2919,"line_end":2919,"column_start":12,"column_end":29},"name":"TextureDescriptor","qualname":"::TextureDescriptor","value":"TextureDescriptor { label, size, mip_level_count, sample_count, dimension, format, usage }","parent":null,"children":[{"krate":0,"index":2549},{"krate":0,"index":2550},{"krate":0,"index":2551},{"krate":0,"index":2552},{"krate":0,"index":2553},{"krate":0,"index":2554},{"krate":0,"index":2555}],"decl_id":null,"docs":" Describes a [`Texture`].\n","sig":null,"attributes":[{"value":"/ Describes a [`Texture`].","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":127317,"byte_end":127345,"line_start":2914,"line_end":2914,"column_start":1,"column_end":29}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":127346,"byte_end":127356,"line_start":2915,"line_end":2915,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2549},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":127648,"byte_end":127653,"line_start":2921,"line_end":2921,"column_start":9,"column_end":14},"name":"label","qualname":"::TextureDescriptor::label","value":"L","parent":{"krate":0,"index":2547},"children":[],"decl_id":null,"docs":" Debug label of the texture. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the texture. This will show up in graphics debuggers for easy identification.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":127543,"byte_end":127639,"line_start":2920,"line_end":2920,"column_start":5,"column_end":101}}]},{"kind":"Field","id":{"krate":0,"index":2550},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":127878,"byte_end":127882,"line_start":2925,"line_end":2925,"column_start":9,"column_end":13},"name":"size","qualname":"::TextureDescriptor::size","value":"Extent3d","parent":{"krate":0,"index":2547},"children":[],"decl_id":null,"docs":" Size of the texture. All components must be greater than zero. For a\n regular 1D/2D texture, the unused sizes will be 1. For 2DArray textures,\n Z is the number of 2D textures in that array.\n","sig":null,"attributes":[{"value":"/ Size of the texture. All components must be greater than zero. For a","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":127662,"byte_end":127734,"line_start":2922,"line_end":2922,"column_start":5,"column_end":77}},{"value":"/ regular 1D/2D texture, the unused sizes will be 1. For 2DArray textures,","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":127739,"byte_end":127815,"line_start":2923,"line_end":2923,"column_start":5,"column_end":81}},{"value":"/ Z is the number of 2D textures in that array.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":127820,"byte_end":127869,"line_start":2924,"line_end":2924,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2551},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":127982,"byte_end":127997,"line_start":2927,"line_end":2927,"column_start":9,"column_end":24},"name":"mip_level_count","qualname":"::TextureDescriptor::mip_level_count","value":"u32","parent":{"krate":0,"index":2547},"children":[],"decl_id":null,"docs":" Mip count of texture. For a texture with no extra mips, this must be 1.\n","sig":null,"attributes":[{"value":"/ Mip count of texture. For a texture with no extra mips, this must be 1.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":127898,"byte_end":127973,"line_start":2926,"line_end":2926,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":2552},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128133,"byte_end":128145,"line_start":2929,"line_end":2929,"column_start":9,"column_end":21},"name":"sample_count","qualname":"::TextureDescriptor::sample_count","value":"u32","parent":{"krate":0,"index":2547},"children":[],"decl_id":null,"docs":" Sample count of texture. If this is not 1, texture must have [`BindingType::Texture::multisampled`] set to true.\n","sig":null,"attributes":[{"value":"/ Sample count of texture. If this is not 1, texture must have [`BindingType::Texture::multisampled`] set to true.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128008,"byte_end":128124,"line_start":2928,"line_end":2928,"column_start":5,"column_end":121}}]},{"kind":"Field","id":{"krate":0,"index":2553},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128195,"byte_end":128204,"line_start":2931,"line_end":2931,"column_start":9,"column_end":18},"name":"dimension","qualname":"::TextureDescriptor::dimension","value":"TextureDimension","parent":{"krate":0,"index":2547},"children":[],"decl_id":null,"docs":" Dimensions of the texture.\n","sig":null,"attributes":[{"value":"/ Dimensions of the texture.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128156,"byte_end":128186,"line_start":2930,"line_end":2930,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":2554},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128263,"byte_end":128269,"line_start":2933,"line_end":2933,"column_start":9,"column_end":15},"name":"format","qualname":"::TextureDescriptor::format","value":"TextureFormat","parent":{"krate":0,"index":2547},"children":[],"decl_id":null,"docs":" Format of the texture.\n","sig":null,"attributes":[{"value":"/ Format of the texture.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128228,"byte_end":128254,"line_start":2932,"line_end":2932,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2555},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128382,"byte_end":128387,"line_start":2935,"line_end":2935,"column_start":9,"column_end":14},"name":"usage","qualname":"::TextureDescriptor::usage","value":"TextureUsages","parent":{"krate":0,"index":2547},"children":[],"decl_id":null,"docs":" Allowed usages of the texture. If used in other ways, the operation will panic.\n","sig":null,"attributes":[{"value":"/ Allowed usages of the texture. If used in other ways, the operation will panic.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128290,"byte_end":128373,"line_start":2934,"line_end":2934,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128457,"byte_end":128466,"line_start":2940,"line_end":2940,"column_start":12,"column_end":21},"name":"map_label","qualname":"<TextureDescriptor<L>>::map_label","value":"pub fn map_label<K, impl FnOnce(&L) -> K: FnOnce(&L) ->\n                 K>(&Self, impl FnOnce(&L) -> K) -> TextureDescriptor<K>","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128442,"byte_end":128445,"line_start":2939,"line_end":2939,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":130442,"byte_end":130456,"line_start":2980,"line_end":2980,"column_start":12,"column_end":26},"name":"mip_level_size","qualname":"<TextureDescriptor<L>>::mip_level_size","value":"pub fn mip_level_size(&Self, u32) -> Option<Extent3d>","parent":null,"children":[],"decl_id":null,"docs":" Calculates the extent at a given mip level.","sig":null,"attributes":[{"value":"/ Calculates the extent at a given mip level.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128844,"byte_end":128891,"line_start":2952,"line_end":2952,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128896,"byte_end":128899,"line_start":2953,"line_end":2953,"column_start":5,"column_end":8}},{"value":"/ If the given mip level is larger than possible, returns None.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128904,"byte_end":128969,"line_start":2954,"line_end":2954,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128974,"byte_end":128977,"line_start":2955,"line_end":2955,"column_start":5,"column_end":8}},{"value":"/ Treats the depth as part of the mipmaps. If calculating","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128982,"byte_end":129041,"line_start":2956,"line_end":2956,"column_start":5,"column_end":64}},{"value":"/ for a 2DArray texture, which does not mipmap depth, set depth to 1.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129046,"byte_end":129117,"line_start":2957,"line_end":2957,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129122,"byte_end":129125,"line_start":2958,"line_end":2958,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129130,"byte_end":129141,"line_start":2959,"line_end":2959,"column_start":5,"column_end":16}},{"value":"/ # use wgpu_types as wgpu;","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129146,"byte_end":129175,"line_start":2960,"line_end":2960,"column_start":5,"column_end":34}},{"value":"/ let desc = wgpu::TextureDescriptor {","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129180,"byte_end":129220,"line_start":2961,"line_end":2961,"column_start":5,"column_end":45}},{"value":"/   label: (),","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129225,"byte_end":129241,"line_start":2962,"line_end":2962,"column_start":5,"column_end":21}},{"value":"/   size: wgpu::Extent3d { width: 100, height: 60, depth_or_array_layers: 1 },","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129246,"byte_end":129326,"line_start":2963,"line_end":2963,"column_start":5,"column_end":85}},{"value":"/   mip_level_count: 7,","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129331,"byte_end":129356,"line_start":2964,"line_end":2964,"column_start":5,"column_end":30}},{"value":"/   sample_count: 1,","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129361,"byte_end":129383,"line_start":2965,"line_end":2965,"column_start":5,"column_end":27}},{"value":"/   dimension: wgpu::TextureDimension::D3,","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129388,"byte_end":129432,"line_start":2966,"line_end":2966,"column_start":5,"column_end":49}},{"value":"/   format: wgpu::TextureFormat::Rgba8Sint,","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129437,"byte_end":129482,"line_start":2967,"line_end":2967,"column_start":5,"column_end":50}},{"value":"/   usage: wgpu::TextureUsages::empty(),","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129487,"byte_end":129529,"line_start":2968,"line_end":2968,"column_start":5,"column_end":47}},{"value":"/ };","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129534,"byte_end":129540,"line_start":2969,"line_end":2969,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129545,"byte_end":129548,"line_start":2970,"line_end":2970,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(desc.mip_level_size(0), Some(wgpu::Extent3d { width: 100, height: 60, depth_or_array_layers: 1 }));","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129553,"byte_end":129667,"line_start":2971,"line_end":2971,"column_start":5,"column_end":119}},{"value":"/ assert_eq!(desc.mip_level_size(1), Some(wgpu::Extent3d { width: 50, height: 30, depth_or_array_layers: 1 }));","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129672,"byte_end":129785,"line_start":2972,"line_end":2972,"column_start":5,"column_end":118}},{"value":"/ assert_eq!(desc.mip_level_size(2), Some(wgpu::Extent3d { width: 25, height: 15, depth_or_array_layers: 1 }));","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129790,"byte_end":129903,"line_start":2973,"line_end":2973,"column_start":5,"column_end":118}},{"value":"/ assert_eq!(desc.mip_level_size(3), Some(wgpu::Extent3d { width: 12, height: 7, depth_or_array_layers: 1 }));","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":129908,"byte_end":130020,"line_start":2974,"line_end":2974,"column_start":5,"column_end":117}},{"value":"/ assert_eq!(desc.mip_level_size(4), Some(wgpu::Extent3d { width: 6, height: 3, depth_or_array_layers: 1 }));","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":130025,"byte_end":130136,"line_start":2975,"line_end":2975,"column_start":5,"column_end":116}},{"value":"/ assert_eq!(desc.mip_level_size(5), Some(wgpu::Extent3d { width: 3, height: 1, depth_or_array_layers: 1 }));","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":130141,"byte_end":130252,"line_start":2976,"line_end":2976,"column_start":5,"column_end":116}},{"value":"/ assert_eq!(desc.mip_level_size(6), Some(wgpu::Extent3d { width: 1, height: 1, depth_or_array_layers: 1 }));","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":130257,"byte_end":130368,"line_start":2977,"line_end":2977,"column_start":5,"column_end":116}},{"value":"/ assert_eq!(desc.mip_level_size(7), None);","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":130373,"byte_end":130418,"line_start":2978,"line_end":2978,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":130423,"byte_end":130430,"line_start":2979,"line_end":2979,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":130765,"byte_end":130782,"line_start":2992,"line_end":2992,"column_start":12,"column_end":29},"name":"array_layer_count","qualname":"<TextureDescriptor<L>>::array_layer_count","value":"pub fn array_layer_count(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of array layers.\n","sig":null,"attributes":[{"value":"/ Returns the number of array layers.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":130714,"byte_end":130753,"line_start":2991,"line_end":2991,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2578},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131310,"byte_end":131313,"line_start":3008,"line_end":3008,"column_start":5,"column_end":8},"name":"All","qualname":"::TextureAspect::All","value":"TextureAspect::All","parent":{"krate":0,"index":2577},"children":[],"decl_id":null,"docs":" Depth, Stencil, and Color.\n","sig":null,"attributes":[{"value":"/ Depth, Stencil, and Color.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131275,"byte_end":131305,"line_start":3007,"line_end":3007,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2580},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131336,"byte_end":131347,"line_start":3010,"line_end":3010,"column_start":5,"column_end":16},"name":"StencilOnly","qualname":"::TextureAspect::StencilOnly","value":"TextureAspect::StencilOnly","parent":{"krate":0,"index":2577},"children":[],"decl_id":null,"docs":" Stencil.\n","sig":null,"attributes":[{"value":"/ Stencil.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131319,"byte_end":131331,"line_start":3009,"line_end":3009,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2582},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131368,"byte_end":131377,"line_start":3012,"line_end":3012,"column_start":5,"column_end":14},"name":"DepthOnly","qualname":"::TextureAspect::DepthOnly","value":"TextureAspect::DepthOnly","parent":{"krate":0,"index":2577},"children":[],"decl_id":null,"docs":" Depth.\n","sig":null,"attributes":[{"value":"/ Depth.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131353,"byte_end":131363,"line_start":3011,"line_end":3011,"column_start":5,"column_end":15}}]},{"kind":"Enum","id":{"krate":0,"index":2577},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131255,"byte_end":131268,"line_start":3006,"line_end":3006,"column_start":10,"column_end":23},"name":"TextureAspect","qualname":"::TextureAspect","value":"pub enum TextureAspect { All, StencilOnly, DepthOnly, }","parent":null,"children":[{"krate":0,"index":2578},{"krate":0,"index":2580},{"krate":0,"index":2582}],"decl_id":null,"docs":" Kind of data the texture holds.\n","sig":null,"attributes":[{"value":"/ Kind of data the texture holds.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":130980,"byte_end":131015,"line_start":3000,"line_end":3000,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131016,"byte_end":131026,"line_start":3001,"line_end":3001,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2599},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131882,"byte_end":131893,"line_start":3032,"line_end":3032,"column_start":5,"column_end":16},"name":"ClampToEdge","qualname":"::AddressMode::ClampToEdge","value":"AddressMode::ClampToEdge","parent":{"krate":0,"index":2598},"children":[],"decl_id":null,"docs":" Clamp the value to the edge of the texture","sig":null,"attributes":[{"value":"/ Clamp the value to the edge of the texture","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131781,"byte_end":131827,"line_start":3028,"line_end":3028,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131832,"byte_end":131835,"line_start":3029,"line_end":3029,"column_start":5,"column_end":8}},{"value":"/ -0.25 -> 0.0","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131840,"byte_end":131856,"line_start":3030,"line_end":3030,"column_start":5,"column_end":21}},{"value":"/ 1.25  -> 1.0","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131861,"byte_end":131877,"line_start":3031,"line_end":3031,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2602},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132001,"byte_end":132007,"line_start":3037,"line_end":3037,"column_start":5,"column_end":11},"name":"Repeat","qualname":"::AddressMode::Repeat","value":"AddressMode::Repeat","parent":{"krate":0,"index":2598},"children":[],"decl_id":null,"docs":" Repeat the texture in a tiling fashion","sig":null,"attributes":[{"value":"/ Repeat the texture in a tiling fashion","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131903,"byte_end":131945,"line_start":3033,"line_end":3033,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131950,"byte_end":131953,"line_start":3034,"line_end":3034,"column_start":5,"column_end":8}},{"value":"/ -0.25 -> 0.75","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131958,"byte_end":131975,"line_start":3035,"line_end":3035,"column_start":5,"column_end":22}},{"value":"/ 1.25 -> 0.25","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131980,"byte_end":131996,"line_start":3036,"line_end":3036,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2605},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132122,"byte_end":132134,"line_start":3042,"line_end":3042,"column_start":5,"column_end":17},"name":"MirrorRepeat","qualname":"::AddressMode::MirrorRepeat","value":"AddressMode::MirrorRepeat","parent":{"krate":0,"index":2598},"children":[],"decl_id":null,"docs":" Repeat the texture, mirroring it every repeat","sig":null,"attributes":[{"value":"/ Repeat the texture, mirroring it every repeat","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132017,"byte_end":132066,"line_start":3038,"line_end":3038,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132071,"byte_end":132074,"line_start":3039,"line_end":3039,"column_start":5,"column_end":8}},{"value":"/ -0.25 -> 0.25","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132079,"byte_end":132096,"line_start":3040,"line_end":3040,"column_start":5,"column_end":22}},{"value":"/ 1.25 -> 0.75","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132101,"byte_end":132117,"line_start":3041,"line_end":3041,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2608},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132320,"byte_end":132333,"line_start":3048,"line_end":3048,"column_start":5,"column_end":18},"name":"ClampToBorder","qualname":"::AddressMode::ClampToBorder","value":"AddressMode::ClampToBorder","parent":{"krate":0,"index":2598},"children":[],"decl_id":null,"docs":" Clamp the value to the border of the texture\n Requires feature [`Features::ADDRESS_MODE_CLAMP_TO_BORDER`]","sig":null,"attributes":[{"value":"/ Clamp the value to the border of the texture","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132144,"byte_end":132192,"line_start":3043,"line_end":3043,"column_start":5,"column_end":53}},{"value":"/ Requires feature [`Features::ADDRESS_MODE_CLAMP_TO_BORDER`]","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132197,"byte_end":132260,"line_start":3044,"line_end":3044,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132265,"byte_end":132268,"line_start":3045,"line_end":3045,"column_start":5,"column_end":8}},{"value":"/ -0.25 -> border","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132273,"byte_end":132292,"line_start":3046,"line_end":3046,"column_start":5,"column_end":24}},{"value":"/ 1.25 -> border","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132297,"byte_end":132315,"line_start":3047,"line_end":3047,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":2598},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131763,"byte_end":131774,"line_start":3027,"line_end":3027,"column_start":10,"column_end":21},"name":"AddressMode","qualname":"::AddressMode","value":"pub enum AddressMode {\n    ClampToEdge = ,\n    Repeat = ,\n    MirrorRepeat = ,\n    ClampToBorder = ,\n}","parent":null,"children":[{"krate":0,"index":2599},{"krate":0,"index":2602},{"krate":0,"index":2605},{"krate":0,"index":2608}],"decl_id":null,"docs":" How edges should be handled in texture addressing.\n","sig":null,"attributes":[{"value":"/ How edges should be handled in texture addressing.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131469,"byte_end":131523,"line_start":3021,"line_end":3021,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131524,"byte_end":131534,"line_start":3022,"line_end":3022,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2626},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132852,"byte_end":132859,"line_start":3067,"line_end":3067,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::FilterMode::Nearest","value":"FilterMode::Nearest","parent":{"krate":0,"index":2625},"children":[],"decl_id":null,"docs":" Nearest neighbor sampling.","sig":null,"attributes":[{"value":"/ Nearest neighbor sampling.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132743,"byte_end":132773,"line_start":3064,"line_end":3064,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132778,"byte_end":132781,"line_start":3065,"line_end":3065,"column_start":5,"column_end":8}},{"value":"/ This creates a pixelated effect when used as a mag filter","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132786,"byte_end":132847,"line_start":3066,"line_end":3066,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2629},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132979,"byte_end":132985,"line_start":3071,"line_end":3071,"column_start":5,"column_end":11},"name":"Linear","qualname":"::FilterMode::Linear","value":"FilterMode::Linear","parent":{"krate":0,"index":2625},"children":[],"decl_id":null,"docs":" Linear Interpolation","sig":null,"attributes":[{"value":"/ Linear Interpolation","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132869,"byte_end":132893,"line_start":3068,"line_end":3068,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132898,"byte_end":132901,"line_start":3069,"line_end":3069,"column_start":5,"column_end":8}},{"value":"/ This makes textures smooth but blurry when used as a mag filter.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132906,"byte_end":132974,"line_start":3070,"line_end":3070,"column_start":5,"column_end":73}}]},{"kind":"Enum","id":{"krate":0,"index":2625},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132726,"byte_end":132736,"line_start":3063,"line_end":3063,"column_start":10,"column_end":20},"name":"FilterMode","qualname":"::FilterMode","value":"pub enum FilterMode { Nearest = , Linear = , }","parent":null,"children":[{"krate":0,"index":2626},{"krate":0,"index":2629}],"decl_id":null,"docs":" Texel mixing mode when sampling between texels.\n","sig":null,"attributes":[{"value":"/ Texel mixing mode when sampling between texels.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132435,"byte_end":132486,"line_start":3057,"line_end":3057,"column_start":1,"column_end":52}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132487,"byte_end":132497,"line_start":3058,"line_end":3058,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":2646},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":133304,"byte_end":133321,"line_start":3084,"line_end":3084,"column_start":12,"column_end":29},"name":"PushConstantRange","qualname":"::PushConstantRange","value":"PushConstantRange { stages, range }","parent":null,"children":[{"krate":0,"index":2647},{"krate":0,"index":2648}],"decl_id":null,"docs":" A range of push constant memory to pass to a shader stage.\n","sig":null,"attributes":[{"value":"/ A range of push constant memory to pass to a shader stage.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":133082,"byte_end":133144,"line_start":3080,"line_end":3080,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":2647},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":133488,"byte_end":133494,"line_start":3087,"line_end":3087,"column_start":9,"column_end":15},"name":"stages","qualname":"::PushConstantRange::stages","value":"ShaderStages","parent":{"krate":0,"index":2646},"children":[],"decl_id":null,"docs":" Stage push constant range is visible from. Each stage can only be served by at most one range.\n One range can serve multiple stages however.\n","sig":null,"attributes":[{"value":"/ Stage push constant range is visible from. Each stage can only be served by at most one range.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":133328,"byte_end":133426,"line_start":3085,"line_end":3085,"column_start":5,"column_end":103}},{"value":"/ One range can serve multiple stages however.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":133431,"byte_end":133479,"line_start":3086,"line_end":3086,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":2648},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":133681,"byte_end":133686,"line_start":3090,"line_end":3090,"column_start":9,"column_end":14},"name":"range","qualname":"::PushConstantRange::range","value":"std::ops::Range<u32>","parent":{"krate":0,"index":2646},"children":[],"decl_id":null,"docs":" Range in push constant memory to use for the stage. Must be less than [`Limits::max_push_constant_size`].\n Start and end must be aligned to the 4s.\n","sig":null,"attributes":[{"value":"/ Range in push constant memory to use for the stage. Must be less than [`Limits::max_push_constant_size`].","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":133514,"byte_end":133623,"line_start":3088,"line_end":3088,"column_start":5,"column_end":114}},{"value":"/ Start and end must be aligned to the 4s.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":133628,"byte_end":133672,"line_start":3089,"line_end":3089,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":2663},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":133917,"byte_end":133940,"line_start":3098,"line_end":3098,"column_start":12,"column_end":35},"name":"CommandBufferDescriptor","qualname":"::CommandBufferDescriptor","value":"CommandBufferDescriptor { label }","parent":null,"children":[{"krate":0,"index":2665}],"decl_id":null,"docs":" Describes a [`CommandBuffer`].\n","sig":null,"attributes":[{"value":"/ Describes a [`CommandBuffer`].","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":133703,"byte_end":133737,"line_start":3093,"line_end":3093,"column_start":1,"column_end":35}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":133738,"byte_end":133748,"line_start":3094,"line_end":3094,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2665},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":133998,"byte_end":134003,"line_start":3100,"line_end":3100,"column_start":9,"column_end":14},"name":"label","qualname":"::CommandBufferDescriptor::label","value":"L","parent":{"krate":0,"index":2663},"children":[],"decl_id":null,"docs":" Debug label of this command buffer.\n","sig":null,"attributes":[{"value":"/ Debug label of this command buffer.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":133950,"byte_end":133989,"line_start":3099,"line_end":3099,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":134067,"byte_end":134076,"line_start":3105,"line_end":3105,"column_start":12,"column_end":21},"name":"map_label","qualname":"<CommandBufferDescriptor<L>>::map_label","value":"pub fn map_label<K, impl FnOnce(&L) -> K: FnOnce(&L) ->\n                 K>(&Self, impl FnOnce(&L) -> K) -> CommandBufferDescriptor<K>","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":134052,"byte_end":134055,"line_start":3104,"line_end":3104,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2690},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":134489,"byte_end":134513,"line_start":3117,"line_end":3117,"column_start":12,"column_end":36},"name":"RenderBundleDepthStencil","qualname":"::RenderBundleDepthStencil","value":"RenderBundleDepthStencil { format, depth_read_only, stencil_read_only }","parent":null,"children":[{"krate":0,"index":2691},{"krate":0,"index":2692},{"krate":0,"index":2693}],"decl_id":null,"docs":" Describes the depth/stencil attachment for render bundles.\n","sig":null,"attributes":[{"value":"/ Describes the depth/stencil attachment for render bundles.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":134236,"byte_end":134298,"line_start":3112,"line_end":3112,"column_start":1,"column_end":63}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":134299,"byte_end":134309,"line_start":3113,"line_end":3113,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2691},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":134558,"byte_end":134564,"line_start":3119,"line_end":3119,"column_start":9,"column_end":15},"name":"format","qualname":"::RenderBundleDepthStencil::format","value":"TextureFormat","parent":{"krate":0,"index":2690},"children":[],"decl_id":null,"docs":" Format of the attachment.\n","sig":null,"attributes":[{"value":"/ Format of the attachment.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":134520,"byte_end":134549,"line_start":3118,"line_end":3118,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":2692},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":134648,"byte_end":134663,"line_start":3121,"line_end":3121,"column_start":9,"column_end":24},"name":"depth_read_only","qualname":"::RenderBundleDepthStencil::depth_read_only","value":"bool","parent":{"krate":0,"index":2690},"children":[],"decl_id":null,"docs":" True if the depth aspect is used but not modified.\n","sig":null,"attributes":[{"value":"/ True if the depth aspect is used but not modified.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":134585,"byte_end":134639,"line_start":3120,"line_end":3120,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":2693},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":134740,"byte_end":134757,"line_start":3123,"line_end":3123,"column_start":9,"column_end":26},"name":"stencil_read_only","qualname":"::RenderBundleDepthStencil::stencil_read_only","value":"bool","parent":{"krate":0,"index":2690},"children":[],"decl_id":null,"docs":" True if the stencil aspect is used but not modified.\n","sig":null,"attributes":[{"value":"/ True if the stencil aspect is used but not modified.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":134675,"byte_end":134731,"line_start":3122,"line_end":3122,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":2709},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":134972,"byte_end":134994,"line_start":3131,"line_end":3131,"column_start":12,"column_end":34},"name":"RenderBundleDescriptor","qualname":"::RenderBundleDescriptor","value":"RenderBundleDescriptor { label }","parent":null,"children":[{"krate":0,"index":2711}],"decl_id":null,"docs":" Describes a [`RenderBundle`].\n","sig":null,"attributes":[{"value":"/ Describes a [`RenderBundle`].","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":134768,"byte_end":134801,"line_start":3126,"line_end":3126,"column_start":1,"column_end":34}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":134802,"byte_end":134812,"line_start":3127,"line_end":3127,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2711},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":135123,"byte_end":135128,"line_start":3133,"line_end":3133,"column_start":9,"column_end":14},"name":"label","qualname":"::RenderBundleDescriptor::label","value":"L","parent":{"krate":0,"index":2709},"children":[],"decl_id":null,"docs":" Debug label of the render bundle encoder. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the render bundle encoder. This will show up in graphics debuggers for easy identification.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":135004,"byte_end":135114,"line_start":3132,"line_end":3132,"column_start":5,"column_end":115}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":135191,"byte_end":135200,"line_start":3138,"line_end":3138,"column_start":12,"column_end":21},"name":"map_label","qualname":"<RenderBundleDescriptor<L>>::map_label","value":"pub fn map_label<K, impl FnOnce(&L) -> K: FnOnce(&L) ->\n                 K>(&Self, impl FnOnce(&L) -> K) -> RenderBundleDescriptor<K>","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":135176,"byte_end":135179,"line_start":3137,"line_end":3137,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2733},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":136627,"byte_end":136642,"line_start":3165,"line_end":3165,"column_start":12,"column_end":27},"name":"ImageDataLayout","qualname":"::ImageDataLayout","value":"ImageDataLayout { offset, bytes_per_row, rows_per_image }","parent":null,"children":[{"krate":0,"index":2734},{"krate":0,"index":2735},{"krate":0,"index":2736}],"decl_id":null,"docs":" Layout of a texture in a buffer's memory.","sig":null,"attributes":[{"value":"/ Layout of a texture in a buffer's memory.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":135479,"byte_end":135524,"line_start":3151,"line_end":3151,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":135525,"byte_end":135528,"line_start":3152,"line_end":3152,"column_start":1,"column_end":4}},{"value":"/ The bytes per row and rows per image can be hard to figure out so here are some examples:","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":135529,"byte_end":135622,"line_start":3153,"line_end":3153,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":135623,"byte_end":135626,"line_start":3154,"line_end":3154,"column_start":1,"column_end":4}},{"value":"/ | Resolution | Format | Bytes per block | Pixels per block | Bytes per row                          | Rows per image               |","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":135627,"byte_end":135763,"line_start":3155,"line_end":3155,"column_start":1,"column_end":137}},{"value":"/ |------------|--------|-----------------|------------------|----------------------------------------|------------------------------|","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":135764,"byte_end":135900,"line_start":3156,"line_end":3156,"column_start":1,"column_end":137}},{"value":"/ | 256x256    | RGBA8  | 4               | 1 * 1 * 1        | 256 * 4 = Some(1024)                   | None                         |","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":135901,"byte_end":136037,"line_start":3157,"line_end":3157,"column_start":1,"column_end":137}},{"value":"/ | 32x16x8    | RGBA8  | 4               | 1 * 1 * 1        | 32 * 4 = 128 padded to 256 = Some(256) | None                         |","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":136038,"byte_end":136174,"line_start":3158,"line_end":3158,"column_start":1,"column_end":137}},{"value":"/ | 256x256    | BC3    | 16              | 4 * 4 * 1        | 16 * (256 / 4) = 1024 = Some(1024)     | None                         |","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":136175,"byte_end":136311,"line_start":3159,"line_end":3159,"column_start":1,"column_end":137}},{"value":"/ | 64x64x8    | BC3    | 16              | 4 * 4 * 1        | 16 * (64 / 4) = 256 = Some(256)        | 64 / 4 = 16 = Some(16)       |","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":136312,"byte_end":136448,"line_start":3160,"line_end":3160,"column_start":1,"column_end":137}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":136449,"byte_end":136459,"line_start":3161,"line_end":3161,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2734},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":136808,"byte_end":136814,"line_start":3168,"line_end":3168,"column_start":9,"column_end":15},"name":"offset","qualname":"::ImageDataLayout::offset","value":"u64","parent":{"krate":0,"index":2733},"children":[],"decl_id":null,"docs":" Offset into the buffer that is the start of the texture. Must be a multiple of texture block size.\n For non-compressed textures, this is 1.\n","sig":null,"attributes":[{"value":"/ Offset into the buffer that is the start of the texture. Must be a multiple of texture block size.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":136649,"byte_end":136751,"line_start":3166,"line_end":3166,"column_start":5,"column_end":107}},{"value":"/ For non-compressed textures, this is 1.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":136756,"byte_end":136799,"line_start":3167,"line_end":3167,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":2735},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137538,"byte_end":137551,"line_start":3181,"line_end":3181,"column_start":9,"column_end":22},"name":"bytes_per_row","qualname":"::ImageDataLayout::bytes_per_row","value":"std::option::Option<std::num::NonZeroU32>","parent":{"krate":0,"index":2733},"children":[],"decl_id":null,"docs":" Bytes per \"row\" in an image.","sig":null,"attributes":[{"value":"/ Bytes per \"row\" in an image.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":136835,"byte_end":136867,"line_start":3169,"line_end":3169,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":136872,"byte_end":136875,"line_start":3170,"line_end":3170,"column_start":5,"column_end":8}},{"value":"/ A row is one row of pixels or of compressed blocks in the x direction.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":136880,"byte_end":136954,"line_start":3171,"line_end":3171,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":136959,"byte_end":136962,"line_start":3172,"line_end":3172,"column_start":5,"column_end":8}},{"value":"/ This value is required if there are multiple rows (i.e. height or depth is more than one pixel or pixel block for compressed textures)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":136967,"byte_end":137105,"line_start":3173,"line_end":3173,"column_start":5,"column_end":143}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137110,"byte_end":137113,"line_start":3174,"line_end":3174,"column_start":5,"column_end":8}},{"value":"/ Must be a multiple of 256 for [`CommandEncoder::copy_buffer_to_texture`] and [`CommandEncoder::copy_texture_to_buffer`]. You must manually pad","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137118,"byte_end":137264,"line_start":3175,"line_end":3175,"column_start":5,"column_end":151}},{"value":"/ the image such that this is a multiple of 256. It will not affect the image data.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137269,"byte_end":137354,"line_start":3176,"line_end":3176,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137359,"byte_end":137362,"line_start":3177,"line_end":3177,"column_start":5,"column_end":8}},{"value":"/ [`Queue::write_texture`] does not have this requirement.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137367,"byte_end":137427,"line_start":3178,"line_end":3178,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137432,"byte_end":137435,"line_start":3179,"line_end":3179,"column_start":5,"column_end":8}},{"value":"/ Must be a multiple of the texture block size. For non-compressed textures, this is 1.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137440,"byte_end":137529,"line_start":3180,"line_end":3180,"column_start":5,"column_end":94}}]},{"kind":"Field","id":{"krate":0,"index":2736},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137993,"byte_end":138007,"line_start":3191,"line_end":3191,"column_start":9,"column_end":23},"name":"rows_per_image","qualname":"::ImageDataLayout::rows_per_image","value":"std::option::Option<std::num::NonZeroU32>","parent":{"krate":0,"index":2733},"children":[],"decl_id":null,"docs":" \"Rows\" that make up a single \"image\".","sig":null,"attributes":[{"value":"/ \"Rows\" that make up a single \"image\".","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137577,"byte_end":137618,"line_start":3182,"line_end":3182,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137623,"byte_end":137626,"line_start":3183,"line_end":3183,"column_start":5,"column_end":8}},{"value":"/ A row is one row of pixels or of compressed blocks in the x direction.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137631,"byte_end":137705,"line_start":3184,"line_end":3184,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137710,"byte_end":137713,"line_start":3185,"line_end":3185,"column_start":5,"column_end":8}},{"value":"/ An image is one layer in the z direction of a 3D image or 2DArray texture.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137718,"byte_end":137796,"line_start":3186,"line_end":3186,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137801,"byte_end":137804,"line_start":3187,"line_end":3187,"column_start":5,"column_end":8}},{"value":"/ The amount of rows per image may be larger than the actual amount of rows of data.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137809,"byte_end":137895,"line_start":3188,"line_end":3188,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137900,"byte_end":137903,"line_start":3189,"line_end":3189,"column_start":5,"column_end":8}},{"value":"/ Required if there are multiple images (i.e. the depth is more than one).","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":137908,"byte_end":137984,"line_start":3190,"line_end":3190,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2745},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138584,"byte_end":138591,"line_start":3211,"line_end":3211,"column_start":5,"column_end":12},"name":"Uniform","qualname":"::BufferBindingType::Uniform","value":"BufferBindingType::Uniform","parent":{"krate":0,"index":2744},"children":[],"decl_id":null,"docs":" A buffer for uniform values.","sig":null,"attributes":[{"value":"/ A buffer for uniform values.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138343,"byte_end":138375,"line_start":3201,"line_end":3201,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138380,"byte_end":138383,"line_start":3202,"line_end":3202,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138388,"byte_end":138412,"line_start":3203,"line_end":3203,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138417,"byte_end":138434,"line_start":3204,"line_end":3204,"column_start":5,"column_end":22}},{"value":"/ layout(std140, binding = 0)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138439,"byte_end":138470,"line_start":3205,"line_end":3205,"column_start":5,"column_end":36}},{"value":"/ uniform Globals {","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138475,"byte_end":138496,"line_start":3206,"line_end":3206,"column_start":5,"column_end":26}},{"value":"/     vec2 aUniform;","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138501,"byte_end":138523,"line_start":3207,"line_end":3207,"column_start":5,"column_end":27}},{"value":"/     vec2 anotherUniform;","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138528,"byte_end":138556,"line_start":3208,"line_end":3208,"column_start":5,"column_end":33}},{"value":"/ };","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138561,"byte_end":138567,"line_start":3209,"line_end":3209,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138572,"byte_end":138579,"line_start":3210,"line_end":3210,"column_start":5,"column_end":12}}]},{"kind":"StructVariant","id":{"krate":0,"index":2747},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138794,"byte_end":138801,"line_start":3220,"line_end":3220,"column_start":5,"column_end":12},"name":"Storage","qualname":"::BufferBindingType::Storage","value":"BufferBindingType::Storage { read_only }","parent":{"krate":0,"index":2744},"children":[],"decl_id":null,"docs":" A storage buffer.","sig":null,"attributes":[{"value":"/ A storage buffer.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138597,"byte_end":138618,"line_start":3212,"line_end":3212,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138623,"byte_end":138626,"line_start":3213,"line_end":3213,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138631,"byte_end":138655,"line_start":3214,"line_end":3214,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138660,"byte_end":138677,"line_start":3215,"line_end":3215,"column_start":5,"column_end":22}},{"value":"/ layout (set=0, binding=0) buffer myStorageBuffer {","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138682,"byte_end":138736,"line_start":3216,"line_end":3216,"column_start":5,"column_end":59}},{"value":"/     vec4 myElement[];","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138741,"byte_end":138766,"line_start":3217,"line_end":3217,"column_start":5,"column_end":30}},{"value":"/ };","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138771,"byte_end":138777,"line_start":3218,"line_end":3218,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138782,"byte_end":138789,"line_start":3219,"line_end":3219,"column_start":5,"column_end":12}}]},{"kind":"Enum","id":{"krate":0,"index":2744},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138319,"byte_end":138336,"line_start":3200,"line_end":3200,"column_start":10,"column_end":27},"name":"BufferBindingType","qualname":"::BufferBindingType","value":"pub enum BufferBindingType {\n    Uniform,\n    Storage {\n        read_only: bool,\n    },\n}","parent":null,"children":[{"krate":0,"index":2745},{"krate":0,"index":2747}],"decl_id":null,"docs":" Specific type of a buffer binding.","sig":null,"attributes":[{"value":"/ Specific type of a buffer binding.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138032,"byte_end":138070,"line_start":3194,"line_end":3194,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138071,"byte_end":138074,"line_start":3195,"line_end":3195,"column_start":1,"column_end":4}},{"value":"/ WebGPU spec: <https://gpuweb.github.io/gpuweb/#enumdef-gpubufferbindingtype>","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":138075,"byte_end":138155,"line_start":3196,"line_end":3196,"column_start":1,"column_end":81}}]},{"kind":"StructVariant","id":{"krate":0,"index":2765},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139747,"byte_end":139752,"line_start":3254,"line_end":3254,"column_start":5,"column_end":10},"name":"Float","qualname":"::TextureSampleType::Float","value":"TextureSampleType::Float { filterable }","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" Sampling returns floats.","sig":null,"attributes":[{"value":"/ Sampling returns floats.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139586,"byte_end":139614,"line_start":3247,"line_end":3247,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139619,"byte_end":139622,"line_start":3248,"line_end":3248,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139627,"byte_end":139651,"line_start":3249,"line_end":3249,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139656,"byte_end":139673,"line_start":3250,"line_end":3250,"column_start":5,"column_end":22}},{"value":"/ layout(binding = 0)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139678,"byte_end":139701,"line_start":3251,"line_end":3251,"column_start":5,"column_end":28}},{"value":"/ uniform texture2D t;","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139706,"byte_end":139730,"line_start":3252,"line_end":3252,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139735,"byte_end":139742,"line_start":3253,"line_end":3253,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2767},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140085,"byte_end":140090,"line_start":3266,"line_end":3266,"column_start":5,"column_end":10},"name":"Depth","qualname":"::TextureSampleType::Depth","value":"TextureSampleType::Depth","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" Sampling does the depth reference comparison.","sig":null,"attributes":[{"value":"/ Sampling does the depth reference comparison.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139897,"byte_end":139946,"line_start":3259,"line_end":3259,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139951,"byte_end":139954,"line_start":3260,"line_end":3260,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139959,"byte_end":139983,"line_start":3261,"line_end":3261,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139988,"byte_end":140005,"line_start":3262,"line_end":3262,"column_start":5,"column_end":22}},{"value":"/ layout(binding = 0)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140010,"byte_end":140033,"line_start":3263,"line_end":3263,"column_start":5,"column_end":28}},{"value":"/ uniform texture2DShadow t;","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140038,"byte_end":140068,"line_start":3264,"line_end":3264,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140073,"byte_end":140080,"line_start":3265,"line_end":3265,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2769},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140267,"byte_end":140271,"line_start":3274,"line_end":3274,"column_start":5,"column_end":9},"name":"Sint","qualname":"::TextureSampleType::Sint","value":"TextureSampleType::Sint","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" Sampling returns signed integers.","sig":null,"attributes":[{"value":"/ Sampling returns signed integers.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140096,"byte_end":140133,"line_start":3267,"line_end":3267,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140138,"byte_end":140141,"line_start":3268,"line_end":3268,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140146,"byte_end":140170,"line_start":3269,"line_end":3269,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140175,"byte_end":140192,"line_start":3270,"line_end":3270,"column_start":5,"column_end":22}},{"value":"/ layout(binding = 0)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140197,"byte_end":140220,"line_start":3271,"line_end":3271,"column_start":5,"column_end":28}},{"value":"/ uniform itexture2D t;","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140225,"byte_end":140250,"line_start":3272,"line_end":3272,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140255,"byte_end":140262,"line_start":3273,"line_end":3273,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2771},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140450,"byte_end":140454,"line_start":3282,"line_end":3282,"column_start":5,"column_end":9},"name":"Uint","qualname":"::TextureSampleType::Uint","value":"TextureSampleType::Uint","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" Sampling returns unsigned integers.","sig":null,"attributes":[{"value":"/ Sampling returns unsigned integers.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140277,"byte_end":140316,"line_start":3275,"line_end":3275,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140321,"byte_end":140324,"line_start":3276,"line_end":3276,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140329,"byte_end":140353,"line_start":3277,"line_end":3277,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140358,"byte_end":140375,"line_start":3278,"line_end":3278,"column_start":5,"column_end":22}},{"value":"/ layout(binding = 0)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140380,"byte_end":140403,"line_start":3279,"line_end":3279,"column_start":5,"column_end":28}},{"value":"/ uniform utexture2D t;","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140408,"byte_end":140433,"line_start":3280,"line_end":3280,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140438,"byte_end":140445,"line_start":3281,"line_end":3281,"column_start":5,"column_end":12}}]},{"kind":"Enum","id":{"krate":0,"index":2764},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139562,"byte_end":139579,"line_start":3246,"line_end":3246,"column_start":10,"column_end":27},"name":"TextureSampleType","qualname":"::TextureSampleType","value":"pub enum TextureSampleType {\n    Float {\n        filterable: bool,\n    },\n    Depth,\n    Sint,\n    Uint,\n}","parent":null,"children":[{"krate":0,"index":2765},{"krate":0,"index":2767},{"krate":0,"index":2769},{"krate":0,"index":2771}],"decl_id":null,"docs":" Specific type of a sample in a texture binding.","sig":null,"attributes":[{"value":"/ Specific type of a sample in a texture binding.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139262,"byte_end":139313,"line_start":3240,"line_end":3240,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139314,"byte_end":139317,"line_start":3241,"line_end":3241,"column_start":1,"column_end":4}},{"value":"/ WebGPU spec: <https://gpuweb.github.io/gpuweb/#enumdef-gputexturesampletype>","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139318,"byte_end":139398,"line_start":3242,"line_end":3242,"column_start":1,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2789},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141217,"byte_end":141226,"line_start":3305,"line_end":3305,"column_start":5,"column_end":14},"name":"WriteOnly","qualname":"::StorageTextureAccess::WriteOnly","value":"StorageTextureAccess::WriteOnly","parent":{"krate":0,"index":2788},"children":[],"decl_id":null,"docs":" The texture can only be written in the shader and it must be annotated with `writeonly`.","sig":null,"attributes":[{"value":"/ The texture can only be written in the shader and it must be annotated with `writeonly`.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140968,"byte_end":141060,"line_start":3299,"line_end":3299,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141065,"byte_end":141068,"line_start":3300,"line_end":3300,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141073,"byte_end":141097,"line_start":3301,"line_end":3301,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141102,"byte_end":141119,"line_start":3302,"line_end":3302,"column_start":5,"column_end":22}},{"value":"/ layout(set=0, binding=0, r32f) writeonly uniform image2D myStorageImage;","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141124,"byte_end":141200,"line_start":3303,"line_end":3303,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141205,"byte_end":141212,"line_start":3304,"line_end":3304,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2791},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141580,"byte_end":141588,"line_start":3313,"line_end":3313,"column_start":5,"column_end":13},"name":"ReadOnly","qualname":"::StorageTextureAccess::ReadOnly","value":"StorageTextureAccess::ReadOnly","parent":{"krate":0,"index":2788},"children":[],"decl_id":null,"docs":" The texture can only be read in the shader and it must be annotated with `readonly`.\n [`Features::TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES`] must be enabled to use this access mode,","sig":null,"attributes":[{"value":"/ The texture can only be read in the shader and it must be annotated with `readonly`.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141232,"byte_end":141320,"line_start":3306,"line_end":3306,"column_start":5,"column_end":93}},{"value":"/ [`Features::TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES`] must be enabled to use this access mode,","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141325,"byte_end":141424,"line_start":3307,"line_end":3307,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141429,"byte_end":141432,"line_start":3308,"line_end":3308,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141437,"byte_end":141461,"line_start":3309,"line_end":3309,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141466,"byte_end":141483,"line_start":3310,"line_end":3310,"column_start":5,"column_end":22}},{"value":"/ layout(set=0, binding=0, r32f) readonly uniform image2D myStorageImage;","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141488,"byte_end":141563,"line_start":3311,"line_end":3311,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141568,"byte_end":141575,"line_start":3312,"line_end":3312,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2793},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141904,"byte_end":141913,"line_start":3321,"line_end":3321,"column_start":5,"column_end":14},"name":"ReadWrite","qualname":"::StorageTextureAccess::ReadWrite","value":"StorageTextureAccess::ReadWrite","parent":{"krate":0,"index":2788},"children":[],"decl_id":null,"docs":" The texture can be both read and written in the shader.\n [`Features::TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES`] must be enabled to use this access mode.","sig":null,"attributes":[{"value":"/ The texture can be both read and written in the shader.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141594,"byte_end":141653,"line_start":3314,"line_end":3314,"column_start":5,"column_end":64}},{"value":"/ [`Features::TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES`] must be enabled to use this access mode.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141658,"byte_end":141757,"line_start":3315,"line_end":3315,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141762,"byte_end":141765,"line_start":3316,"line_end":3316,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141770,"byte_end":141794,"line_start":3317,"line_end":3317,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141799,"byte_end":141816,"line_start":3318,"line_end":3318,"column_start":5,"column_end":22}},{"value":"/ layout(set=0, binding=0, r32f) uniform image2D myStorageImage;","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141821,"byte_end":141887,"line_start":3319,"line_end":3319,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141892,"byte_end":141899,"line_start":3320,"line_end":3320,"column_start":5,"column_end":12}}]},{"kind":"Enum","id":{"krate":0,"index":2788},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140941,"byte_end":140961,"line_start":3298,"line_end":3298,"column_start":10,"column_end":30},"name":"StorageTextureAccess","qualname":"::StorageTextureAccess","value":"pub enum StorageTextureAccess { WriteOnly, ReadOnly, ReadWrite, }","parent":null,"children":[{"krate":0,"index":2789},{"krate":0,"index":2791},{"krate":0,"index":2793}],"decl_id":null,"docs":" Specific type of a sample in a texture binding.","sig":null,"attributes":[{"value":"/ Specific type of a sample in a texture binding.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140573,"byte_end":140624,"line_start":3291,"line_end":3291,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140625,"byte_end":140628,"line_start":3292,"line_end":3292,"column_start":1,"column_end":4}},{"value":"/ WebGPU spec: <https://gpuweb.github.io/gpuweb/#enumdef-gpustoragetextureaccess>","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140629,"byte_end":140712,"line_start":3293,"line_end":3293,"column_start":1,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2810},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":142458,"byte_end":142467,"line_start":3335,"line_end":3335,"column_start":5,"column_end":14},"name":"Filtering","qualname":"::SamplerBindingType::Filtering","value":"SamplerBindingType::Filtering","parent":{"krate":0,"index":2809},"children":[],"decl_id":null,"docs":" The sampling result is produced based on more than a single color sample from a texture,\n e.g. when bilinear interpolation is enabled.\n","sig":null,"attributes":[{"value":"/ The sampling result is produced based on more than a single color sample from a texture,","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":142308,"byte_end":142400,"line_start":3333,"line_end":3333,"column_start":5,"column_end":97}},{"value":"/ e.g. when bilinear interpolation is enabled.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":142405,"byte_end":142453,"line_start":3334,"line_end":3334,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2812},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":142560,"byte_end":142572,"line_start":3337,"line_end":3337,"column_start":5,"column_end":17},"name":"NonFiltering","qualname":"::SamplerBindingType::NonFiltering","value":"SamplerBindingType::NonFiltering","parent":{"krate":0,"index":2809},"children":[],"decl_id":null,"docs":" The sampling result is produced based on a single color sample from a texture.\n","sig":null,"attributes":[{"value":"/ The sampling result is produced based on a single color sample from a texture.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":142473,"byte_end":142555,"line_start":3336,"line_end":3336,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2814},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":142789,"byte_end":142799,"line_start":3340,"line_end":3340,"column_start":5,"column_end":15},"name":"Comparison","qualname":"::SamplerBindingType::Comparison","value":"SamplerBindingType::Comparison","parent":{"krate":0,"index":2809},"children":[],"decl_id":null,"docs":" Use as a comparison sampler instead of a normal sampler.\n For more info take a look at the analogous functionality in OpenGL: <https://www.khronos.org/opengl/wiki/Sampler_Object#Comparison_mode>.\n","sig":null,"attributes":[{"value":"/ Use as a comparison sampler instead of a normal sampler.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":142578,"byte_end":142638,"line_start":3338,"line_end":3338,"column_start":5,"column_end":65}},{"value":"/ For more info take a look at the analogous functionality in OpenGL: <https://www.khronos.org/opengl/wiki/Sampler_Object#Comparison_mode>.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":142643,"byte_end":142784,"line_start":3339,"line_end":3339,"column_start":5,"column_end":146}}]},{"kind":"Enum","id":{"krate":0,"index":2809},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":142283,"byte_end":142301,"line_start":3332,"line_end":3332,"column_start":10,"column_end":28},"name":"SamplerBindingType","qualname":"::SamplerBindingType","value":"pub enum SamplerBindingType { Filtering, NonFiltering, Comparison, }","parent":null,"children":[{"krate":0,"index":2810},{"krate":0,"index":2812},{"krate":0,"index":2814}],"decl_id":null,"docs":" Specific type of a sampler binding.","sig":null,"attributes":[{"value":"/ Specific type of a sampler binding.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141918,"byte_end":141957,"line_start":3324,"line_end":3324,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141958,"byte_end":141961,"line_start":3325,"line_end":3325,"column_start":1,"column_end":4}},{"value":"/ WebGPU spec: <https://gpuweb.github.io/gpuweb/#enumdef-gpusamplerbindingtype>","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":141962,"byte_end":142043,"line_start":3326,"line_end":3326,"column_start":1,"column_end":82}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":142044,"byte_end":142054,"line_start":3327,"line_end":3327,"column_start":1,"column_end":11}}]},{"kind":"StructVariant","id":{"krate":0,"index":2831},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":143374,"byte_end":143380,"line_start":3355,"line_end":3355,"column_start":5,"column_end":11},"name":"Buffer","qualname":"::BindingType::Buffer","value":"BindingType::Buffer { ty, has_dynamic_offset, min_binding_size }","parent":{"krate":0,"index":2830},"children":[],"decl_id":null,"docs":" A buffer binding.\n","sig":null,"attributes":[{"value":"/ A buffer binding.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":143348,"byte_end":143369,"line_start":3354,"line_end":3354,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2835},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":144492,"byte_end":144499,"line_start":3376,"line_end":3376,"column_start":5,"column_end":12},"name":"Sampler","qualname":"::BindingType::Sampler","value":"BindingType::Sampler(SamplerBindingType)","parent":{"krate":0,"index":2830},"children":[],"decl_id":null,"docs":" A sampler that can be used to sample a texture.","sig":null,"attributes":[{"value":"/ A sampler that can be used to sample a texture.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":144310,"byte_end":144361,"line_start":3369,"line_end":3369,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":144366,"byte_end":144369,"line_start":3370,"line_end":3370,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":144374,"byte_end":144398,"line_start":3371,"line_end":3371,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":144403,"byte_end":144420,"line_start":3372,"line_end":3372,"column_start":5,"column_end":22}},{"value":"/ layout(binding = 0)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":144425,"byte_end":144448,"line_start":3373,"line_end":3373,"column_start":5,"column_end":28}},{"value":"/ uniform sampler s;","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":144453,"byte_end":144475,"line_start":3374,"line_end":3374,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":144480,"byte_end":144487,"line_start":3375,"line_end":3375,"column_start":5,"column_end":12}}]},{"kind":"StructVariant","id":{"krate":0,"index":2838},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":144680,"byte_end":144687,"line_start":3384,"line_end":3384,"column_start":5,"column_end":12},"name":"Texture","qualname":"::BindingType::Texture","value":"BindingType::Texture { sample_type, view_dimension, multisampled }","parent":{"krate":0,"index":2830},"children":[],"decl_id":null,"docs":" A texture binding.","sig":null,"attributes":[{"value":"/ A texture binding.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":144525,"byte_end":144547,"line_start":3377,"line_end":3377,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":144552,"byte_end":144555,"line_start":3378,"line_end":3378,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":144560,"byte_end":144584,"line_start":3379,"line_end":3379,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":144589,"byte_end":144606,"line_start":3380,"line_end":3380,"column_start":5,"column_end":22}},{"value":"/ layout(binding = 0)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":144611,"byte_end":144634,"line_start":3381,"line_end":3381,"column_start":5,"column_end":28}},{"value":"/ uniform texture2D t;","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":144639,"byte_end":144663,"line_start":3382,"line_end":3382,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":144668,"byte_end":144675,"line_start":3383,"line_end":3383,"column_start":5,"column_end":12}}]},{"kind":"StructVariant","id":{"krate":0,"index":2842},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":145569,"byte_end":145583,"line_start":3402,"line_end":3402,"column_start":5,"column_end":19},"name":"StorageTexture","qualname":"::BindingType::StorageTexture","value":"BindingType::StorageTexture { access, format, view_dimension }","parent":{"krate":0,"index":2830},"children":[],"decl_id":null,"docs":" A storage texture.","sig":null,"attributes":[{"value":"/ A storage texture.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":145159,"byte_end":145181,"line_start":3394,"line_end":3394,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":145186,"byte_end":145189,"line_start":3395,"line_end":3395,"column_start":5,"column_end":8}},{"value":"/ Example GLSL syntax:","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":145194,"byte_end":145218,"line_start":3396,"line_end":3396,"column_start":5,"column_end":29}},{"value":"/ ```cpp,ignore","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":145223,"byte_end":145240,"line_start":3397,"line_end":3397,"column_start":5,"column_end":22}},{"value":"/ layout(set=0, binding=0, r32f) uniform image2D myStorageImage;","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":145245,"byte_end":145311,"line_start":3398,"line_end":3398,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":145316,"byte_end":145323,"line_start":3399,"line_end":3399,"column_start":5,"column_end":12}},{"value":"/ Note that the texture format must be specified in the shader as well.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":145328,"byte_end":145401,"line_start":3400,"line_end":3400,"column_start":5,"column_end":78}},{"value":"/ A list of valid formats can be found in the specification here: <https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.60.html#layout-qualifiers>","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":145406,"byte_end":145564,"line_start":3401,"line_end":3401,"column_start":5,"column_end":163}}]},{"kind":"Enum","id":{"krate":0,"index":2830},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":143330,"byte_end":143341,"line_start":3353,"line_end":3353,"column_start":10,"column_end":21},"name":"BindingType","qualname":"::BindingType","value":"pub enum BindingType {\n    Buffer {\n        ty: BufferBindingType,\n        has_dynamic_offset: bool,\n        min_binding_size: Option<BufferSize>,\n    },\n    Sampler(SamplerBindingType),\n    Texture {\n        sample_type: TextureSampleType,\n        view_dimension: TextureViewDimension,\n        multisampled: bool,\n    },\n    StorageTexture {\n        access: StorageTextureAccess,\n        format: TextureFormat,\n        view_dimension: TextureViewDimension,\n    },\n}","parent":null,"children":[{"krate":0,"index":2831},{"krate":0,"index":2835},{"krate":0,"index":2838},{"krate":0,"index":2842}],"decl_id":null,"docs":" Specific type of a binding.","sig":null,"attributes":[{"value":"/ Specific type of a binding.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":142804,"byte_end":142835,"line_start":3343,"line_end":3343,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":142836,"byte_end":142839,"line_start":3344,"line_end":3344,"column_start":1,"column_end":4}},{"value":"/ WebGPU spec: the enum of","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":142840,"byte_end":142868,"line_start":3345,"line_end":3345,"column_start":1,"column_end":29}},{"value":"/ - <https://gpuweb.github.io/gpuweb/#dictdef-gpubufferbindinglayout>","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":142869,"byte_end":142940,"line_start":3346,"line_end":3346,"column_start":1,"column_end":72}},{"value":"/ - <https://gpuweb.github.io/gpuweb/#dictdef-gpusamplerbindinglayout>","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":142941,"byte_end":143013,"line_start":3347,"line_end":3347,"column_start":1,"column_end":73}},{"value":"/ - <https://gpuweb.github.io/gpuweb/#dictdef-gputexturebindinglayout>","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":143014,"byte_end":143086,"line_start":3348,"line_end":3348,"column_start":1,"column_end":73}},{"value":"/ - <https://gpuweb.github.io/gpuweb/#dictdef-gpustoragetexturebindinglayout>","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":143087,"byte_end":143166,"line_start":3349,"line_end":3349,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":145961,"byte_end":145979,"line_start":3414,"line_end":3414,"column_start":12,"column_end":30},"name":"has_dynamic_offset","qualname":"<BindingType>::has_dynamic_offset","value":"pub fn has_dynamic_offset(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true for buffer bindings with dynamic offset enabled.\n","sig":null,"attributes":[{"value":"/ Returns true for buffer bindings with dynamic offset enabled.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":145884,"byte_end":145949,"line_start":3413,"line_end":3413,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":2861},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":146382,"byte_end":146402,"line_start":3428,"line_end":3428,"column_start":12,"column_end":32},"name":"BindGroupLayoutEntry","qualname":"::BindGroupLayoutEntry","value":"BindGroupLayoutEntry { binding, visibility, ty, count }","parent":null,"children":[{"krate":0,"index":2862},{"krate":0,"index":2863},{"krate":0,"index":2864},{"krate":0,"index":2865}],"decl_id":null,"docs":" Describes a single binding inside a bind group.\n","sig":null,"attributes":[{"value":"/ Describes a single binding inside a bind group.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":146165,"byte_end":146216,"line_start":3424,"line_end":3424,"column_start":1,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2862},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":146603,"byte_end":146610,"line_start":3431,"line_end":3431,"column_start":9,"column_end":16},"name":"binding","qualname":"::BindGroupLayoutEntry::binding","value":"u32","parent":{"krate":0,"index":2861},"children":[],"decl_id":null,"docs":" Binding index. Must match shader index and be unique inside a BindGroupLayout. A binding\n of index 1, would be described as `layout(set = 0, binding = 1) uniform` in shaders.\n","sig":null,"attributes":[{"value":"/ Binding index. Must match shader index and be unique inside a BindGroupLayout. A binding","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":146409,"byte_end":146501,"line_start":3429,"line_end":3429,"column_start":5,"column_end":97}},{"value":"/ of index 1, would be described as `layout(set = 0, binding = 1) uniform` in shaders.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":146506,"byte_end":146594,"line_start":3430,"line_end":3430,"column_start":5,"column_end":93}}]},{"kind":"Field","id":{"krate":0,"index":2863},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":146675,"byte_end":146685,"line_start":3433,"line_end":3433,"column_start":9,"column_end":19},"name":"visibility","qualname":"::BindGroupLayoutEntry::visibility","value":"ShaderStages","parent":{"krate":0,"index":2861},"children":[],"decl_id":null,"docs":" Which shader stages can see this binding.\n","sig":null,"attributes":[{"value":"/ Which shader stages can see this binding.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":146621,"byte_end":146666,"line_start":3432,"line_end":3432,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":2864},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":146741,"byte_end":146743,"line_start":3435,"line_end":3435,"column_start":9,"column_end":11},"name":"ty","qualname":"::BindGroupLayoutEntry::ty","value":"BindingType","parent":{"krate":0,"index":2861},"children":[],"decl_id":null,"docs":" The type of the binding\n","sig":null,"attributes":[{"value":"/ The type of the binding","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":146705,"byte_end":146732,"line_start":3434,"line_end":3434,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2865},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147169,"byte_end":147174,"line_start":3442,"line_end":3442,"column_start":9,"column_end":14},"name":"count","qualname":"::BindGroupLayoutEntry::count","value":"std::option::Option<std::num::NonZeroU32>","parent":{"krate":0,"index":2861},"children":[],"decl_id":null,"docs":" If this value is Some, indicates this entry is an array. Array size must be 1 or greater.","sig":null,"attributes":[{"value":"/ If this value is Some, indicates this entry is an array. Array size must be 1 or greater.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":146762,"byte_end":146855,"line_start":3436,"line_end":3436,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":146860,"byte_end":146863,"line_start":3437,"line_end":3437,"column_start":5,"column_end":8}},{"value":"/ If this value is Some and `ty` is `BindingType::Texture`, [`Features::TEXTURE_BINDING_ARRAY`] must be supported.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":146868,"byte_end":146984,"line_start":3438,"line_end":3438,"column_start":5,"column_end":121}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":146989,"byte_end":146992,"line_start":3439,"line_end":3439,"column_start":5,"column_end":8}},{"value":"/ If this value is Some and `ty` is any other variant, bind group creation will fail.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":146997,"byte_end":147084,"line_start":3440,"line_end":3440,"column_start":5,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":2881},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147428,"byte_end":147443,"line_start":3450,"line_end":3450,"column_start":12,"column_end":27},"name":"ImageCopyBuffer","qualname":"::ImageCopyBuffer","value":"ImageCopyBuffer { buffer, layout }","parent":null,"children":[{"krate":0,"index":2883},{"krate":0,"index":2884}],"decl_id":null,"docs":" View of a buffer which can be used to copy to/from a texture.\n","sig":null,"attributes":[{"value":"/ View of a buffer which can be used to copy to/from a texture.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147199,"byte_end":147264,"line_start":3445,"line_end":3445,"column_start":1,"column_end":66}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147265,"byte_end":147275,"line_start":3446,"line_end":3446,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2883},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147498,"byte_end":147504,"line_start":3452,"line_end":3452,"column_start":9,"column_end":15},"name":"buffer","qualname":"::ImageCopyBuffer::buffer","value":"B","parent":{"krate":0,"index":2881},"children":[],"decl_id":null,"docs":" The buffer to be copied to/from.\n","sig":null,"attributes":[{"value":"/ The buffer to be copied to/from.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147453,"byte_end":147489,"line_start":3451,"line_end":3451,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2884},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147572,"byte_end":147578,"line_start":3454,"line_end":3454,"column_start":9,"column_end":15},"name":"layout","qualname":"::ImageCopyBuffer::layout","value":"ImageDataLayout","parent":{"krate":0,"index":2881},"children":[],"decl_id":null,"docs":" The layout of the texture data in this buffer.\n","sig":null,"attributes":[{"value":"/ The layout of the texture data in this buffer.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147513,"byte_end":147563,"line_start":3453,"line_end":3453,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":2891},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147837,"byte_end":147853,"line_start":3462,"line_end":3462,"column_start":12,"column_end":28},"name":"ImageCopyTexture","qualname":"::ImageCopyTexture","value":"ImageCopyTexture { texture, mip_level, origin, aspect }","parent":null,"children":[{"krate":0,"index":2893},{"krate":0,"index":2894},{"krate":0,"index":2895},{"krate":0,"index":2896}],"decl_id":null,"docs":" View of a texture which can be used to copy to/from a buffer/texture.\n","sig":null,"attributes":[{"value":"/ View of a texture which can be used to copy to/from a buffer/texture.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147600,"byte_end":147673,"line_start":3457,"line_end":3457,"column_start":1,"column_end":74}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147674,"byte_end":147684,"line_start":3458,"line_end":3458,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2893},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147909,"byte_end":147916,"line_start":3464,"line_end":3464,"column_start":9,"column_end":16},"name":"texture","qualname":"::ImageCopyTexture::texture","value":"T","parent":{"krate":0,"index":2891},"children":[],"decl_id":null,"docs":" The texture to be copied to/from.\n","sig":null,"attributes":[{"value":"/ The texture to be copied to/from.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147863,"byte_end":147900,"line_start":3463,"line_end":3463,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":2894},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147974,"byte_end":147983,"line_start":3466,"line_end":3466,"column_start":9,"column_end":18},"name":"mip_level","qualname":"::ImageCopyTexture::mip_level","value":"u32","parent":{"krate":0,"index":2891},"children":[],"decl_id":null,"docs":" The target mip level of the texture.\n","sig":null,"attributes":[{"value":"/ The target mip level of the texture.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147925,"byte_end":147965,"line_start":3465,"line_end":3465,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2895},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":148141,"byte_end":148147,"line_start":3469,"line_end":3469,"column_start":9,"column_end":15},"name":"origin","qualname":"::ImageCopyTexture::origin","value":"Origin3d","parent":{"krate":0,"index":2891},"children":[],"decl_id":null,"docs":" The base texel of the texture in the selected `mip_level`.\n","sig":null,"attributes":[{"value":"/ The base texel of the texture in the selected `mip_level`.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":147994,"byte_end":148056,"line_start":3467,"line_end":3467,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":2896},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":148268,"byte_end":148274,"line_start":3472,"line_end":3472,"column_start":9,"column_end":15},"name":"aspect","qualname":"::ImageCopyTexture::aspect","value":"TextureAspect","parent":{"krate":0,"index":2891},"children":[],"decl_id":null,"docs":" The copy aspect.\n","sig":null,"attributes":[{"value":"/ The copy aspect.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":148163,"byte_end":148183,"line_start":3470,"line_end":3470,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":2903},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":148515,"byte_end":148536,"line_start":3480,"line_end":3480,"column_start":12,"column_end":33},"name":"ImageSubresourceRange","qualname":"::ImageSubresourceRange","value":"ImageSubresourceRange { aspect, base_mip_level, mip_level_count, base_array_layer, array_layer_count }","parent":null,"children":[{"krate":0,"index":2904},{"krate":0,"index":2905},{"krate":0,"index":2906},{"krate":0,"index":2907},{"krate":0,"index":2908}],"decl_id":null,"docs":" Subresource range within an image\n","sig":null,"attributes":[{"value":"/ Subresource range within an image","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":148294,"byte_end":148331,"line_start":3475,"line_end":3475,"column_start":1,"column_end":38}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":148332,"byte_end":148342,"line_start":3476,"line_end":3476,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2904},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":148650,"byte_end":148656,"line_start":3482,"line_end":3482,"column_start":9,"column_end":15},"name":"aspect","qualname":"::ImageSubresourceRange::aspect","value":"TextureAspect","parent":{"krate":0,"index":2903},"children":[],"decl_id":null,"docs":" Aspect of the texture. Color textures must be [`TextureAspect::All`](wgt::TextureAspect::All).\n","sig":null,"attributes":[{"value":"/ Aspect of the texture. Color textures must be [`TextureAspect::All`](wgt::TextureAspect::All).","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":148543,"byte_end":148641,"line_start":3481,"line_end":3481,"column_start":5,"column_end":103}}]},{"kind":"Field","id":{"krate":0,"index":2905},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":148705,"byte_end":148719,"line_start":3484,"line_end":3484,"column_start":9,"column_end":23},"name":"base_mip_level","qualname":"::ImageSubresourceRange::base_mip_level","value":"u32","parent":{"krate":0,"index":2903},"children":[],"decl_id":null,"docs":" Base mip level.\n","sig":null,"attributes":[{"value":"/ Base mip level.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":148677,"byte_end":148696,"line_start":3483,"line_end":3483,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":2906},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":148962,"byte_end":148977,"line_start":3488,"line_end":3488,"column_start":9,"column_end":24},"name":"mip_level_count","qualname":"::ImageSubresourceRange::mip_level_count","value":"std::option::Option<std::num::NonZeroU32>","parent":{"krate":0,"index":2903},"children":[],"decl_id":null,"docs":" Mip level count.\n If `Some(count)`, `base_mip_level + count` must be less or equal to underlying texture mip count.\n If `None`, considered to include the rest of the mipmap levels, but at least 1 in total.\n","sig":null,"attributes":[{"value":"/ Mip level count.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":148730,"byte_end":148750,"line_start":3485,"line_end":3485,"column_start":5,"column_end":25}},{"value":"/ If `Some(count)`, `base_mip_level + count` must be less or equal to underlying texture mip count.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":148755,"byte_end":148856,"line_start":3486,"line_end":3486,"column_start":5,"column_end":106}},{"value":"/ If `None`, considered to include the rest of the mipmap levels, but at least 1 in total.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":148861,"byte_end":148953,"line_start":3487,"line_end":3487,"column_start":5,"column_end":97}}]},{"kind":"Field","id":{"krate":0,"index":2907},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":149033,"byte_end":149049,"line_start":3490,"line_end":3490,"column_start":9,"column_end":25},"name":"base_array_layer","qualname":"::ImageSubresourceRange::base_array_layer","value":"u32","parent":{"krate":0,"index":2903},"children":[],"decl_id":null,"docs":" Base array layer.\n","sig":null,"attributes":[{"value":"/ Base array layer.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":149003,"byte_end":149024,"line_start":3489,"line_end":3489,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":2908},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":149287,"byte_end":149304,"line_start":3494,"line_end":3494,"column_start":9,"column_end":26},"name":"array_layer_count","qualname":"::ImageSubresourceRange::array_layer_count","value":"std::option::Option<std::num::NonZeroU32>","parent":{"krate":0,"index":2903},"children":[],"decl_id":null,"docs":" Layer count.\n If `Some(count)`, `base_array_layer + count` must be less or equal to the underlying array count.\n If `None`, considered to include the rest of the array layers, but at least 1 in total.\n","sig":null,"attributes":[{"value":"/ Layer count.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":149060,"byte_end":149076,"line_start":3491,"line_end":3491,"column_start":5,"column_end":21}},{"value":"/ If `Some(count)`, `base_array_layer + count` must be less or equal to the underlying array count.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":149081,"byte_end":149182,"line_start":3492,"line_end":3492,"column_start":5,"column_end":106}},{"value":"/ If `None`, considered to include the rest of the array layers, but at least 1 in total.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":149187,"byte_end":149278,"line_start":3493,"line_end":3493,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":149462,"byte_end":149471,"line_start":3499,"line_end":3499,"column_start":12,"column_end":21},"name":"mip_range","qualname":"<ImageSubresourceRange>::mip_range","value":"pub fn mip_range<L>(&Self, &TextureDescriptor<L>) -> Range<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the mip level range of a subresource range describes for a specific texture.\n","sig":null,"attributes":[{"value":"/ Returns the mip level range of a subresource range describes for a specific texture.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":149362,"byte_end":149450,"line_start":3498,"line_end":3498,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":149842,"byte_end":149853,"line_start":3507,"line_end":3507,"column_start":12,"column_end":23},"name":"layer_range","qualname":"<ImageSubresourceRange>::layer_range","value":"pub fn layer_range<L>(&Self, &TextureDescriptor<L>) -> Range<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the layer range of a subresource range describes for a specific texture.\n","sig":null,"attributes":[{"value":"/ Returns the layer range of a subresource range describes for a specific texture.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":149746,"byte_end":149830,"line_start":3506,"line_end":3506,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2920},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":150663,"byte_end":150679,"line_start":3528,"line_end":3528,"column_start":5,"column_end":21},"name":"TransparentBlack","qualname":"::SamplerBorderColor::TransparentBlack","value":"SamplerBorderColor::TransparentBlack","parent":{"krate":0,"index":2919},"children":[],"decl_id":null,"docs":" [0, 0, 0, 0]\n","sig":null,"attributes":[{"value":"/ [0, 0, 0, 0]","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":150642,"byte_end":150658,"line_start":3527,"line_end":3527,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2922},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":150706,"byte_end":150717,"line_start":3530,"line_end":3530,"column_start":5,"column_end":16},"name":"OpaqueBlack","qualname":"::SamplerBorderColor::OpaqueBlack","value":"SamplerBorderColor::OpaqueBlack","parent":{"krate":0,"index":2919},"children":[],"decl_id":null,"docs":" [0, 0, 0, 1]\n","sig":null,"attributes":[{"value":"/ [0, 0, 0, 1]","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":150685,"byte_end":150701,"line_start":3529,"line_end":3529,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2924},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":150744,"byte_end":150755,"line_start":3532,"line_end":3532,"column_start":5,"column_end":16},"name":"OpaqueWhite","qualname":"::SamplerBorderColor::OpaqueWhite","value":"SamplerBorderColor::OpaqueWhite","parent":{"krate":0,"index":2919},"children":[],"decl_id":null,"docs":" [1, 1, 1, 1]\n","sig":null,"attributes":[{"value":"/ [1, 1, 1, 1]","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":150723,"byte_end":150739,"line_start":3531,"line_end":3531,"column_start":5,"column_end":21}}]},{"kind":"Enum","id":{"krate":0,"index":2919},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":150617,"byte_end":150635,"line_start":3526,"line_end":3526,"column_start":10,"column_end":28},"name":"SamplerBorderColor","qualname":"::SamplerBorderColor","value":"pub enum SamplerBorderColor { TransparentBlack, OpaqueBlack, OpaqueWhite, }","parent":null,"children":[{"krate":0,"index":2920},{"krate":0,"index":2922},{"krate":0,"index":2924}],"decl_id":null,"docs":" Color variation to use when sampler addressing mode is [`AddressMode::ClampToBorder`]\n","sig":null,"attributes":[{"value":"/ Color variation to use when sampler addressing mode is [`AddressMode::ClampToBorder`]","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":150339,"byte_end":150428,"line_start":3521,"line_end":3521,"column_start":1,"column_end":90}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":150429,"byte_end":150439,"line_start":3522,"line_end":3522,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":2940},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":150952,"byte_end":150970,"line_start":3539,"line_end":3539,"column_start":12,"column_end":30},"name":"QuerySetDescriptor","qualname":"::QuerySetDescriptor","value":"QuerySetDescriptor { label, ty, count }","parent":null,"children":[{"krate":0,"index":2942},{"krate":0,"index":2943},{"krate":0,"index":2944}],"decl_id":null,"docs":" Describes how to create a QuerySet.\n","sig":null,"attributes":[{"value":"/ Describes how to create a QuerySet.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":150760,"byte_end":150799,"line_start":3535,"line_end":3535,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":2942},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151023,"byte_end":151028,"line_start":3541,"line_end":3541,"column_start":9,"column_end":14},"name":"label","qualname":"::QuerySetDescriptor::label","value":"L","parent":{"krate":0,"index":2940},"children":[],"decl_id":null,"docs":" Debug label for the query set.\n","sig":null,"attributes":[{"value":"/ Debug label for the query set.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":150980,"byte_end":151014,"line_start":3540,"line_end":3540,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2943},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151099,"byte_end":151101,"line_start":3543,"line_end":3543,"column_start":9,"column_end":11},"name":"ty","qualname":"::QuerySetDescriptor::ty","value":"QueryType","parent":{"krate":0,"index":2940},"children":[],"decl_id":null,"docs":" Kind of query that this query set should contain.\n","sig":null,"attributes":[{"value":"/ Kind of query that this query set should contain.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151037,"byte_end":151090,"line_start":3542,"line_end":3542,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2944},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151249,"byte_end":151254,"line_start":3546,"line_end":3546,"column_start":9,"column_end":14},"name":"count","qualname":"::QuerySetDescriptor::count","value":"u32","parent":{"krate":0,"index":2940},"children":[],"decl_id":null,"docs":" Total count of queries the set contains. Must not be zero.\n Must not be greater than [`QUERY_SET_MAX_QUERIES`].\n","sig":null,"attributes":[{"value":"/ Total count of queries the set contains. Must not be zero.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151118,"byte_end":151180,"line_start":3544,"line_end":3544,"column_start":5,"column_end":67}},{"value":"/ Must not be greater than [`QUERY_SET_MAX_QUERIES`].","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151185,"byte_end":151240,"line_start":3545,"line_end":3545,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151315,"byte_end":151324,"line_start":3551,"line_end":3551,"column_start":12,"column_end":21},"name":"map_label","qualname":"<QuerySetDescriptor<L>>::map_label","value":"pub fn map_label<'a, K, impl FnOnce(&'a L) -> K: FnOnce(&'a L) ->\n                 K>(&'a Self, impl FnOnce(&'a L) -> K)\n-> QuerySetDescriptor<K>","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151300,"byte_end":151303,"line_start":3550,"line_end":3550,"column_start":5,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2952},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151834,"byte_end":151843,"line_start":3566,"line_end":3566,"column_start":5,"column_end":14},"name":"Occlusion","qualname":"::QueryType::Occlusion","value":"QueryType::Occlusion","parent":{"krate":0,"index":2951},"children":[],"decl_id":null,"docs":" Query returns a single 64-bit number, serving as an occlusion boolean.\n","sig":null,"attributes":[{"value":"/ Query returns a single 64-bit number, serving as an occlusion boolean.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151755,"byte_end":151829,"line_start":3565,"line_end":3565,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2954},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":152135,"byte_end":152153,"line_start":3573,"line_end":3573,"column_start":5,"column_end":23},"name":"PipelineStatistics","qualname":"::QueryType::PipelineStatistics","value":"QueryType::PipelineStatistics(PipelineStatisticsTypes)","parent":{"krate":0,"index":2951},"children":[],"decl_id":null,"docs":" Query returns up to 5 64-bit numbers based on the given flags.","sig":null,"attributes":[{"value":"/ Query returns up to 5 64-bit numbers based on the given flags.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151849,"byte_end":151915,"line_start":3567,"line_end":3567,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151920,"byte_end":151923,"line_start":3568,"line_end":3568,"column_start":5,"column_end":8}},{"value":"/ See [`PipelineStatisticsTypes`]'s documentation for more information","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151928,"byte_end":152000,"line_start":3569,"line_end":3569,"column_start":5,"column_end":77}},{"value":"/ on how they get resolved.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":152005,"byte_end":152034,"line_start":3570,"line_end":3570,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":152039,"byte_end":152042,"line_start":3571,"line_end":3571,"column_start":5,"column_end":8}},{"value":"/ [`Features::PIPELINE_STATISTICS_QUERY`] must be enabled to use this query type.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":152047,"byte_end":152130,"line_start":3572,"line_end":3572,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2957},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":152657,"byte_end":152666,"line_start":3583,"line_end":3583,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::QueryType::Timestamp","value":"QueryType::Timestamp","parent":{"krate":0,"index":2951},"children":[],"decl_id":null,"docs":" Query returns a 64-bit number indicating the GPU-timestamp\n where all previous commands have finished executing.","sig":null,"attributes":[{"value":"/ Query returns a 64-bit number indicating the GPU-timestamp","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":152184,"byte_end":152246,"line_start":3574,"line_end":3574,"column_start":5,"column_end":67}},{"value":"/ where all previous commands have finished executing.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":152251,"byte_end":152307,"line_start":3575,"line_end":3575,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":152312,"byte_end":152315,"line_start":3576,"line_end":3576,"column_start":5,"column_end":8}},{"value":"/ Must be multiplied by [`Device::get_timestamp_period`] to get","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":152320,"byte_end":152385,"line_start":3577,"line_end":3577,"column_start":5,"column_end":70}},{"value":"/ the value in nanoseconds. Absolute values have no meaning,","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":152390,"byte_end":152452,"line_start":3578,"line_end":3578,"column_start":5,"column_end":67}},{"value":"/ but timestamps can be subtracted to get the time it takes","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":152457,"byte_end":152518,"line_start":3579,"line_end":3579,"column_start":5,"column_end":66}},{"value":"/ for a string of operations to complete.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":152523,"byte_end":152566,"line_start":3580,"line_end":3580,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":152571,"byte_end":152574,"line_start":3581,"line_end":3581,"column_start":5,"column_end":8}},{"value":"/ [`Features::TIMESTAMP_QUERY`] must be enabled to use this query type.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":152579,"byte_end":152652,"line_start":3582,"line_end":3582,"column_start":5,"column_end":78}}]},{"kind":"Enum","id":{"krate":0,"index":2951},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151739,"byte_end":151748,"line_start":3564,"line_end":3564,"column_start":10,"column_end":19},"name":"QueryType","qualname":"::QueryType","value":"pub enum QueryType {\n    Occlusion,\n    PipelineStatistics(PipelineStatisticsTypes),\n    Timestamp,\n}","parent":null,"children":[{"krate":0,"index":2952},{"krate":0,"index":2954},{"krate":0,"index":2957}],"decl_id":null,"docs":" Type of query contained in a QuerySet.\n","sig":null,"attributes":[{"value":"/ Type of query contained in a QuerySet.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151540,"byte_end":151582,"line_start":3560,"line_end":3560,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":2964},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":153297,"byte_end":153320,"line_start":3599,"line_end":3599,"column_start":16,"column_end":39},"name":"PipelineStatisticsTypes","qualname":"::PipelineStatisticsTypes","value":"PipelineStatisticsTypes {  }","parent":null,"children":[{"krate":0,"index":2965}],"decl_id":null,"docs":" Flags for which pipeline data should be recorded.","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs","byte_start":9986302,"byte_end":9986311,"line_start":362,"line_end":362,"column_start":11,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":3001},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":153468,"byte_end":153493,"line_start":3602,"line_end":3602,"column_start":15,"column_end":40},"name":"VERTEX_SHADER_INVOCATIONS","qualname":"::PipelineStatisticsTypes::VERTEX_SHADER_INVOCATIONS","value":"Self","parent":{"krate":0,"index":3000},"children":[],"decl_id":null,"docs":" Amount of times the vertex shader is ran. Accounts for\n the vertex cache when doing indexed rendering.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3002},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":153648,"byte_end":153667,"line_start":3605,"line_end":3605,"column_start":15,"column_end":34},"name":"CLIPPER_INVOCATIONS","qualname":"::PipelineStatisticsTypes::CLIPPER_INVOCATIONS","value":"Self","parent":{"krate":0,"index":3000},"children":[],"decl_id":null,"docs":" Amount of times the clipper is invoked. This\n is also the amount of triangles output by the vertex shader.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3003},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":153882,"byte_end":153904,"line_start":3609,"line_end":3609,"column_start":15,"column_end":37},"name":"CLIPPER_PRIMITIVES_OUT","qualname":"::PipelineStatisticsTypes::CLIPPER_PRIMITIVES_OUT","value":"Self","parent":{"krate":0,"index":3000},"children":[],"decl_id":null,"docs":" Amount of primitives that are not culled by the clipper.\n This is the amount of triangles that are actually on screen\n and will be rasterized and rendered.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3004},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":154090,"byte_end":154117,"line_start":3613,"line_end":3613,"column_start":15,"column_end":42},"name":"FRAGMENT_SHADER_INVOCATIONS","qualname":"::PipelineStatisticsTypes::FRAGMENT_SHADER_INVOCATIONS","value":"Self","parent":{"krate":0,"index":3000},"children":[],"decl_id":null,"docs":" Amount of times the fragment shader is ran. Accounts for\n fragment shaders running in 2x2 blocks in order to get\n derivatives.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3005},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":154283,"byte_end":154309,"line_start":3616,"line_end":3616,"column_start":15,"column_end":41},"name":"COMPUTE_SHADER_INVOCATIONS","qualname":"::PipelineStatisticsTypes::COMPUTE_SHADER_INVOCATIONS","value":"Self","parent":{"krate":0,"index":3000},"children":[],"decl_id":null,"docs":" Amount of times a compute shader is invoked. This will\n be equivalent to the dispatch count times the workgroup size.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3071},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":154549,"byte_end":154565,"line_start":3626,"line_end":3626,"column_start":12,"column_end":28},"name":"DrawIndirectArgs","qualname":"::DrawIndirectArgs","value":"DrawIndirectArgs { vertex_count, instance_count, first_vertex, first_instance }","parent":null,"children":[{"krate":0,"index":3072},{"krate":0,"index":3073},{"krate":0,"index":3074},{"krate":0,"index":3075}],"decl_id":null,"docs":" Argument buffer layout for draw_indirect commands.\n","sig":null,"attributes":[{"value":"/ Argument buffer layout for draw_indirect commands.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":154442,"byte_end":154496,"line_start":3623,"line_end":3623,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":154497,"byte_end":154507,"line_start":3624,"line_end":3624,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3072},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":154616,"byte_end":154628,"line_start":3628,"line_end":3628,"column_start":9,"column_end":21},"name":"vertex_count","qualname":"::DrawIndirectArgs::vertex_count","value":"u32","parent":{"krate":0,"index":3071},"children":[],"decl_id":null,"docs":" The number of vertices to draw.\n","sig":null,"attributes":[{"value":"/ The number of vertices to draw.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":154572,"byte_end":154607,"line_start":3627,"line_end":3627,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":3073},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":154684,"byte_end":154698,"line_start":3630,"line_end":3630,"column_start":9,"column_end":23},"name":"instance_count","qualname":"::DrawIndirectArgs::instance_count","value":"u32","parent":{"krate":0,"index":3071},"children":[],"decl_id":null,"docs":" The number of instances to draw.\n","sig":null,"attributes":[{"value":"/ The number of instances to draw.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":154639,"byte_end":154675,"line_start":3629,"line_end":3629,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":3074},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":154789,"byte_end":154801,"line_start":3632,"line_end":3632,"column_start":9,"column_end":21},"name":"first_vertex","qualname":"::DrawIndirectArgs::first_vertex","value":"u32","parent":{"krate":0,"index":3071},"children":[],"decl_id":null,"docs":" Offset into the vertex buffers, in vertices, to begin drawing from.\n","sig":null,"attributes":[{"value":"/ Offset into the vertex buffers, in vertices, to begin drawing from.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":154709,"byte_end":154780,"line_start":3631,"line_end":3631,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":3075},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":154848,"byte_end":154862,"line_start":3634,"line_end":3634,"column_start":9,"column_end":23},"name":"first_instance","qualname":"::DrawIndirectArgs::first_instance","value":"u32","parent":{"krate":0,"index":3071},"children":[],"decl_id":null,"docs":" First instance to draw.\n","sig":null,"attributes":[{"value":"/ First instance to draw.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":154812,"byte_end":154839,"line_start":3633,"line_end":3633,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":3081},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":154987,"byte_end":155010,"line_start":3640,"line_end":3640,"column_start":12,"column_end":35},"name":"DrawIndexedIndirectArgs","qualname":"::DrawIndexedIndirectArgs","value":"DrawIndexedIndirectArgs { index_count, instance_count, first_index, base_vertex, first_instance }","parent":null,"children":[{"krate":0,"index":3082},{"krate":0,"index":3083},{"krate":0,"index":3084},{"krate":0,"index":3085},{"krate":0,"index":3086}],"decl_id":null,"docs":" Argument buffer layout for draw_indexed_indirect commands.\n","sig":null,"attributes":[{"value":"/ Argument buffer layout for draw_indexed_indirect commands.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":154872,"byte_end":154934,"line_start":3637,"line_end":3637,"column_start":1,"column_end":63}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":154935,"byte_end":154945,"line_start":3638,"line_end":3638,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3082},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155060,"byte_end":155071,"line_start":3642,"line_end":3642,"column_start":9,"column_end":20},"name":"index_count","qualname":"::DrawIndexedIndirectArgs::index_count","value":"u32","parent":{"krate":0,"index":3081},"children":[],"decl_id":null,"docs":" The number of indices to draw.\n","sig":null,"attributes":[{"value":"/ The number of indices to draw.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155017,"byte_end":155051,"line_start":3641,"line_end":3641,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":3083},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155127,"byte_end":155141,"line_start":3644,"line_end":3644,"column_start":9,"column_end":23},"name":"instance_count","qualname":"::DrawIndexedIndirectArgs::instance_count","value":"u32","parent":{"krate":0,"index":3081},"children":[],"decl_id":null,"docs":" The number of instances to draw.\n","sig":null,"attributes":[{"value":"/ The number of instances to draw.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155082,"byte_end":155118,"line_start":3643,"line_end":3643,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":3084},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155226,"byte_end":155237,"line_start":3646,"line_end":3646,"column_start":9,"column_end":20},"name":"first_index","qualname":"::DrawIndexedIndirectArgs::first_index","value":"u32","parent":{"krate":0,"index":3081},"children":[],"decl_id":null,"docs":" Offset into the index buffer, in indices, begin drawing from.\n","sig":null,"attributes":[{"value":"/ Offset into the index buffer, in indices, begin drawing from.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155152,"byte_end":155217,"line_start":3645,"line_end":3645,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":3085},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155327,"byte_end":155338,"line_start":3648,"line_end":3648,"column_start":9,"column_end":20},"name":"base_vertex","qualname":"::DrawIndexedIndirectArgs::base_vertex","value":"i32","parent":{"krate":0,"index":3081},"children":[],"decl_id":null,"docs":" Added to each index value before indexing into the vertex buffers.\n","sig":null,"attributes":[{"value":"/ Added to each index value before indexing into the vertex buffers.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155248,"byte_end":155318,"line_start":3647,"line_end":3647,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":3086},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155385,"byte_end":155399,"line_start":3650,"line_end":3650,"column_start":9,"column_end":23},"name":"first_instance","qualname":"::DrawIndexedIndirectArgs::first_instance","value":"u32","parent":{"krate":0,"index":3081},"children":[],"decl_id":null,"docs":" First instance to draw.\n","sig":null,"attributes":[{"value":"/ First instance to draw.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155349,"byte_end":155376,"line_start":3649,"line_end":3649,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":3092},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155520,"byte_end":155540,"line_start":3656,"line_end":3656,"column_start":12,"column_end":32},"name":"DispatchIndirectArgs","qualname":"::DispatchIndirectArgs","value":"DispatchIndirectArgs { group_size_x, group_size_y, group_size_z }","parent":null,"children":[{"krate":0,"index":3093},{"krate":0,"index":3094},{"krate":0,"index":3095}],"decl_id":null,"docs":" Argument buffer layout for dispatch_indirect commands.\n","sig":null,"attributes":[{"value":"/ Argument buffer layout for dispatch_indirect commands.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155409,"byte_end":155467,"line_start":3653,"line_end":3653,"column_start":1,"column_end":59}},{"value":"repr(C)","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155468,"byte_end":155478,"line_start":3654,"line_end":3654,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3093},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155610,"byte_end":155622,"line_start":3658,"line_end":3658,"column_start":9,"column_end":21},"name":"group_size_x","qualname":"::DispatchIndirectArgs::group_size_x","value":"u32","parent":{"krate":0,"index":3092},"children":[],"decl_id":null,"docs":" X dimension of the grid of workgroups to dispatch.\n","sig":null,"attributes":[{"value":"/ X dimension of the grid of workgroups to dispatch.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155547,"byte_end":155601,"line_start":3657,"line_end":3657,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":3094},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155696,"byte_end":155708,"line_start":3660,"line_end":3660,"column_start":9,"column_end":21},"name":"group_size_y","qualname":"::DispatchIndirectArgs::group_size_y","value":"u32","parent":{"krate":0,"index":3092},"children":[],"decl_id":null,"docs":" Y dimension of the grid of workgroups to dispatch.\n","sig":null,"attributes":[{"value":"/ Y dimension of the grid of workgroups to dispatch.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155633,"byte_end":155687,"line_start":3659,"line_end":3659,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":3095},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155782,"byte_end":155794,"line_start":3662,"line_end":3662,"column_start":9,"column_end":21},"name":"group_size_z","qualname":"::DispatchIndirectArgs::group_size_z","value":"u32","parent":{"krate":0,"index":3092},"children":[],"decl_id":null,"docs":" Z dimension of the grid of workgroups to dispatch.\n","sig":null,"attributes":[{"value":"/ Z dimension of the grid of workgroups to dispatch.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155719,"byte_end":155773,"line_start":3661,"line_end":3661,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":3101},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":156015,"byte_end":156032,"line_start":3669,"line_end":3669,"column_start":12,"column_end":29},"name":"ShaderBoundChecks","qualname":"::ShaderBoundChecks","value":"ShaderBoundChecks {  }","parent":null,"children":[{"krate":0,"index":3102}],"decl_id":null,"docs":" Describes how shader bound checks should be performed.\n","sig":null,"attributes":[{"value":"/ Describes how shader bound checks should be performed.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":155804,"byte_end":155862,"line_start":3665,"line_end":3665,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":156171,"byte_end":156174,"line_start":3675,"line_end":3675,"column_start":12,"column_end":15},"name":"new","qualname":"<ShaderBoundChecks>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new configuration where the shader is bound checked.\n","sig":null,"attributes":[{"value":"/ Creates a new configuration where the shader is bound checked.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":156093,"byte_end":156159,"line_start":3674,"line_end":3674,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":156518,"byte_end":156527,"line_start":3686,"line_end":3686,"column_start":19,"column_end":28},"name":"unchecked","qualname":"<ShaderBoundChecks>::unchecked","value":"pub unsafe fn unchecked() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new configuration where the shader isn't bound checked.","sig":null,"attributes":[{"value":"/ Creates a new configuration where the shader isn't bound checked.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":156270,"byte_end":156339,"line_start":3681,"line_end":3681,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":156344,"byte_end":156347,"line_start":3682,"line_end":3682,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":156352,"byte_end":156364,"line_start":3683,"line_end":3683,"column_start":5,"column_end":17}},{"value":"/ The caller MUST ensure that all shaders built with this configuration don't perform any","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":156369,"byte_end":156460,"line_start":3684,"line_end":3684,"column_start":5,"column_end":96}},{"value":"/ out of bounds reads or writes.","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":156465,"byte_end":156499,"line_start":3685,"line_end":3685,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":156708,"byte_end":156722,"line_start":3693,"line_end":3693,"column_start":12,"column_end":26},"name":"runtime_checks","qualname":"<ShaderBoundChecks>::runtime_checks","value":"pub fn runtime_checks(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Query whether runtime bound checks are enabled in this configuration\n","sig":null,"attributes":[{"value":"/ Query whether runtime bound checks are enabled in this configuration","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":156624,"byte_end":156696,"line_start":3692,"line_end":3692,"column_start":5,"column_end":77}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2767,"byte_end":2782,"line_start":80,"line_end":80,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":4239,"byte_end":4247,"line_start":120,"line_end":120,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":5087,"byte_end":5108,"line_start":142,"line_end":142,"column_start":21,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":23160,"byte_end":23168,"line_start":560,"line_end":560,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":30907,"byte_end":30913,"line_start":690,"line_end":690,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":32321,"byte_end":32327,"line_start":724,"line_end":724,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":36210,"byte_end":36225,"line_start":812,"line_end":812,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":36749,"byte_end":36770,"line_start":829,"line_end":829,"column_start":18,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":36979,"byte_end":37000,"line_start":839,"line_end":839,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":40058,"byte_end":40072,"line_start":903,"line_end":903,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":42510,"byte_end":42526,"line_start":978,"line_end":978,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44889,"byte_end":44909,"line_start":1039,"line_end":1039,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44970,"byte_end":44990,"line_start":1045,"line_end":1045,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46841,"byte_end":46855,"line_start":1114,"line_end":1114,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":47591,"byte_end":47605,"line_start":1136,"line_end":1136,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":48547,"byte_end":48561,"line_start":1164,"line_end":1164,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":49104,"byte_end":49114,"line_start":1185,"line_end":1185,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":50792,"byte_end":50808,"line_start":1227,"line_end":1227,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":52161,"byte_end":52178,"line_start":1264,"line_end":1264,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":52262,"byte_end":52279,"line_start":1270,"line_end":1270,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53204,"byte_end":53213,"line_start":1297,"line_end":1297,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":54070,"byte_end":54081,"line_start":1331,"line_end":1331,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":57120,"byte_end":57136,"line_start":1397,"line_end":1397,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":89147,"byte_end":89160,"line_start":1968,"line_end":1968,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":100360,"byte_end":100371,"line_start":2166,"line_end":2166,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":101086,"byte_end":101098,"line_start":2188,"line_end":2188,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102174,"byte_end":102188,"line_start":2218,"line_end":2218,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":103272,"byte_end":103289,"line_start":2246,"line_end":2246,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104081,"byte_end":104092,"line_start":2269,"line_end":2269,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":105110,"byte_end":105126,"line_start":2300,"line_end":2300,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":106042,"byte_end":106058,"line_start":2325,"line_end":2325,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":106711,"byte_end":106727,"line_start":2343,"line_end":2343,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107731,"byte_end":107746,"line_start":2374,"line_end":2374,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":108434,"byte_end":108448,"line_start":2397,"line_end":2397,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":112533,"byte_end":112545,"line_start":2497,"line_end":2497,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":116572,"byte_end":116588,"line_start":2590,"line_end":2590,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":117260,"byte_end":117284,"line_start":2612,"line_end":2612,"column_start":9,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":117500,"byte_end":117524,"line_start":2621,"line_end":2621,"column_start":21,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121835,"byte_end":121840,"line_start":2730,"line_end":2730,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123337,"byte_end":123345,"line_start":2801,"line_end":2801,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123443,"byte_end":123451,"line_start":2806,"line_end":2806,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124056,"byte_end":124064,"line_start":2833,"line_end":2833,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124216,"byte_end":124224,"line_start":2843,"line_end":2843,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128415,"byte_end":128432,"line_start":2938,"line_end":2938,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131399,"byte_end":131412,"line_start":3015,"line_end":3015,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132359,"byte_end":132370,"line_start":3051,"line_end":3051,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":133011,"byte_end":133021,"line_start":3074,"line_end":3074,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":134019,"byte_end":134042,"line_start":3103,"line_end":3103,"column_start":9,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":135144,"byte_end":135166,"line_start":3136,"line_end":3136,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":135378,"byte_end":135400,"line_start":3145,"line_end":3145,"column_start":21,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139184,"byte_end":139201,"line_start":3234,"line_end":3234,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140476,"byte_end":140493,"line_start":3285,"line_end":3285,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":145866,"byte_end":145877,"line_start":3412,"line_end":3412,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":149334,"byte_end":149355,"line_start":3497,"line_end":3497,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151272,"byte_end":151290,"line_start":3549,"line_end":3549,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":156069,"byte_end":156086,"line_start":3673,"line_end":3673,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":156794,"byte_end":156811,"line_start":3698,"line_end":3698,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":2767,"byte_end":2782,"line_start":80,"line_end":80,"column_start":18,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":223},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":4239,"byte_end":4247,"line_start":120,"line_end":120,"column_start":24,"column_end":32},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":244},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":5087,"byte_end":5108,"line_start":142,"line_end":142,"column_start":21,"column_end":42},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":366},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":23160,"byte_end":23168,"line_start":560,"line_end":560,"column_start":6,"column_end":14},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":30907,"byte_end":30913,"line_start":690,"line_end":690,"column_start":18,"column_end":24},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":631},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":32321,"byte_end":32327,"line_start":724,"line_end":724,"column_start":6,"column_end":12},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":631},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":36210,"byte_end":36225,"line_start":812,"line_end":812,"column_start":18,"column_end":33},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":677},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":36749,"byte_end":36770,"line_start":829,"line_end":829,"column_start":18,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":695},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":36979,"byte_end":37000,"line_start":839,"line_end":839,"column_start":6,"column_end":27},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":695},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":40058,"byte_end":40072,"line_start":903,"line_end":903,"column_start":6,"column_end":20},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":717},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":42510,"byte_end":42526,"line_start":978,"line_end":978,"column_start":9,"column_end":25},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":922},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44889,"byte_end":44909,"line_start":1039,"line_end":1039,"column_start":18,"column_end":38},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1043},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":44970,"byte_end":44990,"line_start":1045,"line_end":1045,"column_start":6,"column_end":26},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1043},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":46841,"byte_end":46855,"line_start":1114,"line_end":1114,"column_start":18,"column_end":32},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1124},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":47591,"byte_end":47605,"line_start":1136,"line_end":1136,"column_start":6,"column_end":20},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":48547,"byte_end":48561,"line_start":1164,"line_end":1164,"column_start":18,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1154},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":49104,"byte_end":49114,"line_start":1185,"line_end":1185,"column_start":6,"column_end":16},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1173},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":50792,"byte_end":50808,"line_start":1227,"line_end":1227,"column_start":30,"column_end":46},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1191},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":52161,"byte_end":52178,"line_start":1264,"line_end":1264,"column_start":18,"column_end":35},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1209},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":52262,"byte_end":52279,"line_start":1270,"line_end":1270,"column_start":6,"column_end":23},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1209},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":53204,"byte_end":53213,"line_start":1297,"line_end":1297,"column_start":18,"column_end":27},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1239},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":54070,"byte_end":54081,"line_start":1331,"line_end":1331,"column_start":18,"column_end":29},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1281},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":57120,"byte_end":57136,"line_start":1397,"line_end":1397,"column_start":18,"column_end":34},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1330},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":89147,"byte_end":89160,"line_start":1968,"line_end":1968,"column_start":6,"column_end":19},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1483},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":100360,"byte_end":100371,"line_start":2166,"line_end":2166,"column_start":18,"column_end":29},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1692},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":101086,"byte_end":101098,"line_start":2188,"line_end":2188,"column_start":6,"column_end":18},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":102174,"byte_end":102188,"line_start":2218,"line_end":2218,"column_start":6,"column_end":20},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1825},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":103272,"byte_end":103289,"line_start":2246,"line_end":2246,"column_start":6,"column_end":23},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1840},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":104081,"byte_end":104092,"line_start":2269,"line_end":2269,"column_start":18,"column_end":29},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1854},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":105110,"byte_end":105126,"line_start":2300,"line_end":2300,"column_start":18,"column_end":34},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1875},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":106042,"byte_end":106058,"line_start":2325,"line_end":2325,"column_start":6,"column_end":22},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1914},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":106711,"byte_end":106727,"line_start":2343,"line_end":2343,"column_start":18,"column_end":34},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1914},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":107731,"byte_end":107746,"line_start":2374,"line_end":2374,"column_start":6,"column_end":21},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1934},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":108434,"byte_end":108448,"line_start":2397,"line_end":2397,"column_start":18,"column_end":32},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1973},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":112533,"byte_end":112545,"line_start":2497,"line_end":2497,"column_start":6,"column_end":18},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2013},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":116572,"byte_end":116588,"line_start":2590,"line_end":2590,"column_start":9,"column_end":25},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2257},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":117260,"byte_end":117284,"line_start":2612,"line_end":2612,"column_start":9,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":117500,"byte_end":117524,"line_start":2621,"line_end":2621,"column_start":21,"column_end":45},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2284},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":121835,"byte_end":121840,"line_start":2730,"line_end":2730,"column_start":6,"column_end":11},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2472},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123337,"byte_end":123345,"line_start":2801,"line_end":2801,"column_start":6,"column_end":14},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2509},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":123443,"byte_end":123451,"line_start":2806,"line_end":2806,"column_start":18,"column_end":26},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2509},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124056,"byte_end":124064,"line_start":2833,"line_end":2833,"column_start":18,"column_end":26},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2528},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":124216,"byte_end":124224,"line_start":2843,"line_end":2843,"column_start":6,"column_end":14},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2528},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":128415,"byte_end":128432,"line_start":2938,"line_end":2938,"column_start":9,"column_end":26},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2547},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":131399,"byte_end":131412,"line_start":3015,"line_end":3015,"column_start":18,"column_end":31},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2577},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":132359,"byte_end":132370,"line_start":3051,"line_end":3051,"column_start":18,"column_end":29},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2598},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":133011,"byte_end":133021,"line_start":3074,"line_end":3074,"column_start":18,"column_end":28},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2625},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":134019,"byte_end":134042,"line_start":3103,"line_end":3103,"column_start":9,"column_end":32},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2663},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":135144,"byte_end":135166,"line_start":3136,"line_end":3136,"column_start":9,"column_end":31},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2709},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":135378,"byte_end":135400,"line_start":3145,"line_end":3145,"column_start":21,"column_end":43},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2709},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":139184,"byte_end":139201,"line_start":3234,"line_end":3234,"column_start":18,"column_end":35},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2744},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":140476,"byte_end":140493,"line_start":3285,"line_end":3285,"column_start":18,"column_end":35},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2764},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":145866,"byte_end":145877,"line_start":3412,"line_end":3412,"column_start":6,"column_end":17},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":149334,"byte_end":149355,"line_start":3497,"line_end":3497,"column_start":6,"column_end":27},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2903},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":151272,"byte_end":151290,"line_start":3549,"line_end":3549,"column_start":9,"column_end":27},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2940},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":156069,"byte_end":156086,"line_start":3673,"line_end":3673,"column_start":6,"column_end":23},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":3101},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/vagrant/.cargo/registry/src/github.com-1ecc6299db9ec823/wgpu-types-0.12.0/src/lib.rs","byte_start":156794,"byte_end":156811,"line_start":3698,"line_end":3698,"column_start":18,"column_end":35},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3101},"to":{"krate":2,"index":2982}}]}